
Unit_H7_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd08  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c044  0800c044  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c04c  0800c04c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c04c  0800c04c  0001c04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c050  0800c050  0001c050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800c054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  24000014  0800c068  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000300  0800c068  00020300  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023acd  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003394  00000000  00000000  00043b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00046ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  000483a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000349c5  00000000  00000000  000497b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ca  00000000  00000000  0007e175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016121c  00000000  00000000  0009763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f885b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd0  00000000  00000000  001f88b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bfc0 	.word	0x0800bfc0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	0800bfc0 	.word	0x0800bfc0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* isr with booleans for flow control */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	start_adc_transfer = true;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	24000040 	.word	0x24000040

08000638 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	adc_transfer_completed = true;
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	24000041 	.word	0x24000041

08000658 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(GPIOB, precharger_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, precharger_Pin, GPIO_PIN_RESET);
	//precharger
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	send_uart = true;
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <HAL_UART_TxCpltCallback+0x1c>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	24000000 	.word	0x24000000

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000696:	4bc0      	ldr	r3, [pc, #768]	; (8000998 <main+0x308>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d11b      	bne.n	80006da <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
}
 80006ac:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ae:	4bba      	ldr	r3, [pc, #744]	; (8000998 <main+0x308>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006c2:	4bb5      	ldr	r3, [pc, #724]	; (8000998 <main+0x308>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4ab4      	ldr	r2, [pc, #720]	; (8000998 <main+0x308>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
}
 80006d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d4:	f3bf 8f6f 	isb	sy
}
 80006d8:	e000      	b.n	80006dc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006da:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006dc:	4bae      	ldr	r3, [pc, #696]	; (8000998 <main+0x308>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d138      	bne.n	800075a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e8:	4bab      	ldr	r3, [pc, #684]	; (8000998 <main+0x308>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f0:	f3bf 8f4f 	dsb	sy
}
 80006f4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f6:	4ba8      	ldr	r3, [pc, #672]	; (8000998 <main+0x308>)
 80006f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000700:	0b5b      	lsrs	r3, r3, #13
 8000702:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800071a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000720:	499d      	ldr	r1, [pc, #628]	; (8000998 <main+0x308>)
 8000722:	4313      	orrs	r3, r2
 8000724:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	627a      	str	r2, [r7, #36]	; 0x24
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ef      	bne.n	8000712 <main+0x82>
    } while(sets-- != 0U);
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	62ba      	str	r2, [r7, #40]	; 0x28
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1e5      	bne.n	8000708 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800073c:	f3bf 8f4f 	dsb	sy
}
 8000740:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000742:	4b95      	ldr	r3, [pc, #596]	; (8000998 <main+0x308>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a94      	ldr	r2, [pc, #592]	; (8000998 <main+0x308>)
 8000748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
}
 8000752:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000754:	f3bf 8f6f 	isb	sy
}
 8000758:	e000      	b.n	800075c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800075a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075c:	f000 ff3a 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000760:	f000 f93c 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 fb60 	bl	8000e28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000768:	f000 faf2 	bl	8000d50 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800076c:	f000 fb3c 	bl	8000de8 <MX_DMA_Init>
  MX_ADC3_Init();
 8000770:	f000 f9ac 	bl	8000acc <MX_ADC3_Init>
  MX_TIM1_Init();
 8000774:	f000 fa4c 	bl	8000c10 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000778:	f000 fa9e 	bl	8000cb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800077c:	4887      	ldr	r0, [pc, #540]	; (800099c <main+0x30c>)
 800077e:	f009 f8c3 	bl	8009908 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(start_adc_transfer)
 8000782:	4b87      	ldr	r3, [pc, #540]	; (80009a0 <main+0x310>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00d      	beq.n	80007a8 <main+0x118>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000792:	4884      	ldr	r0, [pc, #528]	; (80009a4 <main+0x314>)
 8000794:	f006 f846 	bl	8006824 <HAL_GPIO_WritePin>

		  /* start adc transfer */
		  HAL_ADC_Start_DMA(&hadc3, adc, 4);
 8000798:	2204      	movs	r2, #4
 800079a:	4983      	ldr	r1, [pc, #524]	; (80009a8 <main+0x318>)
 800079c:	4883      	ldr	r0, [pc, #524]	; (80009ac <main+0x31c>)
 800079e:	f001 fcb5 	bl	800210c <HAL_ADC_Start_DMA>

		  start_adc_transfer = false;
 80007a2:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <main+0x310>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	  }
	  if(adc_transfer_completed)
 80007a8:	4b81      	ldr	r3, [pc, #516]	; (80009b0 <main+0x320>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0e7      	beq.n	8000782 <main+0xf2>
 80007b2:	4b7d      	ldr	r3, [pc, #500]	; (80009a8 <main+0x318>)
 80007b4:	623b      	str	r3, [r7, #32]
 80007b6:	2304      	movs	r3, #4
 80007b8:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd1d      	ble.n	80007fc <main+0x16c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007c0:	6a3b      	ldr	r3, [r7, #32]
 80007c2:	f003 021f 	and.w	r2, r3, #31
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	4413      	add	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007d0:	f3bf 8f4f 	dsb	sy
}
 80007d4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80007d6:	4a70      	ldr	r2, [pc, #448]	; (8000998 <main+0x308>)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3320      	adds	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	3b20      	subs	r3, #32
 80007e8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf2      	bgt.n	80007d6 <main+0x146>
  __ASM volatile ("dsb 0xF":::"memory");
 80007f0:	f3bf 8f4f 	dsb	sy
}
 80007f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f6:	f3bf 8f6f 	isb	sy
}
 80007fa:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80007fc:	bf00      	nop

		  /* reuben & simon sensor calculations */
		  /*
		   * PC2 A4 DC stroom
		   * */
		  dc_spanning 	= adc[0] / 2; //
 80007fe:	4b6a      	ldr	r3, [pc, #424]	; (80009a8 <main+0x318>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800080c:	4b69      	ldr	r3, [pc, #420]	; (80009b4 <main+0x324>)
 800080e:	edc3 7a00 	vstr	s15, [r3]

		  ac_spanning 	= adc[2] / 2;
 8000812:	4b65      	ldr	r3, [pc, #404]	; (80009a8 <main+0x318>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	085b      	lsrs	r3, r3, #1
 8000818:	ee07 3a90 	vmov	s15, r3
 800081c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000820:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <main+0x328>)
 8000822:	edc3 7a00 	vstr	s15, [r3]
		  ac_stroom 	= adc[3] / 2;
 8000826:	4b60      	ldr	r3, [pc, #384]	; (80009a8 <main+0x318>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	085b      	lsrs	r3, r3, #1
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000834:	4b61      	ldr	r3, [pc, #388]	; (80009bc <main+0x32c>)
 8000836:	edc3 7a00 	vstr	s15, [r3]
		  //0.0084x - 19.521

		  //reuben
		  dc_stroom		= (0.0084 * (float)(adc[1])) - 19.521; //20
 800083a:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <main+0x318>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000980 <main+0x2f0>
 800084e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000852:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000988 <main+0x2f8>
 8000856:	ee37 7b46 	vsub.f64	d7, d7, d6
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <main+0x330>)
 8000860:	edc3 7a00 	vstr	s15, [r3]

		  //mario spanning meter
		  dc_stroom		= 0.00080566 * (float)(adc[1]);
 8000864:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <main+0x318>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000870:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000874:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000990 <main+0x300>
 8000878:	ee27 7b06 	vmul.f64	d7, d7, d6
 800087c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000880:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <main+0x330>)
 8000882:	edc3 7a00 	vstr	s15, [r3]
		  //dc_stroom	 	= dc_stroom / 0.0485437;
		  //dc_stroom 	= (((8055081.0 * adc[1]) - 16872270820.0) / 1000000000.0); //adc[3] / 2; //DC stroom

		  //float fv = (((8055081 * adc_memory[0]) - 16872270820)/1000000000) * 100;
		  adc_transfer_completed = false;
 8000886:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <main+0x320>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000892:	4844      	ldr	r0, [pc, #272]	; (80009a4 <main+0x314>)
 8000894:	f005 ffc6 	bl	8006824 <HAL_GPIO_WritePin>
		   * dan wordt bijvoorbeeld sectie 1 van de code in de eerste cycle gedaan
		   * en sectie 2 bij de volgende cycle
		   * wanneer de uart vestuurd wordt zijn er dan 10 cycles voorbij
		   *
		   * */
		  if(send_uart)
 8000898:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <main+0x334>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f43f af6f 	beq.w	8000782 <main+0xf2>
		  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	483e      	ldr	r0, [pc, #248]	; (80009a4 <main+0x314>)
 80008ac:	f005 ffba 	bl	8006824 <HAL_GPIO_WritePin>

			  memset(str,0,strlen(str));
 80008b0:	4845      	ldr	r0, [pc, #276]	; (80009c8 <main+0x338>)
 80008b2:	f7ff fd2d 	bl	8000310 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	4842      	ldr	r0, [pc, #264]	; (80009c8 <main+0x338>)
 80008be:	f00b fb2d 	bl	800bf1c <memset>

			  /* floating point to string */
			  int32_t adc_temp[4] = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
			  adc_temp[0] 	= (int32_t)(dc_spanning 	* 100);
 80008ce:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <main+0x324>)
 80008d0:	edd3 7a00 	vldr	s15, [r3]
 80008d4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80009cc <main+0x33c>
 80008d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e0:	ee17 3a90 	vmov	r3, s15
 80008e4:	607b      	str	r3, [r7, #4]
			  adc_temp[1]  	= (int32_t)(dc_stroom 		* 100);
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <main+0x330>)
 80008e8:	edd3 7a00 	vldr	s15, [r3]
 80008ec:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80009cc <main+0x33c>
 80008f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f8:	ee17 3a90 	vmov	r3, s15
 80008fc:	60bb      	str	r3, [r7, #8]
			  adc_temp[2]  	= (int32_t)(ac_spanning 	* 100);
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <main+0x328>)
 8000900:	edd3 7a00 	vldr	s15, [r3]
 8000904:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80009cc <main+0x33c>
 8000908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800090c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000910:	ee17 3a90 	vmov	r3, s15
 8000914:	60fb      	str	r3, [r7, #12]
			  adc_temp[3] 	= (int32_t)(ac_stroom);
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <main+0x32c>)
 8000918:	edd3 7a00 	vldr	s15, [r3]
 800091c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000920:	ee17 3a90 	vmov	r3, s15
 8000924:	613b      	str	r3, [r7, #16]
			  strcat(str, adc_str[1]);
			  strcat(str, ",");
			  strcat(str, adc_str[2]);
			  strcat(str, ",");
			  */
			  itoa(adc[1], adc_str[1], 10);
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <main+0x318>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	220a      	movs	r2, #10
 800092c:	4928      	ldr	r1, [pc, #160]	; (80009d0 <main+0x340>)
 800092e:	4618      	mov	r0, r3
 8000930:	f00b faf2 	bl	800bf18 <itoa>
			  strcpy(str, adc_str[1]);
 8000934:	4926      	ldr	r1, [pc, #152]	; (80009d0 <main+0x340>)
 8000936:	4824      	ldr	r0, [pc, #144]	; (80009c8 <main+0x338>)
 8000938:	f00b faf8 	bl	800bf2c <strcpy>
			  strcat(str, "\r\n");
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <main+0x338>)
 800093e:	f7ff fce7 	bl	8000310 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <main+0x338>)
 8000948:	4413      	add	r3, r2
 800094a:	4a22      	ldr	r2, [pc, #136]	; (80009d4 <main+0x344>)
 800094c:	8811      	ldrh	r1, [r2, #0]
 800094e:	7892      	ldrb	r2, [r2, #2]
 8000950:	8019      	strh	r1, [r3, #0]
 8000952:	709a      	strb	r2, [r3, #2]

			  send_uart = false;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <main+0x334>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart3, (uint8_t *)str, strlen(str));
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <main+0x338>)
 800095c:	f7ff fcd8 	bl	8000310 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29b      	uxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	4918      	ldr	r1, [pc, #96]	; (80009c8 <main+0x338>)
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <main+0x348>)
 800096a:	f009 fcdd 	bl	800a328 <HAL_UART_Transmit_IT>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <main+0x314>)
 8000976:	f005 ff55 	bl	8006824 <HAL_GPIO_WritePin>
	  if(start_adc_transfer)
 800097a:	e702      	b.n	8000782 <main+0xf2>
 800097c:	f3af 8000 	nop.w
 8000980:	ea4a8c15 	.word	0xea4a8c15
 8000984:	3f813404 	.word	0x3f813404
 8000988:	4189374c 	.word	0x4189374c
 800098c:	40338560 	.word	0x40338560
 8000990:	ad045a83 	.word	0xad045a83
 8000994:	3f4a665d 	.word	0x3f4a665d
 8000998:	e000ed00 	.word	0xe000ed00
 800099c:	24000220 	.word	0x24000220
 80009a0:	24000040 	.word	0x24000040
 80009a4:	58020400 	.word	0x58020400
 80009a8:	24000030 	.word	0x24000030
 80009ac:	240001b0 	.word	0x240001b0
 80009b0:	24000041 	.word	0x24000041
 80009b4:	24000044 	.word	0x24000044
 80009b8:	2400004c 	.word	0x2400004c
 80009bc:	24000050 	.word	0x24000050
 80009c0:	24000048 	.word	0x24000048
 80009c4:	24000000 	.word	0x24000000
 80009c8:	24000054 	.word	0x24000054
 80009cc:	42c80000 	.word	0x42c80000
 80009d0:	24000090 	.word	0x24000090
 80009d4:	0800bfd8 	.word	0x0800bfd8
 80009d8:	240000a8 	.word	0x240000a8

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	; 0x70
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	224c      	movs	r2, #76	; 0x4c
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f00b fa96 	bl	800bf1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2220      	movs	r2, #32
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00b fa90 	bl	800bf1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009fc:	2002      	movs	r0, #2
 80009fe:	f005 ff45 	bl	800688c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <SystemClock_Config+0xe8>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <SystemClock_Config+0xe8>)
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <SystemClock_Config+0xe8>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a1e:	bf00      	nop
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <SystemClock_Config+0xe8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	d1f8      	bne.n	8000a20 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <SystemClock_Config+0xec>)
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	f023 0303 	bic.w	r3, r3, #3
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <SystemClock_Config+0xec>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a42:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000a54:	f240 1313 	movw	r3, #275	; 0x113
 8000a58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a66:	2304      	movs	r3, #4
 8000a68:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 ff42 	bl	8006900 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a82:	f000 fad3 	bl	800102c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	233f      	movs	r3, #63	; 0x3f
 8000a88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a92:	2308      	movs	r3, #8
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2103      	movs	r1, #3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fab5 	bl	800701c <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ab8:	f000 fab8 	bl	800102c <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3770      	adds	r7, #112	; 0x70
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	58024800 	.word	0x58024800
 8000ac8:	58024400 	.word	0x58024400

08000acc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2224      	movs	r2, #36	; 0x24
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f00b fa1f 	bl	800bf1c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ade:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000ae0:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <MX_ADC3_Init+0x134>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae4:	4b45      	ldr	r3, [pc, #276]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b02:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 4;
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b36:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b50:	482a      	ldr	r0, [pc, #168]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b52:	f001 f8d3 	bl	8001cfc <HAL_ADC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b5c:	f000 fa66 	bl	800102c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <MX_ADC3_Init+0x138>)
 8000b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b64:	2306      	movs	r3, #6
 8000b66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b72:	2304      	movs	r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481b      	ldr	r0, [pc, #108]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000b90:	f001 fdf0 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000b9a:	f000 fa47 	bl	800102c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000bac:	f001 fde2 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 8000bb6:	f000 fa39 	bl	800102c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_ADC3_Init+0x13c>)
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000bc8:	f001 fdd4 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC3_Init+0x10a>
  {
    Error_Handler();
 8000bd2:	f000 fa2b 	bl	800102c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_ADC3_Init+0x140>)
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bda:	2318      	movs	r3, #24
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC3_Init+0x130>)
 8000be4:	f001 fdc6 	bl	8002774 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC3_Init+0x126>
  {
    Error_Handler();
 8000bee:	f000 fa1d 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240001b0 	.word	0x240001b0
 8000c00:	58026000 	.word	0x58026000
 8000c04:	19200040 	.word	0x19200040
 8000c08:	25b00200 	.word	0x25b00200
 8000c0c:	10c00010 	.word	0x10c00010

08000c10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <MX_TIM1_Init+0xa4>)
 8000c32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5500;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c42:	f241 527c 	movw	r2, #5500	; 0x157c
 8000c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c5c:	f008 fdfc 	bl	8009858 <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c66:	f000 f9e1 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c78:	f008 ffec 	bl	8009c54 <HAL_TIM_ConfigClockSource>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000c82:	f000 f9d3 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c86:	2320      	movs	r3, #32
 8000c88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM1_Init+0xa0>)
 8000c98:	f009 fa3c 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ca2:	f000 f9c3 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000220 	.word	0x24000220
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <MX_USART2_UART_Init+0x94>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000d02:	f009 fac1 	bl	800a288 <HAL_UART_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d0c:	f000 f98e 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000d14:	f00a fff9 	bl	800bd0a <HAL_UARTEx_SetTxFifoThreshold>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f000 f985 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000d26:	f00b f82e 	bl	800bd86 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d30:	f000 f97c 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_USART2_UART_Init+0x90>)
 8000d36:	f00a ffaf 	bl	800bc98 <HAL_UARTEx_DisableFifoMode>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f000 f974 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2400026c 	.word	0x2400026c
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <MX_USART3_UART_Init+0x94>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d9a:	f009 fa75 	bl	800a288 <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000da4:	f000 f942 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dac:	f00a ffad 	bl	800bd0a <HAL_UARTEx_SetTxFifoThreshold>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000db6:	f000 f939 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f00a ffe2 	bl	800bd86 <HAL_UARTEx_SetRxFifoThreshold>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc8:	f000 f930 	bl	800102c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f00a ff63 	bl	800bc98 <HAL_UARTEx_DisableFifoMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f928 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240000a8 	.word	0x240000a8
 8000de4:	40004800 	.word	0x40004800

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 fcf2 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 fd09 	bl	800382e <HAL_NVIC_EnableIRQ>

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b74      	ldr	r3, [pc, #464]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a72      	ldr	r2, [pc, #456]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5c:	4b6c      	ldr	r3, [pc, #432]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a6b      	ldr	r2, [pc, #428]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b68      	ldr	r3, [pc, #416]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	4b65      	ldr	r3, [pc, #404]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a63      	ldr	r2, [pc, #396]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b61      	ldr	r3, [pc, #388]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a5c      	ldr	r2, [pc, #368]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b59      	ldr	r3, [pc, #356]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	4b56      	ldr	r3, [pc, #344]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b52      	ldr	r3, [pc, #328]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b47      	ldr	r3, [pc, #284]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b43      	ldr	r3, [pc, #268]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a3e      	ldr	r2, [pc, #248]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <MX_GPIO_Init+0x1e8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|precharger_Pin|GPIO_PIN_11|LED_RED_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f644 4101 	movw	r1, #19457	; 0x4c01
 8000f34:	4837      	ldr	r0, [pc, #220]	; (8001014 <MX_GPIO_Init+0x1ec>)
 8000f36:	f005 fc75 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4835      	ldr	r0, [pc, #212]	; (8001018 <MX_GPIO_Init+0x1f0>)
 8000f42:	f005 fc6f 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4834      	ldr	r0, [pc, #208]	; (800101c <MX_GPIO_Init+0x1f4>)
 8000f4c:	f005 fc6a 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_GPIO_Init+0x1f8>)
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	482f      	ldr	r0, [pc, #188]	; (8001024 <MX_GPIO_Init+0x1fc>)
 8000f66:	f005 fab5 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f6a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4824      	ldr	r0, [pc, #144]	; (8001014 <MX_GPIO_Init+0x1ec>)
 8000f84:	f005 faa6 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : precharger_Pin PB11 */
  GPIO_InitStruct.Pin = precharger_Pin|GPIO_PIN_11;
 8000f88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2302      	movs	r3, #2
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481c      	ldr	r0, [pc, #112]	; (8001014 <MX_GPIO_Init+0x1ec>)
 8000fa2:	f005 fa97 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4816      	ldr	r0, [pc, #88]	; (8001018 <MX_GPIO_Init+0x1f0>)
 8000fc0:	f005 fa88 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_GPIO_Init+0x1f8>)
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_GPIO_Init+0x200>)
 8000fd8:	f005 fa7c 	bl	80064d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480a      	ldr	r0, [pc, #40]	; (800101c <MX_GPIO_Init+0x1f4>)
 8000ff4:	f005 fa6e 	bl	80064d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2028      	movs	r0, #40	; 0x28
 8000ffe:	f002 fbfc 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001002:	2028      	movs	r0, #40	; 0x28
 8001004:	f002 fc13 	bl	800382e <HAL_NVIC_EnableIRQ>

}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	58024400 	.word	0x58024400
 8001014:	58020400 	.word	0x58020400
 8001018:	58020c00 	.word	0x58020c00
 800101c:	58021000 	.word	0x58021000
 8001020:	11110000 	.word	0x11110000
 8001024:	58020800 	.word	0x58020800
 8001028:	58021800 	.word	0x58021800

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_MspInit+0x30>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x30>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x30>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58024400 	.word	0x58024400

0800106c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0b8      	sub	sp, #224	; 0xe0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	22b4      	movs	r2, #180	; 0xb4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00a ff45 	bl	800bf1c <memset>
  if(hadc->Instance==ADC3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_ADC_MspInit+0x170>)
 8001098:	4293      	cmp	r3, r2
 800109a:	f040 809a 	bne.w	80011d2 <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800109e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 40;
 80010a8:	2328      	movs	r3, #40	; 0x28
 80010aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010b8:	23c0      	movs	r3, #192	; 0xc0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f006 fb30 	bl	8007734 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 80010da:	f7ff ffa7 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010de:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	4a3e      	ldr	r2, [pc, #248]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 80010e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ee:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	4a37      	ldr	r2, [pc, #220]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110c:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112a:	4b2d      	ldr	r3, [pc, #180]	; (80011e0 <HAL_ADC_MspInit+0x174>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    PF4     ------> ADC3_INP9
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8001138:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800113c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001140:	2303      	movs	r3, #3
 8001142:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001150:	4619      	mov	r1, r3
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <HAL_ADC_MspInit+0x178>)
 8001154:	f005 f9be 	bl	80064d4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001158:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800115c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001160:	f000 faca 	bl	80016f8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_ADC_MspInit+0x180>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 800116c:	2273      	movs	r2, #115	; 0x73
 800116e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 800117e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001182:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 8001186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 800118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001192:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 80011a8:	f002 fb5c 	bl	8003864 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_ADC_MspInit+0x14a>
    {
      Error_Handler();
 80011b2:	f7ff ff3b 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_ADC_MspInit+0x17c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	207f      	movs	r0, #127	; 0x7f
 80011c8:	f002 fb17 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80011cc:	207f      	movs	r0, #127	; 0x7f
 80011ce:	f002 fb2e 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	37e0      	adds	r7, #224	; 0xe0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	58026000 	.word	0x58026000
 80011e0:	58024400 	.word	0x58024400
 80011e4:	58021400 	.word	0x58021400
 80011e8:	24000138 	.word	0x24000138
 80011ec:	40020010 	.word	0x40020010

080011f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_TIM_Base_MspInit+0x48>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d116      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_TIM_Base_MspInit+0x4c>)
 8001214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2019      	movs	r0, #25
 8001226:	f002 fae8 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800122a:	2019      	movs	r0, #25
 800122c:	f002 faff 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40010000 	.word	0x40010000
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b8      	sub	sp, #224	; 0xe0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	22b4      	movs	r2, #180	; 0xb4
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00a fe5b 	bl	800bf1c <memset>
  if(huart->Instance==USART2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_UART_MspInit+0x170>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d14a      	bne.n	8001306 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	4618      	mov	r0, r3
 8001280:	f006 fa58 	bl	8007734 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff fecf 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128e:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001294:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_UART_MspInit+0x174>)
 80012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_UART_MspInit+0x174>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a40      	ldr	r2, [pc, #256]	; (80013b4 <HAL_UART_MspInit+0x174>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <HAL_UART_MspInit+0x174>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012ca:	2360      	movs	r3, #96	; 0x60
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ec:	4619      	mov	r1, r3
 80012ee:	4832      	ldr	r0, [pc, #200]	; (80013b8 <HAL_UART_MspInit+0x178>)
 80012f0:	f005 f8f0 	bl	80064d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2026      	movs	r0, #38	; 0x26
 80012fa:	f002 fa7e 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fe:	2026      	movs	r0, #38	; 0x26
 8001300:	f002 fa95 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001304:	e04f      	b.n	80013a6 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a2c      	ldr	r2, [pc, #176]	; (80013bc <HAL_UART_MspInit+0x17c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d14a      	bne.n	80013a6 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4618      	mov	r0, r3
 8001320:	f006 fa08 	bl	8007734 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800132a:	f7ff fe7f 	bl	800102c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x174>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x174>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x174>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800136a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800136e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_MspInit+0x178>)
 8001392:	f005 f89f 	bl	80064d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2027      	movs	r0, #39	; 0x27
 800139c:	f002 fa2d 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013a0:	2027      	movs	r0, #39	; 0x27
 80013a2:	f002 fa44 	bl	800382e <HAL_NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	37e0      	adds	r7, #224	; 0xe0
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004400 	.word	0x40004400
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020c00 	.word	0x58020c00
 80013bc:	40004800 	.word	0x40004800

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f954 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <DMA1_Stream0_IRQHandler+0x10>)
 800141a:	f003 fd49 	bl	8004eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	24000138 	.word	0x24000138

08001428 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <TIM1_UP_IRQHandler+0x10>)
 800142e:	f008 faf1 	bl	8009a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000220 	.word	0x24000220

0800143c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <USART2_IRQHandler+0x10>)
 8001442:	f008 fff5 	bl	800a430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2400026c 	.word	0x2400026c

08001450 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART3_IRQHandler+0x10>)
 8001456:	f008 ffeb 	bl	800a430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240000a8 	.word	0x240000a8

08001464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001468:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800146c:	f005 f9f3 	bl	8006856 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <ADC3_IRQHandler+0x10>)
 800147a:	f000 ff23 	bl	80022c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	240001b0 	.word	0x240001b0

08001488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <SystemInit+0xd8>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a33      	ldr	r2, [pc, #204]	; (8001560 <SystemInit+0xd8>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <SystemInit+0xdc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	2b06      	cmp	r3, #6
 80014a6:	d807      	bhi.n	80014b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <SystemInit+0xdc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <SystemInit+0xdc>)
 80014b2:	f043 0307 	orr.w	r3, r3, #7
 80014b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemInit+0xe0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <SystemInit+0xe0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014c4:	4b28      	ldr	r3, [pc, #160]	; (8001568 <SystemInit+0xe0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <SystemInit+0xe0>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4926      	ldr	r1, [pc, #152]	; (8001568 <SystemInit+0xe0>)
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <SystemInit+0xe4>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <SystemInit+0xdc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <SystemInit+0xdc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 030f 	bic.w	r3, r3, #15
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <SystemInit+0xdc>)
 80014ec:	f043 0307 	orr.w	r3, r3, #7
 80014f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <SystemInit+0xe0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <SystemInit+0xe0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SystemInit+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <SystemInit+0xe0>)
 8001506:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <SystemInit+0xe8>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <SystemInit+0xe0>)
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <SystemInit+0xec>)
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <SystemInit+0xe0>)
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <SystemInit+0xf0>)
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <SystemInit+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <SystemInit+0xe0>)
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <SystemInit+0xf0>)
 8001520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <SystemInit+0xe0>)
 8001524:	2200      	movs	r2, #0
 8001526:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <SystemInit+0xe0>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <SystemInit+0xf0>)
 800152c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <SystemInit+0xe0>)
 8001530:	2200      	movs	r2, #0
 8001532:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <SystemInit+0xe0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <SystemInit+0xe0>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <SystemInit+0xe0>)
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <SystemInit+0xf4>)
 8001548:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800154c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SystemInit+0xd8>)
 8001550:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001554:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00
 8001564:	52002000 	.word	0x52002000
 8001568:	58024400 	.word	0x58024400
 800156c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001570:	02020200 	.word	0x02020200
 8001574:	01ff0000 	.word	0x01ff0000
 8001578:	01010280 	.word	0x01010280
 800157c:	52004000 	.word	0x52004000

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001584:	f7ff ff80 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f00a fc77 	bl	800bea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f86d 	bl	8000690 <main>
  bx  lr
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015c0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80015c4:	0800c054 	.word	0x0800c054
  ldr r2, =_sbss
 80015c8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80015cc:	24000300 	.word	0x24000300

080015d0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f002 f902 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e0:	f005 fed2 	bl	8007388 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	4913      	ldr	r1, [pc, #76]	; (8001640 <HAL_Init+0x6c>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_Init+0x68>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_Init+0x6c>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_Init+0x70>)
 8001616:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_Init+0x74>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f814 	bl	800164c <HAL_InitTick>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e002      	b.n	8001634 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800162e:	f7ff fd03 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	58024400 	.word	0x58024400
 8001640:	0800bfdc 	.word	0x0800bfdc
 8001644:	24000008 	.word	0x24000008
 8001648:	24000004 	.word	0x24000004

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_InitTick+0x60>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e021      	b.n	80016a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_InitTick+0x64>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f002 f8e7 	bl	800384a <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f002 f8b1 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x68>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24000010 	.word	0x24000010
 80016b0:	24000004 	.word	0x24000004
 80016b4:	2400000c 	.word	0x2400000c

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	24000010 	.word	0x24000010
 80016dc:	240002fc 	.word	0x240002fc

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	240002fc 	.word	0x240002fc

080016f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	58000400 	.word	0x58000400

08001724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3360      	adds	r3, #96	; 0x60
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <LL_ADC_SetOffset+0x60>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d10b      	bne.n	80017c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4313      	orrs	r3, r2
 80017be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017c6:	e00b      	b.n	80017e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	430b      	orrs	r3, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	58026000 	.word	0x58026000

080017f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3360      	adds	r3, #96	; 0x60
 80017fe:	461a      	mov	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	431a      	orrs	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	611a      	str	r2, [r3, #16]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a0c      	ldr	r2, [pc, #48]	; (8001890 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d00e      	beq.n	8001882 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3360      	adds	r3, #96	; 0x60
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]
  }
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	58026000 	.word	0x58026000

08001894 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d10e      	bne.n	80018c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3360      	adds	r3, #96	; 0x60
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58026000 	.word	0x58026000

080018d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <LL_ADC_SetOffsetSign+0x40>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d10e      	bne.n	800190a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3360      	adds	r3, #96	; 0x60
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	58026000 	.word	0x58026000

0800191c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <LL_ADC_SetOffsetState+0x50>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d108      	bne.n	8001950 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800194e:	e007      	b.n	8001960 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	431a      	orrs	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	58026000 	.word	0x58026000

08001970 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001996:	b480      	push	{r7}
 8001998:	b087      	sub	sp, #28
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3330      	adds	r3, #48	; 0x30
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	4413      	add	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	211f      	movs	r1, #31
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0e9b      	lsrs	r3, r3, #26
 80019ce:	f003 011f 	and.w	r1, r3, #31
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f023 0203 	bic.w	r2, r3, #3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d107      	bne.n	8001a56 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60da      	str	r2, [r3, #12]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	58026000 	.word	0x58026000

08001a68 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3314      	adds	r3, #20
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0e5b      	lsrs	r3, r3, #25
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0d1b      	lsrs	r3, r3, #20
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	2107      	movs	r1, #7
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0d1b      	lsrs	r3, r3, #20
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ad8:	bf00      	nop
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a1a      	ldr	r2, [pc, #104]	; (8001b5c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d115      	bne.n	8001b24 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0318 	and.w	r3, r3, #24
 8001b0e:	4914      	ldr	r1, [pc, #80]	; (8001b60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	400b      	ands	r3, r1
 8001b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b22:	e014      	b.n	8001b4e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0318 	and.w	r3, r3, #24
 8001b3a:	4909      	ldr	r1, [pc, #36]	; (8001b60 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001b3c:	40d9      	lsrs	r1, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	400b      	ands	r3, r1
 8001b42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	58026000 	.word	0x58026000
 8001b60:	000fffff 	.word	0x000fffff

08001b64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 031f 	and.w	r3, r3, #31
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6093      	str	r3, [r2, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	5fffffc0 	.word	0x5fffffc0

08001bc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd4:	d101      	bne.n	8001bda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <LL_ADC_EnableInternalRegulator+0x24>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	6fffffc0 	.word	0x6fffffc0

08001c10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <LL_ADC_Enable+0x24>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	7fffffc0 	.word	0x7fffffc0

08001c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_IsEnabled+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_IsEnabled+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <LL_ADC_REG_StartConversion+0x24>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	f043 0204 	orr.w	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	7fffffc0 	.word	0x7fffffc0

08001cb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d101      	bne.n	8001cc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d101      	bne.n	8001cee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1ee      	b.n	80020f4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff f9a1 	bl	800106c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff3f 	bl	8001bc0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff25 	bl	8001b9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff5a 	bl	8001c10 <LL_ADC_IsInternalRegulatorEnabled>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d114      	bne.n	8001d8c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff3e 	bl	8001be8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d6c:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_ADC_Init+0x2ac>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	4a8e      	ldr	r2, [pc, #568]	; (8001fac <HAL_ADC_Init+0x2b0>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff3d 	bl	8001c10 <LL_ADC_IsInternalRegulatorEnabled>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10d      	bne.n	8001db8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dac:	f043 0201 	orr.w	r2, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff77 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8001dc2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 8188 	bne.w	80020e2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 8184 	bne.w	80020e2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001de2:	f043 0202 	orr.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff36 	bl	8001c60 <LL_ADC_IsEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d136      	bne.n	8001e68 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6c      	ldr	r2, [pc, #432]	; (8001fb0 <HAL_ADC_Init+0x2b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_Init+0x112>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_ADC_Init+0x2b8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10e      	bne.n	8001e2c <HAL_ADC_Init+0x130>
 8001e0e:	4868      	ldr	r0, [pc, #416]	; (8001fb0 <HAL_ADC_Init+0x2b4>)
 8001e10:	f7ff ff26 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e14:	4604      	mov	r4, r0
 8001e16:	4867      	ldr	r0, [pc, #412]	; (8001fb4 <HAL_ADC_Init+0x2b8>)
 8001e18:	f7ff ff22 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4323      	orrs	r3, r4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf0c      	ite	eq
 8001e24:	2301      	moveq	r3, #1
 8001e26:	2300      	movne	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e008      	b.n	8001e3e <HAL_ADC_Init+0x142>
 8001e2c:	4862      	ldr	r0, [pc, #392]	; (8001fb8 <HAL_ADC_Init+0x2bc>)
 8001e2e:	f7ff ff17 	bl	8001c60 <LL_ADC_IsEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_ADC_Init+0x2b4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x15a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_ADC_Init+0x2b8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x15e>
 8001e56:	4a59      	ldr	r2, [pc, #356]	; (8001fbc <HAL_ADC_Init+0x2c0>)
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_Init+0x160>
 8001e5a:	4a59      	ldr	r2, [pc, #356]	; (8001fc0 <HAL_ADC_Init+0x2c4>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fc5e 	bl	8001724 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_ADC_Init+0x2bc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d129      	bne.n	8001ec6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7e5b      	ldrb	r3, [r3, #25]
 8001e76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e7c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001e82:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d013      	beq.n	8001eb4 <HAL_ADC_Init+0x1b8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d00d      	beq.n	8001eb0 <HAL_ADC_Init+0x1b4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b1c      	cmp	r3, #28
 8001e9a:	d007      	beq.n	8001eac <HAL_ADC_Init+0x1b0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b18      	cmp	r3, #24
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_Init+0x1ac>
 8001ea4:	2318      	movs	r3, #24
 8001ea6:	e006      	b.n	8001eb6 <HAL_ADC_Init+0x1ba>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e004      	b.n	8001eb6 <HAL_ADC_Init+0x1ba>
 8001eac:	2310      	movs	r3, #16
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_Init+0x1ba>
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Init+0x1ba>
 8001eb4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001eb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ebe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	e00e      	b.n	8001ee4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7e5b      	ldrb	r3, [r3, #25]
 8001eca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ed6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_ADC_Init+0x2bc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d115      	bne.n	8001f4e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_ADC_Init+0x2c8>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	430b      	orrs	r3, r1
 8001f34:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	e009      	b.n	8001f62 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_ADC_Init+0x2cc>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	69b9      	ldr	r1, [r7, #24]
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fea2 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8001f6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff feaf 	bl	8001cd6 <LL_ADC_INJ_IsConversionOngoing>
 8001f78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 808e 	bne.w	800209e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 808a 	bne.w	800209e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_ADC_Init+0x2bc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d11b      	bne.n	8001fcc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fa0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	e018      	b.n	8001fda <HAL_ADC_Init+0x2de>
 8001fa8:	24000004 	.word	0x24000004
 8001fac:	053e2d63 	.word	0x053e2d63
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	40022100 	.word	0x40022100
 8001fb8:	58026000 	.word	0x58026000
 8001fbc:	40022300 	.word	0x40022300
 8001fc0:	58026300 	.word	0x58026300
 8001fc4:	fff04007 	.word	0xfff04007
 8001fc8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
 8001fd0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_ADC_Init+0x400>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	69b9      	ldr	r1, [r7, #24]
 8001fea:	430b      	orrs	r3, r1
 8001fec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d137      	bne.n	8002068 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <HAL_ADC_Init+0x404>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d116      	bne.n	8002036 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_ADC_Init+0x408>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002026:	430a      	orrs	r2, r1
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	e020      	b.n	8002078 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <HAL_ADC_Init+0x40c>)
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002044:	3a01      	subs	r2, #1
 8002046:	0411      	lsls	r1, r2, #16
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002058:	430a      	orrs	r2, r1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	611a      	str	r2, [r3, #16]
 8002066:	e007      	b.n	8002078 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_ADC_Init+0x404>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d002      	beq.n	800209e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f001 f9b5 	bl	8003408 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10c      	bne.n	80020c0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	f023 010f 	bic.w	r1, r3, #15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
 80020be:	e007      	b.n	80020d0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020f 	bic.w	r2, r2, #15
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	f023 0303 	bic.w	r3, r3, #3
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	661a      	str	r2, [r3, #96]	; 0x60
 80020e0:	e007      	b.n	80020f2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3724      	adds	r7, #36	; 0x24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	ffffbffc 	.word	0xffffbffc
 8002100:	58026000 	.word	0x58026000
 8002104:	fc00f81f 	.word	0xfc00f81f
 8002108:	fc00f81e 	.word	0xfc00f81e

0800210c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_ADC_Start_DMA+0x194>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_ADC_Start_DMA+0x20>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_ADC_Start_DMA+0x198>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_ADC_Start_DMA+0x24>
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <HAL_ADC_Start_DMA+0x19c>)
 800212e:	e000      	b.n	8002132 <HAL_ADC_Start_DMA+0x26>
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_ADC_Start_DMA+0x1a0>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fd16 	bl	8001b64 <LL_ADC_GetMultimode>
 8002138:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fdb6 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80a2 	bne.w	8002290 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_ADC_Start_DMA+0x4e>
 8002156:	2302      	movs	r3, #2
 8002158:	e09d      	b.n	8002296 <HAL_ADC_Start_DMA+0x18a>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d003      	beq.n	8002176 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b09      	cmp	r3, #9
 8002172:	f040 8086 	bne.w	8002282 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f001 f828 	bl	80031cc <ADC_Enable>
 800217c:	4603      	mov	r3, r0
 800217e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d178      	bne.n	8002278 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_ADC_Start_DMA+0x1a4>)
 800218c:	4013      	ands	r3, r2
 800218e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a42      	ldr	r2, [pc, #264]	; (80022a4 <HAL_ADC_Start_DMA+0x198>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d002      	beq.n	80021a6 <HAL_ADC_Start_DMA+0x9a>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_Start_DMA+0x9c>
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_ADC_Start_DMA+0x194>)
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d002      	beq.n	80021b6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d2:	f023 0206 	bic.w	r2, r3, #6
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	665a      	str	r2, [r3, #100]	; 0x64
 80021da:	e002      	b.n	80021e2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <HAL_ADC_Start_DMA+0x1a8>)
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <HAL_ADC_Start_DMA+0x1ac>)
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_ADC_Start_DMA+0x1b0>)
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	221c      	movs	r2, #28
 8002200:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0210 	orr.w	r2, r2, #16
 8002218:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <HAL_ADC_Start_DMA+0x1b4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10f      	bne.n	8002244 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7ff fbfe 	bl	8001a34 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fbe9 	bl	8001a14 <LL_ADC_EnableDMAReq>
 8002242:	e007      	b.n	8002254 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7ff fbcd 	bl	80019ee <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3340      	adds	r3, #64	; 0x40
 800225e:	4619      	mov	r1, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f001 fe58 	bl	8003f18 <HAL_DMA_Start_IT>
 8002268:	4603      	mov	r3, r0
 800226a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fd09 	bl	8001c88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002276:	e00d      	b.n	8002294 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8002280:	e008      	b.n	8002294 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800228e:	e001      	b.n	8002294 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002290:	2302      	movs	r3, #2
 8002292:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002294:	7dfb      	ldrb	r3, [r7, #23]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40022100 	.word	0x40022100
 80022a8:	40022300 	.word	0x40022300
 80022ac:	58026300 	.word	0x58026300
 80022b0:	fffff0fe 	.word	0xfffff0fe
 80022b4:	080032e1 	.word	0x080032e1
 80022b8:	080033b9 	.word	0x080033b9
 80022bc:	080033d5 	.word	0x080033d5
 80022c0:	58026000 	.word	0x58026000

080022c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a87      	ldr	r2, [pc, #540]	; (8002504 <HAL_ADC_IRQHandler+0x240>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x30>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a86      	ldr	r2, [pc, #536]	; (8002508 <HAL_ADC_IRQHandler+0x244>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_IRQHandler+0x34>
 80022f4:	4b85      	ldr	r3, [pc, #532]	; (800250c <HAL_ADC_IRQHandler+0x248>)
 80022f6:	e000      	b.n	80022fa <HAL_ADC_IRQHandler+0x36>
 80022f8:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_ADC_IRQHandler+0x24c>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fc32 	bl	8001b64 <LL_ADC_GetMultimode>
 8002300:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d017      	beq.n	800233c <HAL_ADC_IRQHandler+0x78>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 f97e 	bl	8003630 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_ADC_IRQHandler+0x8c>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8083 	beq.w	8002462 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d07d      	beq.n	8002462 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	d105      	bne.n	800237e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff faf4 	bl	8001970 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d062      	beq.n	8002454 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <HAL_ADC_IRQHandler+0x244>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_IRQHandler+0xda>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	e000      	b.n	80023a0 <HAL_ADC_IRQHandler+0xdc>
 800239e:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_ADC_IRQHandler+0x240>)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	d104      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	e00c      	b.n	80023de <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	; (8002508 <HAL_ADC_IRQHandler+0x244>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d002      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x110>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_IRQHandler+0x112>
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_ADC_IRQHandler+0x240>)
 80023d6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d135      	bne.n	8002454 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d12e      	bne.n	8002454 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fc58 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11a      	bne.n	800243c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020c 	bic.w	r2, r2, #12
 8002414:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d112      	bne.n	8002454 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	661a      	str	r2, [r3, #96]	; 0x60
 800243a:	e00b      	b.n	8002454 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	f043 0210 	orr.w	r2, r3, #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fe f8ef 	bl	8000638 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_ADC_IRQHandler+0x1b2>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a0 	beq.w	80025c2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 809a 	beq.w	80025c2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fadc 	bl	8001a68 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa5a 	bl	8001970 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024bc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_ADC_IRQHandler+0x244>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d002      	beq.n	80024ce <HAL_ADC_IRQHandler+0x20a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e000      	b.n	80024d0 <HAL_ADC_IRQHandler+0x20c>
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_ADC_IRQHandler+0x240>)
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d008      	beq.n	80024ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d002      	beq.n	80024ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b07      	cmp	r3, #7
 80024e8:	d104      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	e014      	b.n	800251e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_ADC_IRQHandler+0x244>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00a      	beq.n	8002514 <HAL_ADC_IRQHandler+0x250>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e008      	b.n	8002516 <HAL_ADC_IRQHandler+0x252>
 8002504:	40022000 	.word	0x40022000
 8002508:	40022100 	.word	0x40022100
 800250c:	40022300 	.word	0x40022300
 8002510:	58026300 	.word	0x58026300
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_ADC_IRQHandler+0x464>)
 8002516:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800252a:	2b00      	cmp	r3, #0
 800252c:	d142      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03f      	beq.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800253a:	2b00      	cmp	r3, #0
 800253c:	d13a      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d133      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d12e      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fbbb 	bl	8001cd6 <LL_ADC_INJ_IsConversionOngoing>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11a      	bne.n	800259c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002574:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d112      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	661a      	str	r2, [r3, #96]	; 0x60
 800259a:	e00b      	b.n	80025b4 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f813 	bl	80035e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2260      	movs	r2, #96	; 0x60
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d011      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x32c>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8b2 	bl	800274c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <HAL_ADC_IRQHandler+0x35c>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fff9 	bl	8003608 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002626:	2b00      	cmp	r3, #0
 8002628:	d012      	beq.n	8002650 <HAL_ADC_IRQHandler+0x38c>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 ffeb 	bl	800361c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d043      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x41e>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03e      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	e021      	b.n	80026b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <HAL_ADC_IRQHandler+0x464>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_ADC_IRQHandler+0x3c8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_ADC_IRQHandler+0x468>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <HAL_ADC_IRQHandler+0x3cc>
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_ADC_IRQHandler+0x46c>)
 800268e:	e000      	b.n	8002692 <HAL_ADC_IRQHandler+0x3ce>
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_ADC_IRQHandler+0x470>)
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fa74 	bl	8001b80 <LL_ADC_GetMultiDMATransfer>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10e      	bne.n	80026da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f843 	bl	8002760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2210      	movs	r2, #16
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_ADC_IRQHandler+0x45a>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002716:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 ff6b 	bl	80035f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40022100 	.word	0x40022100
 8002730:	40022300 	.word	0x40022300
 8002734:	58026300 	.word	0x58026300

08002738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b0b9      	sub	sp, #228	; 0xe4
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800278e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4ab3      	ldr	r2, [pc, #716]	; (8002a64 <HAL_ADC_ConfigChannel+0x2f0>)
 8002796:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x34>
 80027a2:	2302      	movs	r3, #2
 80027a4:	f000 bcfa 	b.w	800319c <HAL_ADC_ConfigChannel+0xa28>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fa7b 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f040 84de 	bne.w	800317e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4aa8      	ldr	r2, [pc, #672]	; (8002a68 <HAL_ADC_ConfigChannel+0x2f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d033      	beq.n	8002834 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d108      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x76>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2201      	movs	r2, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	e01d      	b.n	8002826 <HAL_ADC_ConfigChannel+0xb2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e004      	b.n	800281c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2201      	movs	r2, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	69d1      	ldr	r1, [r2, #28]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff f8a8 	bl	8001996 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fa30 	bl	8001cb0 <LL_ADC_REG_IsConversionOngoing>
 8002850:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fa3c 	bl	8001cd6 <LL_ADC_INJ_IsConversionOngoing>
 800285e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8270 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800286c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 826b 	bne.w	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	461a      	mov	r2, r3
 8002884:	f7ff f903 	bl	8001a8e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a76      	ldr	r2, [pc, #472]	; (8002a68 <HAL_ADC_ConfigChannel+0x2f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10d      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	08db      	lsrs	r3, r3, #3
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028ac:	e032      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_ADC_ConfigChannel+0x2f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80028b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x160>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	e01d      	b.n	8002910 <HAL_ADC_ConfigChannel+0x19c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x186>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	e00a      	b.n	8002910 <HAL_ADC_ConfigChannel+0x19c>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d048      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6919      	ldr	r1, [r3, #16]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800292c:	f7fe ff2e 	bl	800178c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4c      	ldr	r2, [pc, #304]	; (8002a68 <HAL_ADC_ConfigChannel+0x2f4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d119      	bne.n	800296e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	461a      	mov	r2, r3
 8002948:	f7fe ffc6 	bl	80018d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6919      	ldr	r1, [r3, #16]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x1f0>
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	e000      	b.n	8002966 <HAL_ADC_ConfigChannel+0x1f2>
 8002964:	2300      	movs	r3, #0
 8002966:	461a      	mov	r2, r3
 8002968:	f7fe ff94 	bl	8001894 <LL_ADC_SetOffsetSaturation>
 800296c:	e1ee      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6919      	ldr	r1, [r3, #16]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800297c:	2b01      	cmp	r3, #1
 800297e:	d102      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x212>
 8002980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002984:	e000      	b.n	8002988 <HAL_ADC_ConfigChannel+0x214>
 8002986:	2300      	movs	r3, #0
 8002988:	461a      	mov	r2, r3
 800298a:	f7fe ff61 	bl	8001850 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6919      	ldr	r1, [r3, #16]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7e1b      	ldrb	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x230>
 800299e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x232>
 80029a4:	2300      	movs	r3, #0
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7fe ff38 	bl	800181c <LL_ADC_SetDataRightShift>
 80029ac:	e1ce      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2d      	ldr	r2, [pc, #180]	; (8002a68 <HAL_ADC_ConfigChannel+0x2f4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	f040 8181 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe ff15 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x272>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe ff0a 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	e01e      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x2b0>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe feff 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002a04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e004      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002a18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x2c8>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	e01e      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x306>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e00a      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x306>
 8002a64:	47ff0000 	.word	0x47ff0000
 8002a68:	58026000 	.word	0x58026000
 8002a6c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002a70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe ff48 	bl	800191c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe feac 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x344>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fea1 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 021f 	and.w	r2, r3, #31
 8002ab6:	e01e      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x382>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fe96 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e004      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x39a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	e018      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3cc>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e004      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fee5 	bl	800191c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fe49 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x40a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fe3e 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x448>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fe33 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e004      	b.n	8002bba <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x460>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	e014      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x48a>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e004      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fe86 	bl	800191c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2103      	movs	r1, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fdea 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x4c8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fddf 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	e017      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x4f8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2103      	movs	r1, #3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fdd4 	bl	80017f0 <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x510>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	e011      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x534>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c94:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e003      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d14f      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fe31 	bl	800191c <LL_ADC_SetOffsetState>
 8002cba:	e047      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d02:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d26:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	069b      	lsls	r3, r3, #26
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d107      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe ff85 	bl	8001c60 <LL_ADC_IsEnabled>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 8219 	bne.w	8003190 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7fe feba 	bl	8001ae4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4aa1      	ldr	r2, [pc, #644]	; (8002ffc <HAL_ADC_ConfigChannel+0x888>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f040 812e 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x630>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e019      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x664>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	bf94      	ite	ls
 8002dd2:	2301      	movls	r3, #1
 8002dd4:	2300      	movhi	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d079      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x684>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	069b      	lsls	r3, r3, #26
 8002df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df6:	e015      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x6b0>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e08:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	069b      	lsls	r3, r3, #26
 8002e20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x6d0>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	e017      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x700>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2101      	movs	r1, #1
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x726>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	051b      	lsls	r3, r3, #20
 8002e98:	e018      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x758>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	e07e      	b.n	8002fce <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x778>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	069b      	lsls	r3, r3, #26
 8002ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eea:	e015      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x7a4>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	069b      	lsls	r3, r3, #26
 8002f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x7c4>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2101      	movs	r1, #1
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	e017      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x7f4>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	61bb      	str	r3, [r7, #24]
  return result;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	ea42 0103 	orr.w	r1, r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x820>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	3b1e      	subs	r3, #30
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f92:	e01b      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x858>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	60fb      	str	r3, [r7, #12]
  return result;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e003      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 021f 	and.w	r2, r3, #31
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b1e      	subs	r3, #30
 8002fc6:	051b      	lsls	r3, r3, #20
 8002fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	6892      	ldr	r2, [r2, #8]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7fe fd5b 	bl	8001a8e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f280 80d7 	bge.w	8003190 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a06      	ldr	r2, [pc, #24]	; (8003000 <HAL_ADC_ConfigChannel+0x88c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_ADC_ConfigChannel+0x882>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <HAL_ADC_ConfigChannel+0x890>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d10a      	bne.n	800300c <HAL_ADC_ConfigChannel+0x898>
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <HAL_ADC_ConfigChannel+0x894>)
 8002ff8:	e009      	b.n	800300e <HAL_ADC_ConfigChannel+0x89a>
 8002ffa:	bf00      	nop
 8002ffc:	47ff0000 	.word	0x47ff0000
 8003000:	40022000 	.word	0x40022000
 8003004:	40022100 	.word	0x40022100
 8003008:	40022300 	.word	0x40022300
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_ADC_ConfigChannel+0xa30>)
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fbae 	bl	8001770 <LL_ADC_GetCommonPathInternalCh>
 8003014:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a62      	ldr	r2, [pc, #392]	; (80031a8 <HAL_ADC_ConfigChannel+0xa34>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_ADC_ConfigChannel+0x8b8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_ADC_ConfigChannel+0xa38>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10e      	bne.n	800304a <HAL_ADC_ConfigChannel+0x8d6>
 800302c:	485e      	ldr	r0, [pc, #376]	; (80031a8 <HAL_ADC_ConfigChannel+0xa34>)
 800302e:	f7fe fe17 	bl	8001c60 <LL_ADC_IsEnabled>
 8003032:	4604      	mov	r4, r0
 8003034:	485d      	ldr	r0, [pc, #372]	; (80031ac <HAL_ADC_ConfigChannel+0xa38>)
 8003036:	f7fe fe13 	bl	8001c60 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	4323      	orrs	r3, r4
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e008      	b.n	800305c <HAL_ADC_ConfigChannel+0x8e8>
 800304a:	4859      	ldr	r0, [pc, #356]	; (80031b0 <HAL_ADC_ConfigChannel+0xa3c>)
 800304c:	f7fe fe08 	bl	8001c60 <LL_ADC_IsEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8084 	beq.w	800316a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a53      	ldr	r2, [pc, #332]	; (80031b4 <HAL_ADC_ConfigChannel+0xa40>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d132      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x95e>
 800306c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d12c      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_ADC_ConfigChannel+0xa3c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	f040 8086 	bne.w	8003190 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <HAL_ADC_ConfigChannel+0xa34>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x924>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a46      	ldr	r2, [pc, #280]	; (80031ac <HAL_ADC_ConfigChannel+0xa38>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x928>
 8003098:	4a47      	ldr	r2, [pc, #284]	; (80031b8 <HAL_ADC_ConfigChannel+0xa44>)
 800309a:	e000      	b.n	800309e <HAL_ADC_ConfigChannel+0x92a>
 800309c:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <HAL_ADC_ConfigChannel+0xa30>)
 800309e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fb4e 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ae:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_ADC_ConfigChannel+0xa48>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	4a42      	ldr	r2, [pc, #264]	; (80031c0 <HAL_ADC_ConfigChannel+0xa4c>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	099b      	lsrs	r3, r3, #6
 80030bc:	3301      	adds	r3, #1
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030c2:	e002      	b.n	80030ca <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f9      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d0:	e05e      	b.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <HAL_ADC_ConfigChannel+0xa50>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d120      	bne.n	800311e <HAL_ADC_ConfigChannel+0x9aa>
 80030dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d11a      	bne.n	800311e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <HAL_ADC_ConfigChannel+0xa3c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d14e      	bne.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <HAL_ADC_ConfigChannel+0xa34>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x992>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_ADC_ConfigChannel+0xa38>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x996>
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <HAL_ADC_ConfigChannel+0xa44>)
 8003108:	e000      	b.n	800310c <HAL_ADC_ConfigChannel+0x998>
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_ADC_ConfigChannel+0xa30>)
 800310c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f7fe fb17 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800311c:	e038      	b.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <HAL_ADC_ConfigChannel+0xa54>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d133      	bne.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
 8003128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800312c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d12d      	bne.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_ADC_ConfigChannel+0xa3c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d128      	bne.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_ADC_ConfigChannel+0xa34>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x9de>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_ADC_ConfigChannel+0xa38>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x9e2>
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_ADC_ConfigChannel+0xa44>)
 8003154:	e000      	b.n	8003158 <HAL_ADC_ConfigChannel+0x9e4>
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_ADC_ConfigChannel+0xa30>)
 8003158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800315c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7fe faf1 	bl	800174a <LL_ADC_SetCommonPathInternalCh>
 8003168:	e012      	b.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800317c:	e008      	b.n	8003190 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003198:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800319c:	4618      	mov	r0, r3
 800319e:	37e4      	adds	r7, #228	; 0xe4
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	58026300 	.word	0x58026300
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40022100 	.word	0x40022100
 80031b0:	58026000 	.word	0x58026000
 80031b4:	c7520000 	.word	0xc7520000
 80031b8:	40022300 	.word	0x40022300
 80031bc:	24000004 	.word	0x24000004
 80031c0:	053e2d63 	.word	0x053e2d63
 80031c4:	c3210000 	.word	0xc3210000
 80031c8:	cb840000 	.word	0xcb840000

080031cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fd41 	bl	8001c60 <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d16e      	bne.n	80032c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <ADC_Enable+0x100>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e05a      	b.n	80032c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fd10 	bl	8001c38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003218:	f7fe fa62 	bl	80016e0 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <ADC_Enable+0x104>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <ADC_Enable+0x66>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <ADC_Enable+0x108>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <ADC_Enable+0x6a>
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <ADC_Enable+0x10c>)
 8003234:	e000      	b.n	8003238 <ADC_Enable+0x6c>
 8003236:	4b29      	ldr	r3, [pc, #164]	; (80032dc <ADC_Enable+0x110>)
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fc93 	bl	8001b64 <LL_ADC_GetMultimode>
 800323e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <ADC_Enable+0x108>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <ADC_Enable+0x84>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	e000      	b.n	8003252 <ADC_Enable+0x86>
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <ADC_Enable+0x104>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4293      	cmp	r3, r2
 8003258:	d02c      	beq.n	80032b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d130      	bne.n	80032c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003260:	e028      	b.n	80032b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fcfa 	bl	8001c60 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fcde 	bl	8001c38 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800327c:	f7fe fa30 	bl	80016e0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d914      	bls.n	80032b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d00d      	beq.n	80032b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	f043 0210 	orr.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1cf      	bne.n	8003262 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	8000003f 	.word	0x8000003f
 80032d0:	40022000 	.word	0x40022000
 80032d4:	40022100 	.word	0x40022100
 80032d8:	40022300 	.word	0x40022300
 80032dc:	58026300 	.word	0x58026300

080032e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d14b      	bne.n	8003392 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d021      	beq.n	8003358 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fb29 	bl	8001970 <LL_ADC_REG_IsTriggerSourceSWStart>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d032      	beq.n	800338a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d12b      	bne.n	800338a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11f      	bne.n	800338a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	661a      	str	r2, [r3, #96]	; 0x60
 8003356:	e018      	b.n	800338a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d111      	bne.n	800338a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7fd f954 	bl	8000638 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003390:	e00e      	b.n	80033b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff f9de 	bl	8002760 <HAL_ADC_ErrorCallback>
}
 80033a4:	e004      	b.n	80033b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff f9b6 	bl	8002738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff f9b0 	bl	8002760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6b      	ldr	r2, [pc, #428]	; (80035c4 <ADC_ConfigureBoostMode+0x1bc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <ADC_ConfigureBoostMode+0x1c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <ADC_ConfigureBoostMode+0x1c0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d109      	bne.n	8003438 <ADC_ConfigureBoostMode+0x30>
 8003424:	4b69      	ldr	r3, [pc, #420]	; (80035cc <ADC_ConfigureBoostMode+0x1c4>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e008      	b.n	800344a <ADC_ConfigureBoostMode+0x42>
 8003438:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <ADC_ConfigureBoostMode+0x1c8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01c      	beq.n	8003488 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800344e:	f004 f915 	bl	800767c <HAL_RCC_GetHCLKFreq>
 8003452:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800345c:	d010      	beq.n	8003480 <ADC_ConfigureBoostMode+0x78>
 800345e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003462:	d871      	bhi.n	8003548 <ADC_ConfigureBoostMode+0x140>
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d002      	beq.n	8003470 <ADC_ConfigureBoostMode+0x68>
 800346a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346e:	d16b      	bne.n	8003548 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e066      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e062      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003488:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800348c:	f005 f84c 	bl	8008528 <HAL_RCCEx_GetPeriphCLKFreq>
 8003490:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800349a:	d051      	beq.n	8003540 <ADC_ConfigureBoostMode+0x138>
 800349c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034a0:	d854      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034a6:	d047      	beq.n	8003538 <ADC_ConfigureBoostMode+0x130>
 80034a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034ac:	d84e      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034b2:	d03d      	beq.n	8003530 <ADC_ConfigureBoostMode+0x128>
 80034b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034b8:	d848      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034be:	d033      	beq.n	8003528 <ADC_ConfigureBoostMode+0x120>
 80034c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c4:	d842      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034ca:	d029      	beq.n	8003520 <ADC_ConfigureBoostMode+0x118>
 80034cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034d0:	d83c      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034d6:	d01a      	beq.n	800350e <ADC_ConfigureBoostMode+0x106>
 80034d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034dc:	d836      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034e2:	d014      	beq.n	800350e <ADC_ConfigureBoostMode+0x106>
 80034e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80034e8:	d830      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ee:	d00e      	beq.n	800350e <ADC_ConfigureBoostMode+0x106>
 80034f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f4:	d82a      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 80034f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034fa:	d008      	beq.n	800350e <ADC_ConfigureBoostMode+0x106>
 80034fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003500:	d824      	bhi.n	800354c <ADC_ConfigureBoostMode+0x144>
 8003502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003506:	d002      	beq.n	800350e <ADC_ConfigureBoostMode+0x106>
 8003508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800350c:	d11e      	bne.n	800354c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	0c9b      	lsrs	r3, r3, #18
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	60fb      	str	r3, [r7, #12]
        break;
 800351e:	e016      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
        break;
 8003526:	e012      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	60fb      	str	r3, [r7, #12]
        break;
 800352e:	e00e      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	60fb      	str	r3, [r7, #12]
        break;
 8003536:	e00a      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	09db      	lsrs	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
        break;
 800353e:	e006      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
        break;
 8003546:	e002      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
        break;
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800354c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <ADC_ConfigureBoostMode+0x1cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d808      	bhi.n	800356e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800356a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800356c:	e025      	b.n	80035ba <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <ADC_ConfigureBoostMode+0x1d0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d80a      	bhi.n	800358c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003588:	609a      	str	r2, [r3, #8]
}
 800358a:	e016      	b.n	80035ba <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <ADC_ConfigureBoostMode+0x1d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d80a      	bhi.n	80035aa <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	e007      	b.n	80035ba <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035b8:	609a      	str	r2, [r3, #8]
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022100 	.word	0x40022100
 80035cc:	40022300 	.word	0x40022300
 80035d0:	58026300 	.word	0x58026300
 80035d4:	005f5e10 	.word	0x005f5e10
 80035d8:	00bebc20 	.word	0x00bebc20
 80035dc:	017d7840 	.word	0x017d7840

080035e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <__NVIC_SetPriorityGrouping>:
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <__NVIC_SetPriorityGrouping+0x40>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <__NVIC_SetPriorityGrouping+0x44>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <__NVIC_SetPriorityGrouping+0x40>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00
 8003688:	05fa0000 	.word	0x05fa0000

0800368c <__NVIC_GetPriorityGrouping>:
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 0307 	and.w	r3, r3, #7
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_EnableIRQ>:
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	db0b      	blt.n	80036d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4907      	ldr	r1, [pc, #28]	; (80036e0 <__NVIC_EnableIRQ+0x38>)
 80036c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	; 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f7ff ff8e 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff29 	bl	8003644 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003808:	f7ff ff40 	bl	800368c <__NVIC_GetPriorityGrouping>
 800380c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f7ff ff90 	bl	8003738 <NVIC_EncodePriority>
 8003818:	4602      	mov	r2, r0
 800381a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff5f 	bl	80036e4 <__NVIC_SetPriority>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff33 	bl	80036a8 <__NVIC_EnableIRQ>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffa4 	bl	80037a0 <SysTick_Config>
 8003858:	4603      	mov	r3, r0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800386c:	f7fd ff38 	bl	80016e0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e314      	b.n	8003ea6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_DMA_Init+0x1b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d04a      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_DMA_Init+0x1bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d045      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_DMA_Init+0x1c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d040      	beq.n	800391c <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a62      	ldr	r2, [pc, #392]	; (8003a28 <HAL_DMA_Init+0x1c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d03b      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_DMA_Init+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d036      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5f      	ldr	r2, [pc, #380]	; (8003a30 <HAL_DMA_Init+0x1cc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d031      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_DMA_Init+0x1d0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	; (8003a38 <HAL_DMA_Init+0x1d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d027      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5a      	ldr	r2, [pc, #360]	; (8003a3c <HAL_DMA_Init+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d022      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a59      	ldr	r2, [pc, #356]	; (8003a40 <HAL_DMA_Init+0x1dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d01d      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_DMA_Init+0x1e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a56      	ldr	r2, [pc, #344]	; (8003a48 <HAL_DMA_Init+0x1e4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a54      	ldr	r2, [pc, #336]	; (8003a4c <HAL_DMA_Init+0x1e8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_DMA_Init+0xb8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a53      	ldr	r2, [pc, #332]	; (8003a50 <HAL_DMA_Init+0x1ec>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_DMA_Init+0x1f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_DMA_Init+0xb8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a50      	ldr	r2, [pc, #320]	; (8003a58 <HAL_DMA_Init+0x1f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Init+0xbc>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_DMA_Init+0xbe>
 8003920:	2300      	movs	r3, #0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 813c 	beq.w	8003ba0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a37      	ldr	r2, [pc, #220]	; (8003a1c <HAL_DMA_Init+0x1b8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d04a      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a36      	ldr	r2, [pc, #216]	; (8003a20 <HAL_DMA_Init+0x1bc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d045      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_DMA_Init+0x1c0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d040      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <HAL_DMA_Init+0x1c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d03b      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <HAL_DMA_Init+0x1c8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d036      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a30      	ldr	r2, [pc, #192]	; (8003a30 <HAL_DMA_Init+0x1cc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d031      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <HAL_DMA_Init+0x1d0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02c      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <HAL_DMA_Init+0x1d4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d027      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2b      	ldr	r2, [pc, #172]	; (8003a3c <HAL_DMA_Init+0x1d8>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d022      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <HAL_DMA_Init+0x1dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01d      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_DMA_Init+0x1e0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d018      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_DMA_Init+0x1e4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <HAL_DMA_Init+0x1e8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_DMA_Init+0x1ec>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a22      	ldr	r2, [pc, #136]	; (8003a54 <HAL_DMA_Init+0x1f0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_DMA_Init+0x174>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <HAL_DMA_Init+0x1f4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <HAL_DMA_Init+0x186>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <HAL_DMA_Init+0x196>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039fa:	e02f      	b.n	8003a5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039fc:	f7fd fe70 	bl	80016e0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	d928      	bls.n	8003a5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2203      	movs	r2, #3
 8003a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e244      	b.n	8003ea6 <HAL_DMA_Init+0x642>
 8003a1c:	40020010 	.word	0x40020010
 8003a20:	40020028 	.word	0x40020028
 8003a24:	40020040 	.word	0x40020040
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	40020070 	.word	0x40020070
 8003a30:	40020088 	.word	0x40020088
 8003a34:	400200a0 	.word	0x400200a0
 8003a38:	400200b8 	.word	0x400200b8
 8003a3c:	40020410 	.word	0x40020410
 8003a40:	40020428 	.word	0x40020428
 8003a44:	40020440 	.word	0x40020440
 8003a48:	40020458 	.word	0x40020458
 8003a4c:	40020470 	.word	0x40020470
 8003a50:	40020488 	.word	0x40020488
 8003a54:	400204a0 	.word	0x400204a0
 8003a58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1c8      	bne.n	80039fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4b84      	ldr	r3, [pc, #528]	; (8003c88 <HAL_DMA_Init+0x424>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d107      	bne.n	8003ac0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b28      	cmp	r3, #40	; 0x28
 8003ac6:	d903      	bls.n	8003ad0 <HAL_DMA_Init+0x26c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ace:	d91f      	bls.n	8003b10 <HAL_DMA_Init+0x2ac>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ad6:	d903      	bls.n	8003ae0 <HAL_DMA_Init+0x27c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b42      	cmp	r3, #66	; 0x42
 8003ade:	d917      	bls.n	8003b10 <HAL_DMA_Init+0x2ac>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b46      	cmp	r3, #70	; 0x46
 8003ae6:	d903      	bls.n	8003af0 <HAL_DMA_Init+0x28c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b48      	cmp	r3, #72	; 0x48
 8003aee:	d90f      	bls.n	8003b10 <HAL_DMA_Init+0x2ac>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b4e      	cmp	r3, #78	; 0x4e
 8003af6:	d903      	bls.n	8003b00 <HAL_DMA_Init+0x29c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b52      	cmp	r3, #82	; 0x52
 8003afe:	d907      	bls.n	8003b10 <HAL_DMA_Init+0x2ac>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b73      	cmp	r3, #115	; 0x73
 8003b06:	d905      	bls.n	8003b14 <HAL_DMA_Init+0x2b0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b77      	cmp	r3, #119	; 0x77
 8003b0e:	d801      	bhi.n	8003b14 <HAL_DMA_Init+0x2b0>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_Init+0x2b2>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b20:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 0307 	bic.w	r3, r3, #7
 8003b38:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d117      	bne.n	8003b7c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f002 fb2e 	bl	80061c0 <DMA_CheckFifoParam>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e194      	b.n	8003ea6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f002 fa69 	bl	800605c <DMA_CalcBaseAndBitshift>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	223f      	movs	r2, #63	; 0x3f
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e0ca      	b.n	8003d36 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a39      	ldr	r2, [pc, #228]	; (8003c8c <HAL_DMA_Init+0x428>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a38      	ldr	r2, [pc, #224]	; (8003c90 <HAL_DMA_Init+0x42c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a36      	ldr	r2, [pc, #216]	; (8003c94 <HAL_DMA_Init+0x430>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <HAL_DMA_Init+0x434>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_DMA_Init+0x438>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <HAL_DMA_Init+0x43c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a30      	ldr	r2, [pc, #192]	; (8003ca4 <HAL_DMA_Init+0x440>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Init+0x38c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <HAL_DMA_Init+0x444>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Init+0x390>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMA_Init+0x392>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8094 	beq.w	8003d24 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_DMA_Init+0x428>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d021      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_DMA_Init+0x42c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01c      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_DMA_Init+0x430>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_DMA_Init+0x434>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d012      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_DMA_Init+0x438>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_DMA_Init+0x43c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d008      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <HAL_DMA_Init+0x440>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <HAL_DMA_Init+0x3e6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_DMA_Init+0x444>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <HAL_DMA_Init+0x448>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d01d      	beq.n	8003cb0 <HAL_DMA_Init+0x44c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d102      	bne.n	8003c82 <HAL_DMA_Init+0x41e>
 8003c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c80:	e017      	b.n	8003cb2 <HAL_DMA_Init+0x44e>
 8003c82:	2300      	movs	r3, #0
 8003c84:	e015      	b.n	8003cb2 <HAL_DMA_Init+0x44e>
 8003c86:	bf00      	nop
 8003c88:	fe10803f 	.word	0xfe10803f
 8003c8c:	58025408 	.word	0x58025408
 8003c90:	5802541c 	.word	0x5802541c
 8003c94:	58025430 	.word	0x58025430
 8003c98:	58025444 	.word	0x58025444
 8003c9c:	58025458 	.word	0x58025458
 8003ca0:	5802546c 	.word	0x5802546c
 8003ca4:	58025480 	.word	0x58025480
 8003ca8:	58025494 	.word	0x58025494
 8003cac:	fffe000f 	.word	0xfffe000f
 8003cb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ce0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b6e      	ldr	r3, [pc, #440]	; (8003eb0 <HAL_DMA_Init+0x64c>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4a6e      	ldr	r2, [pc, #440]	; (8003eb4 <HAL_DMA_Init+0x650>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	009a      	lsls	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f002 f9a7 	bl	800605c <DMA_CalcBaseAndBitshift>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	e008      	b.n	8003d36 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0b7      	b.n	8003ea6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <HAL_DMA_Init+0x654>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d072      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <HAL_DMA_Init+0x658>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d06d      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a5c      	ldr	r2, [pc, #368]	; (8003ec0 <HAL_DMA_Init+0x65c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d068      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a5a      	ldr	r2, [pc, #360]	; (8003ec4 <HAL_DMA_Init+0x660>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d063      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a59      	ldr	r2, [pc, #356]	; (8003ec8 <HAL_DMA_Init+0x664>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d05e      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <HAL_DMA_Init+0x668>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d059      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a56      	ldr	r2, [pc, #344]	; (8003ed0 <HAL_DMA_Init+0x66c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d054      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a54      	ldr	r2, [pc, #336]	; (8003ed4 <HAL_DMA_Init+0x670>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d04f      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a53      	ldr	r2, [pc, #332]	; (8003ed8 <HAL_DMA_Init+0x674>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a51      	ldr	r2, [pc, #324]	; (8003edc <HAL_DMA_Init+0x678>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a50      	ldr	r2, [pc, #320]	; (8003ee0 <HAL_DMA_Init+0x67c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a4e      	ldr	r2, [pc, #312]	; (8003ee4 <HAL_DMA_Init+0x680>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <HAL_DMA_Init+0x684>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	; (8003eec <HAL_DMA_Init+0x688>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <HAL_DMA_Init+0x68c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a48      	ldr	r2, [pc, #288]	; (8003ef4 <HAL_DMA_Init+0x690>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a47      	ldr	r2, [pc, #284]	; (8003ef8 <HAL_DMA_Init+0x694>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a45      	ldr	r2, [pc, #276]	; (8003efc <HAL_DMA_Init+0x698>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a44      	ldr	r2, [pc, #272]	; (8003f00 <HAL_DMA_Init+0x69c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_DMA_Init+0x6a0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a41      	ldr	r2, [pc, #260]	; (8003f08 <HAL_DMA_Init+0x6a4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <HAL_DMA_Init+0x6a8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a3e      	ldr	r2, [pc, #248]	; (8003f10 <HAL_DMA_Init+0x6ac>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_Init+0x5c2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <HAL_DMA_Init+0x6b0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_DMA_Init+0x5c6>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_DMA_Init+0x5c8>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d032      	beq.n	8003e96 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f002 fa41 	bl	80062b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d102      	bne.n	8003e44 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_DMA_Init+0x620>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d80c      	bhi.n	8003e84 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f002 fabe 	bl	80063ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	e008      	b.n	8003e96 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	a7fdabf8 	.word	0xa7fdabf8
 8003eb4:	cccccccd 	.word	0xcccccccd
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
 8003ef8:	58025408 	.word	0x58025408
 8003efc:	5802541c 	.word	0x5802541c
 8003f00:	58025430 	.word	0x58025430
 8003f04:	58025444 	.word	0x58025444
 8003f08:	58025458 	.word	0x58025458
 8003f0c:	5802546c 	.word	0x5802546c
 8003f10:	58025480 	.word	0x58025480
 8003f14:	58025494 	.word	0x58025494

08003f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e226      	b.n	8004382 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_DMA_Start_IT+0x2a>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e21f      	b.n	8004382 <HAL_DMA_Start_IT+0x46a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	f040 820a 	bne.w	800436c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a68      	ldr	r2, [pc, #416]	; (800410c <HAL_DMA_Start_IT+0x1f4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d04a      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a66      	ldr	r2, [pc, #408]	; (8004110 <HAL_DMA_Start_IT+0x1f8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d045      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a65      	ldr	r2, [pc, #404]	; (8004114 <HAL_DMA_Start_IT+0x1fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d040      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a63      	ldr	r2, [pc, #396]	; (8004118 <HAL_DMA_Start_IT+0x200>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d03b      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a62      	ldr	r2, [pc, #392]	; (800411c <HAL_DMA_Start_IT+0x204>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d036      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a60      	ldr	r2, [pc, #384]	; (8004120 <HAL_DMA_Start_IT+0x208>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d031      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5f      	ldr	r2, [pc, #380]	; (8004124 <HAL_DMA_Start_IT+0x20c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d02c      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a5d      	ldr	r2, [pc, #372]	; (8004128 <HAL_DMA_Start_IT+0x210>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d027      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a5c      	ldr	r2, [pc, #368]	; (800412c <HAL_DMA_Start_IT+0x214>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d022      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a5a      	ldr	r2, [pc, #360]	; (8004130 <HAL_DMA_Start_IT+0x218>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a59      	ldr	r2, [pc, #356]	; (8004134 <HAL_DMA_Start_IT+0x21c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a57      	ldr	r2, [pc, #348]	; (8004138 <HAL_DMA_Start_IT+0x220>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a56      	ldr	r2, [pc, #344]	; (800413c <HAL_DMA_Start_IT+0x224>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_DMA_Start_IT+0x228>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a53      	ldr	r2, [pc, #332]	; (8004144 <HAL_DMA_Start_IT+0x22c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_DMA_Start_IT+0xee>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a51      	ldr	r2, [pc, #324]	; (8004148 <HAL_DMA_Start_IT+0x230>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d108      	bne.n	8004018 <HAL_DMA_Start_IT+0x100>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e007      	b.n	8004028 <HAL_DMA_Start_IT+0x110>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f001 fe68 	bl	8005d04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_DMA_Start_IT+0x1f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d04a      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a33      	ldr	r2, [pc, #204]	; (8004110 <HAL_DMA_Start_IT+0x1f8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d045      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a31      	ldr	r2, [pc, #196]	; (8004114 <HAL_DMA_Start_IT+0x1fc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d040      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a30      	ldr	r2, [pc, #192]	; (8004118 <HAL_DMA_Start_IT+0x200>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d03b      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2e      	ldr	r2, [pc, #184]	; (800411c <HAL_DMA_Start_IT+0x204>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d036      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_DMA_Start_IT+0x208>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d031      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <HAL_DMA_Start_IT+0x20c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02c      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_DMA_Start_IT+0x210>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d027      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a28      	ldr	r2, [pc, #160]	; (800412c <HAL_DMA_Start_IT+0x214>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d022      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a27      	ldr	r2, [pc, #156]	; (8004130 <HAL_DMA_Start_IT+0x218>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d01d      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a25      	ldr	r2, [pc, #148]	; (8004134 <HAL_DMA_Start_IT+0x21c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a24      	ldr	r2, [pc, #144]	; (8004138 <HAL_DMA_Start_IT+0x220>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_DMA_Start_IT+0x224>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_DMA_Start_IT+0x228>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_DMA_Start_IT+0x22c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_DMA_Start_IT+0x1bc>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_DMA_Start_IT+0x230>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Start_IT+0x1c0>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_DMA_Start_IT+0x1c2>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d036      	beq.n	800414c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f023 021e 	bic.w	r2, r3, #30
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0216 	orr.w	r2, r2, #22
 80040f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d03e      	beq.n	8004178 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0208 	orr.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e035      	b.n	8004178 <HAL_DMA_Start_IT+0x260>
 800410c:	40020010 	.word	0x40020010
 8004110:	40020028 	.word	0x40020028
 8004114:	40020040 	.word	0x40020040
 8004118:	40020058 	.word	0x40020058
 800411c:	40020070 	.word	0x40020070
 8004120:	40020088 	.word	0x40020088
 8004124:	400200a0 	.word	0x400200a0
 8004128:	400200b8 	.word	0x400200b8
 800412c:	40020410 	.word	0x40020410
 8004130:	40020428 	.word	0x40020428
 8004134:	40020440 	.word	0x40020440
 8004138:	40020458 	.word	0x40020458
 800413c:	40020470 	.word	0x40020470
 8004140:	40020488 	.word	0x40020488
 8004144:	400204a0 	.word	0x400204a0
 8004148:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020e 	bic.w	r2, r3, #14
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 020a 	orr.w	r2, r2, #10
 800415e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0204 	orr.w	r2, r2, #4
 8004176:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a83      	ldr	r2, [pc, #524]	; (800438c <HAL_DMA_Start_IT+0x474>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d072      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a82      	ldr	r2, [pc, #520]	; (8004390 <HAL_DMA_Start_IT+0x478>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d06d      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a80      	ldr	r2, [pc, #512]	; (8004394 <HAL_DMA_Start_IT+0x47c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d068      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7f      	ldr	r2, [pc, #508]	; (8004398 <HAL_DMA_Start_IT+0x480>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d063      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7d      	ldr	r2, [pc, #500]	; (800439c <HAL_DMA_Start_IT+0x484>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d05e      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_DMA_Start_IT+0x488>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d059      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	; (80043a4 <HAL_DMA_Start_IT+0x48c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d054      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a79      	ldr	r2, [pc, #484]	; (80043a8 <HAL_DMA_Start_IT+0x490>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d04f      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_DMA_Start_IT+0x494>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d04a      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a76      	ldr	r2, [pc, #472]	; (80043b0 <HAL_DMA_Start_IT+0x498>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d045      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a74      	ldr	r2, [pc, #464]	; (80043b4 <HAL_DMA_Start_IT+0x49c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d040      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a73      	ldr	r2, [pc, #460]	; (80043b8 <HAL_DMA_Start_IT+0x4a0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d03b      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a71      	ldr	r2, [pc, #452]	; (80043bc <HAL_DMA_Start_IT+0x4a4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d036      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a70      	ldr	r2, [pc, #448]	; (80043c0 <HAL_DMA_Start_IT+0x4a8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d031      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_DMA_Start_IT+0x4ac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02c      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6d      	ldr	r2, [pc, #436]	; (80043c8 <HAL_DMA_Start_IT+0x4b0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d027      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_DMA_Start_IT+0x4b4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6a      	ldr	r2, [pc, #424]	; (80043d0 <HAL_DMA_Start_IT+0x4b8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <HAL_DMA_Start_IT+0x4bc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a67      	ldr	r2, [pc, #412]	; (80043d8 <HAL_DMA_Start_IT+0x4c0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a65      	ldr	r2, [pc, #404]	; (80043dc <HAL_DMA_Start_IT+0x4c4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <HAL_DMA_Start_IT+0x4c8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a62      	ldr	r2, [pc, #392]	; (80043e4 <HAL_DMA_Start_IT+0x4cc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_Start_IT+0x350>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a61      	ldr	r2, [pc, #388]	; (80043e8 <HAL_DMA_Start_IT+0x4d0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d101      	bne.n	800426c <HAL_DMA_Start_IT+0x354>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_DMA_Start_IT+0x356>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01a      	beq.n	80042a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a37      	ldr	r2, [pc, #220]	; (800438c <HAL_DMA_Start_IT+0x474>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d04a      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a36      	ldr	r2, [pc, #216]	; (8004390 <HAL_DMA_Start_IT+0x478>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d045      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a34      	ldr	r2, [pc, #208]	; (8004394 <HAL_DMA_Start_IT+0x47c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d040      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a33      	ldr	r2, [pc, #204]	; (8004398 <HAL_DMA_Start_IT+0x480>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d03b      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a31      	ldr	r2, [pc, #196]	; (800439c <HAL_DMA_Start_IT+0x484>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d036      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a30      	ldr	r2, [pc, #192]	; (80043a0 <HAL_DMA_Start_IT+0x488>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d031      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <HAL_DMA_Start_IT+0x48c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02c      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <HAL_DMA_Start_IT+0x490>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d027      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <HAL_DMA_Start_IT+0x494>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d022      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2a      	ldr	r2, [pc, #168]	; (80043b0 <HAL_DMA_Start_IT+0x498>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d01d      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_DMA_Start_IT+0x49c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a27      	ldr	r2, [pc, #156]	; (80043b8 <HAL_DMA_Start_IT+0x4a0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a25      	ldr	r2, [pc, #148]	; (80043bc <HAL_DMA_Start_IT+0x4a4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <HAL_DMA_Start_IT+0x4a8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <HAL_DMA_Start_IT+0x4ac>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_DMA_Start_IT+0x430>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <HAL_DMA_Start_IT+0x4b0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d108      	bne.n	800435a <HAL_DMA_Start_IT+0x442>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e012      	b.n	8004380 <HAL_DMA_Start_IT+0x468>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e009      	b.n	8004380 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800437a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40020010 	.word	0x40020010
 8004390:	40020028 	.word	0x40020028
 8004394:	40020040 	.word	0x40020040
 8004398:	40020058 	.word	0x40020058
 800439c:	40020070 	.word	0x40020070
 80043a0:	40020088 	.word	0x40020088
 80043a4:	400200a0 	.word	0x400200a0
 80043a8:	400200b8 	.word	0x400200b8
 80043ac:	40020410 	.word	0x40020410
 80043b0:	40020428 	.word	0x40020428
 80043b4:	40020440 	.word	0x40020440
 80043b8:	40020458 	.word	0x40020458
 80043bc:	40020470 	.word	0x40020470
 80043c0:	40020488 	.word	0x40020488
 80043c4:	400204a0 	.word	0x400204a0
 80043c8:	400204b8 	.word	0x400204b8
 80043cc:	58025408 	.word	0x58025408
 80043d0:	5802541c 	.word	0x5802541c
 80043d4:	58025430 	.word	0x58025430
 80043d8:	58025444 	.word	0x58025444
 80043dc:	58025458 	.word	0x58025458
 80043e0:	5802546c 	.word	0x5802546c
 80043e4:	58025480 	.word	0x58025480
 80043e8:	58025494 	.word	0x58025494

080043ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80043f4:	f7fd f974 	bl	80016e0 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e2dc      	b.n	80049be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d008      	beq.n	8004422 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e2cd      	b.n	80049be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a76      	ldr	r2, [pc, #472]	; (8004600 <HAL_DMA_Abort+0x214>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d04a      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a74      	ldr	r2, [pc, #464]	; (8004604 <HAL_DMA_Abort+0x218>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d045      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a73      	ldr	r2, [pc, #460]	; (8004608 <HAL_DMA_Abort+0x21c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d040      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a71      	ldr	r2, [pc, #452]	; (800460c <HAL_DMA_Abort+0x220>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d03b      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a70      	ldr	r2, [pc, #448]	; (8004610 <HAL_DMA_Abort+0x224>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d036      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a6e      	ldr	r2, [pc, #440]	; (8004614 <HAL_DMA_Abort+0x228>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d031      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a6d      	ldr	r2, [pc, #436]	; (8004618 <HAL_DMA_Abort+0x22c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d02c      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6b      	ldr	r2, [pc, #428]	; (800461c <HAL_DMA_Abort+0x230>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d027      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6a      	ldr	r2, [pc, #424]	; (8004620 <HAL_DMA_Abort+0x234>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d022      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_DMA_Abort+0x238>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01d      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a67      	ldr	r2, [pc, #412]	; (8004628 <HAL_DMA_Abort+0x23c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d018      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a65      	ldr	r2, [pc, #404]	; (800462c <HAL_DMA_Abort+0x240>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a64      	ldr	r2, [pc, #400]	; (8004630 <HAL_DMA_Abort+0x244>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a62      	ldr	r2, [pc, #392]	; (8004634 <HAL_DMA_Abort+0x248>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a61      	ldr	r2, [pc, #388]	; (8004638 <HAL_DMA_Abort+0x24c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_DMA_Abort+0xd6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5f      	ldr	r2, [pc, #380]	; (800463c <HAL_DMA_Abort+0x250>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_DMA_Abort+0xda>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_DMA_Abort+0xdc>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 021e 	bic.w	r2, r2, #30
 80044da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e00a      	b.n	800450a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_DMA_Abort+0x214>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d072      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <HAL_DMA_Abort+0x218>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d06d      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a39      	ldr	r2, [pc, #228]	; (8004608 <HAL_DMA_Abort+0x21c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d068      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a37      	ldr	r2, [pc, #220]	; (800460c <HAL_DMA_Abort+0x220>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d063      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a36      	ldr	r2, [pc, #216]	; (8004610 <HAL_DMA_Abort+0x224>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d05e      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a34      	ldr	r2, [pc, #208]	; (8004614 <HAL_DMA_Abort+0x228>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d059      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a33      	ldr	r2, [pc, #204]	; (8004618 <HAL_DMA_Abort+0x22c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d054      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a31      	ldr	r2, [pc, #196]	; (800461c <HAL_DMA_Abort+0x230>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04f      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a30      	ldr	r2, [pc, #192]	; (8004620 <HAL_DMA_Abort+0x234>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d04a      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <HAL_DMA_Abort+0x238>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d045      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_DMA_Abort+0x23c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d040      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <HAL_DMA_Abort+0x240>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d03b      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <HAL_DMA_Abort+0x244>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d036      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <HAL_DMA_Abort+0x248>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d031      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a27      	ldr	r2, [pc, #156]	; (8004638 <HAL_DMA_Abort+0x24c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d02c      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <HAL_DMA_Abort+0x250>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d027      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a24      	ldr	r2, [pc, #144]	; (8004640 <HAL_DMA_Abort+0x254>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d022      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a22      	ldr	r2, [pc, #136]	; (8004644 <HAL_DMA_Abort+0x258>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01d      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_DMA_Abort+0x25c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	; (800464c <HAL_DMA_Abort+0x260>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_DMA_Abort+0x264>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_DMA_Abort+0x268>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_DMA_Abort+0x26c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_DMA_Abort+0x20e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_DMA_Abort+0x270>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d132      	bne.n	8004660 <HAL_DMA_Abort+0x274>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e031      	b.n	8004662 <HAL_DMA_Abort+0x276>
 80045fe:	bf00      	nop
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004674:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <HAL_DMA_Abort+0x444>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <HAL_DMA_Abort+0x448>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6a      	ldr	r2, [pc, #424]	; (8004838 <HAL_DMA_Abort+0x44c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_DMA_Abort+0x450>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_DMA_Abort+0x454>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_DMA_Abort+0x458>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a64      	ldr	r2, [pc, #400]	; (8004848 <HAL_DMA_Abort+0x45c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a62      	ldr	r2, [pc, #392]	; (800484c <HAL_DMA_Abort+0x460>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a61      	ldr	r2, [pc, #388]	; (8004850 <HAL_DMA_Abort+0x464>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a5f      	ldr	r2, [pc, #380]	; (8004854 <HAL_DMA_Abort+0x468>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5e      	ldr	r2, [pc, #376]	; (8004858 <HAL_DMA_Abort+0x46c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5c      	ldr	r2, [pc, #368]	; (800485c <HAL_DMA_Abort+0x470>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <HAL_DMA_Abort+0x474>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a59      	ldr	r2, [pc, #356]	; (8004864 <HAL_DMA_Abort+0x478>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_DMA_Abort+0x47c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_Abort+0x32a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a56      	ldr	r2, [pc, #344]	; (800486c <HAL_DMA_Abort+0x480>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <HAL_DMA_Abort+0x33c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <HAL_DMA_Abort+0x34c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004738:	e013      	b.n	8004762 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800473a:	f7fc ffd1 	bl	80016e0 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b05      	cmp	r3, #5
 8004746:	d90c      	bls.n	8004762 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2203      	movs	r2, #3
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e12d      	b.n	80049be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <HAL_DMA_Abort+0x444>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <HAL_DMA_Abort+0x422>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_DMA_Abort+0x448>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <HAL_DMA_Abort+0x422>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <HAL_DMA_Abort+0x44c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_DMA_Abort+0x422>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <HAL_DMA_Abort+0x450>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_DMA_Abort+0x422>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a29      	ldr	r2, [pc, #164]	; (8004840 <HAL_DMA_Abort+0x454>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <HAL_DMA_Abort+0x458>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a26      	ldr	r2, [pc, #152]	; (8004848 <HAL_DMA_Abort+0x45c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_DMA_Abort+0x460>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_DMA_Abort+0x464>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <HAL_DMA_Abort+0x468>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a20      	ldr	r2, [pc, #128]	; (8004858 <HAL_DMA_Abort+0x46c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1e      	ldr	r2, [pc, #120]	; (800485c <HAL_DMA_Abort+0x470>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <HAL_DMA_Abort+0x474>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1b      	ldr	r2, [pc, #108]	; (8004864 <HAL_DMA_Abort+0x478>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_DMA_Abort+0x422>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_DMA_Abort+0x47c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_Abort+0x422>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_DMA_Abort+0x480>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_DMA_Abort+0x426>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_DMA_Abort+0x428>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02b      	beq.n	8004870 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	223f      	movs	r2, #63	; 0x3f
 8004828:	409a      	lsls	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	609a      	str	r2, [r3, #8]
 800482e:	e02a      	b.n	8004886 <HAL_DMA_Abort+0x49a>
 8004830:	40020010 	.word	0x40020010
 8004834:	40020028 	.word	0x40020028
 8004838:	40020040 	.word	0x40020040
 800483c:	40020058 	.word	0x40020058
 8004840:	40020070 	.word	0x40020070
 8004844:	40020088 	.word	0x40020088
 8004848:	400200a0 	.word	0x400200a0
 800484c:	400200b8 	.word	0x400200b8
 8004850:	40020410 	.word	0x40020410
 8004854:	40020428 	.word	0x40020428
 8004858:	40020440 	.word	0x40020440
 800485c:	40020458 	.word	0x40020458
 8004860:	40020470 	.word	0x40020470
 8004864:	40020488 	.word	0x40020488
 8004868:	400204a0 	.word	0x400204a0
 800486c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a4f      	ldr	r2, [pc, #316]	; (80049c8 <HAL_DMA_Abort+0x5dc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d072      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a4d      	ldr	r2, [pc, #308]	; (80049cc <HAL_DMA_Abort+0x5e0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d06d      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a4c      	ldr	r2, [pc, #304]	; (80049d0 <HAL_DMA_Abort+0x5e4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d068      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_DMA_Abort+0x5e8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d063      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a49      	ldr	r2, [pc, #292]	; (80049d8 <HAL_DMA_Abort+0x5ec>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d05e      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a47      	ldr	r2, [pc, #284]	; (80049dc <HAL_DMA_Abort+0x5f0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d059      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a46      	ldr	r2, [pc, #280]	; (80049e0 <HAL_DMA_Abort+0x5f4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d054      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a44      	ldr	r2, [pc, #272]	; (80049e4 <HAL_DMA_Abort+0x5f8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04f      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a43      	ldr	r2, [pc, #268]	; (80049e8 <HAL_DMA_Abort+0x5fc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d04a      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a41      	ldr	r2, [pc, #260]	; (80049ec <HAL_DMA_Abort+0x600>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d045      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <HAL_DMA_Abort+0x604>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d040      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <HAL_DMA_Abort+0x608>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d03b      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <HAL_DMA_Abort+0x60c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d036      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <HAL_DMA_Abort+0x610>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d031      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <HAL_DMA_Abort+0x614>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d02c      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a38      	ldr	r2, [pc, #224]	; (8004a04 <HAL_DMA_Abort+0x618>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d027      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <HAL_DMA_Abort+0x61c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <HAL_DMA_Abort+0x620>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01d      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <HAL_DMA_Abort+0x624>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <HAL_DMA_Abort+0x628>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a31      	ldr	r2, [pc, #196]	; (8004a18 <HAL_DMA_Abort+0x62c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <HAL_DMA_Abort+0x630>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2e      	ldr	r2, [pc, #184]	; (8004a20 <HAL_DMA_Abort+0x634>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_Abort+0x58a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2c      	ldr	r2, [pc, #176]	; (8004a24 <HAL_DMA_Abort+0x638>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_DMA_Abort+0x58e>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_DMA_Abort+0x590>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004988:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	58025408 	.word	0x58025408
 8004a0c:	5802541c 	.word	0x5802541c
 8004a10:	58025430 	.word	0x58025430
 8004a14:	58025444 	.word	0x58025444
 8004a18:	58025458 	.word	0x58025458
 8004a1c:	5802546c 	.word	0x5802546c
 8004a20:	58025480 	.word	0x58025480
 8004a24:	58025494 	.word	0x58025494

08004a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e205      	b.n	8004e46 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e1fa      	b.n	8004e46 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a8c      	ldr	r2, [pc, #560]	; (8004c88 <HAL_DMA_Abort_IT+0x260>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04a      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a8b      	ldr	r2, [pc, #556]	; (8004c8c <HAL_DMA_Abort_IT+0x264>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d045      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a89      	ldr	r2, [pc, #548]	; (8004c90 <HAL_DMA_Abort_IT+0x268>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d040      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a88      	ldr	r2, [pc, #544]	; (8004c94 <HAL_DMA_Abort_IT+0x26c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d03b      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a86      	ldr	r2, [pc, #536]	; (8004c98 <HAL_DMA_Abort_IT+0x270>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d036      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a85      	ldr	r2, [pc, #532]	; (8004c9c <HAL_DMA_Abort_IT+0x274>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d031      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a83      	ldr	r2, [pc, #524]	; (8004ca0 <HAL_DMA_Abort_IT+0x278>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d02c      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a82      	ldr	r2, [pc, #520]	; (8004ca4 <HAL_DMA_Abort_IT+0x27c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d027      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <HAL_DMA_Abort_IT+0x280>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d022      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7f      	ldr	r2, [pc, #508]	; (8004cac <HAL_DMA_Abort_IT+0x284>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d01d      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7d      	ldr	r2, [pc, #500]	; (8004cb0 <HAL_DMA_Abort_IT+0x288>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d018      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7c      	ldr	r2, [pc, #496]	; (8004cb4 <HAL_DMA_Abort_IT+0x28c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d013      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7a      	ldr	r2, [pc, #488]	; (8004cb8 <HAL_DMA_Abort_IT+0x290>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a79      	ldr	r2, [pc, #484]	; (8004cbc <HAL_DMA_Abort_IT+0x294>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d009      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a77      	ldr	r2, [pc, #476]	; (8004cc0 <HAL_DMA_Abort_IT+0x298>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_DMA_Abort_IT+0xc8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a76      	ldr	r2, [pc, #472]	; (8004cc4 <HAL_DMA_Abort_IT+0x29c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Abort_IT+0xcc>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <HAL_DMA_Abort_IT+0xce>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d065      	beq.n	8004bc6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a60      	ldr	r2, [pc, #384]	; (8004c88 <HAL_DMA_Abort_IT+0x260>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d04a      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5e      	ldr	r2, [pc, #376]	; (8004c8c <HAL_DMA_Abort_IT+0x264>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d045      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5d      	ldr	r2, [pc, #372]	; (8004c90 <HAL_DMA_Abort_IT+0x268>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d040      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a5b      	ldr	r2, [pc, #364]	; (8004c94 <HAL_DMA_Abort_IT+0x26c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d03b      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a5a      	ldr	r2, [pc, #360]	; (8004c98 <HAL_DMA_Abort_IT+0x270>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d036      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_DMA_Abort_IT+0x274>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d031      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a57      	ldr	r2, [pc, #348]	; (8004ca0 <HAL_DMA_Abort_IT+0x278>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d02c      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a55      	ldr	r2, [pc, #340]	; (8004ca4 <HAL_DMA_Abort_IT+0x27c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d027      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a54      	ldr	r2, [pc, #336]	; (8004ca8 <HAL_DMA_Abort_IT+0x280>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d022      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a52      	ldr	r2, [pc, #328]	; (8004cac <HAL_DMA_Abort_IT+0x284>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a51      	ldr	r2, [pc, #324]	; (8004cb0 <HAL_DMA_Abort_IT+0x288>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a4f      	ldr	r2, [pc, #316]	; (8004cb4 <HAL_DMA_Abort_IT+0x28c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a4e      	ldr	r2, [pc, #312]	; (8004cb8 <HAL_DMA_Abort_IT+0x290>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a4c      	ldr	r2, [pc, #304]	; (8004cbc <HAL_DMA_Abort_IT+0x294>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4b      	ldr	r2, [pc, #300]	; (8004cc0 <HAL_DMA_Abort_IT+0x298>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_DMA_Abort_IT+0x17a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a49      	ldr	r2, [pc, #292]	; (8004cc4 <HAL_DMA_Abort_IT+0x29c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <HAL_DMA_Abort_IT+0x18c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e147      	b.n	8004e44 <HAL_DMA_Abort_IT+0x41c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e13e      	b.n	8004e44 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020e 	bic.w	r2, r2, #14
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_DMA_Abort_IT+0x260>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d04a      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <HAL_DMA_Abort_IT+0x264>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d045      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <HAL_DMA_Abort_IT+0x268>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d040      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <HAL_DMA_Abort_IT+0x26c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d03b      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <HAL_DMA_Abort_IT+0x270>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d036      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <HAL_DMA_Abort_IT+0x274>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d031      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_DMA_Abort_IT+0x278>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d02c      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <HAL_DMA_Abort_IT+0x27c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d027      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_DMA_Abort_IT+0x280>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <HAL_DMA_Abort_IT+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_DMA_Abort_IT+0x288>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d018      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <HAL_DMA_Abort_IT+0x28c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_DMA_Abort_IT+0x290>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_DMA_Abort_IT+0x294>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_DMA_Abort_IT+0x298>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_DMA_Abort_IT+0x24e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <HAL_DMA_Abort_IT+0x29c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d128      	bne.n	8004cc8 <HAL_DMA_Abort_IT+0x2a0>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	e027      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x2b0>
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5c      	ldr	r2, [pc, #368]	; (8004e50 <HAL_DMA_Abort_IT+0x428>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d072      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_DMA_Abort_IT+0x42c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d06d      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a59      	ldr	r2, [pc, #356]	; (8004e58 <HAL_DMA_Abort_IT+0x430>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d068      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_DMA_Abort_IT+0x434>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d063      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_DMA_Abort_IT+0x438>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d05e      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a55      	ldr	r2, [pc, #340]	; (8004e64 <HAL_DMA_Abort_IT+0x43c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d059      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a53      	ldr	r2, [pc, #332]	; (8004e68 <HAL_DMA_Abort_IT+0x440>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d054      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_DMA_Abort_IT+0x444>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d04f      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a50      	ldr	r2, [pc, #320]	; (8004e70 <HAL_DMA_Abort_IT+0x448>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4f      	ldr	r2, [pc, #316]	; (8004e74 <HAL_DMA_Abort_IT+0x44c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4d      	ldr	r2, [pc, #308]	; (8004e78 <HAL_DMA_Abort_IT+0x450>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_DMA_Abort_IT+0x454>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a4a      	ldr	r2, [pc, #296]	; (8004e80 <HAL_DMA_Abort_IT+0x458>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a49      	ldr	r2, [pc, #292]	; (8004e84 <HAL_DMA_Abort_IT+0x45c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a47      	ldr	r2, [pc, #284]	; (8004e88 <HAL_DMA_Abort_IT+0x460>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a46      	ldr	r2, [pc, #280]	; (8004e8c <HAL_DMA_Abort_IT+0x464>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a44      	ldr	r2, [pc, #272]	; (8004e90 <HAL_DMA_Abort_IT+0x468>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a43      	ldr	r2, [pc, #268]	; (8004e94 <HAL_DMA_Abort_IT+0x46c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a41      	ldr	r2, [pc, #260]	; (8004e98 <HAL_DMA_Abort_IT+0x470>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <HAL_DMA_Abort_IT+0x474>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3e      	ldr	r2, [pc, #248]	; (8004ea0 <HAL_DMA_Abort_IT+0x478>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3d      	ldr	r2, [pc, #244]	; (8004ea4 <HAL_DMA_Abort_IT+0x47c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3b      	ldr	r2, [pc, #236]	; (8004ea8 <HAL_DMA_Abort_IT+0x480>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x3a0>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <HAL_DMA_Abort_IT+0x484>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_DMA_Abort_IT+0x3a4>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_DMA_Abort_IT+0x3a6>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2201      	movs	r2, #1
 8004df2:	409a      	lsls	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40020010 	.word	0x40020010
 8004e54:	40020028 	.word	0x40020028
 8004e58:	40020040 	.word	0x40020040
 8004e5c:	40020058 	.word	0x40020058
 8004e60:	40020070 	.word	0x40020070
 8004e64:	40020088 	.word	0x40020088
 8004e68:	400200a0 	.word	0x400200a0
 8004e6c:	400200b8 	.word	0x400200b8
 8004e70:	40020410 	.word	0x40020410
 8004e74:	40020428 	.word	0x40020428
 8004e78:	40020440 	.word	0x40020440
 8004e7c:	40020458 	.word	0x40020458
 8004e80:	40020470 	.word	0x40020470
 8004e84:	40020488 	.word	0x40020488
 8004e88:	400204a0 	.word	0x400204a0
 8004e8c:	400204b8 	.word	0x400204b8
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494

08004eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ebc:	4b67      	ldr	r3, [pc, #412]	; (800505c <HAL_DMA_IRQHandler+0x1ac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a67      	ldr	r2, [pc, #412]	; (8005060 <HAL_DMA_IRQHandler+0x1b0>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <HAL_DMA_IRQHandler+0x1b4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a5d      	ldr	r2, [pc, #372]	; (8005068 <HAL_DMA_IRQHandler+0x1b8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5c      	ldr	r2, [pc, #368]	; (800506c <HAL_DMA_IRQHandler+0x1bc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5a      	ldr	r2, [pc, #360]	; (8005070 <HAL_DMA_IRQHandler+0x1c0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a59      	ldr	r2, [pc, #356]	; (8005074 <HAL_DMA_IRQHandler+0x1c4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a57      	ldr	r2, [pc, #348]	; (8005078 <HAL_DMA_IRQHandler+0x1c8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a56      	ldr	r2, [pc, #344]	; (800507c <HAL_DMA_IRQHandler+0x1cc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a54      	ldr	r2, [pc, #336]	; (8005080 <HAL_DMA_IRQHandler+0x1d0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a53      	ldr	r2, [pc, #332]	; (8005084 <HAL_DMA_IRQHandler+0x1d4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a51      	ldr	r2, [pc, #324]	; (8005088 <HAL_DMA_IRQHandler+0x1d8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a50      	ldr	r2, [pc, #320]	; (800508c <HAL_DMA_IRQHandler+0x1dc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a4e      	ldr	r2, [pc, #312]	; (8005090 <HAL_DMA_IRQHandler+0x1e0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a4d      	ldr	r2, [pc, #308]	; (8005094 <HAL_DMA_IRQHandler+0x1e4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a4b      	ldr	r2, [pc, #300]	; (8005098 <HAL_DMA_IRQHandler+0x1e8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4a      	ldr	r2, [pc, #296]	; (800509c <HAL_DMA_IRQHandler+0x1ec>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_IRQHandler+0xd2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a48      	ldr	r2, [pc, #288]	; (80050a0 <HAL_DMA_IRQHandler+0x1f0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_DMA_IRQHandler+0xd6>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_DMA_IRQHandler+0xd8>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 842b 	beq.w	80057e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2208      	movs	r2, #8
 8004f98:	409a      	lsls	r2, r3
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80a2 	beq.w	80050e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	; (8005064 <HAL_DMA_IRQHandler+0x1b4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d04a      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2d      	ldr	r2, [pc, #180]	; (8005068 <HAL_DMA_IRQHandler+0x1b8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d045      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <HAL_DMA_IRQHandler+0x1bc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d040      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <HAL_DMA_IRQHandler+0x1c0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d03b      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	; (8005074 <HAL_DMA_IRQHandler+0x1c4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d036      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <HAL_DMA_IRQHandler+0x1c8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d031      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a25      	ldr	r2, [pc, #148]	; (800507c <HAL_DMA_IRQHandler+0x1cc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d02c      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a24      	ldr	r2, [pc, #144]	; (8005080 <HAL_DMA_IRQHandler+0x1d0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d027      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_DMA_IRQHandler+0x1d4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a21      	ldr	r2, [pc, #132]	; (8005088 <HAL_DMA_IRQHandler+0x1d8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_DMA_IRQHandler+0x1dc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_DMA_IRQHandler+0x1e0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_DMA_IRQHandler+0x1e4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_DMA_IRQHandler+0x1e8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_DMA_IRQHandler+0x1ec>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_DMA_IRQHandler+0x194>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_DMA_IRQHandler+0x1f0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d12f      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x1f4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e02e      	b.n	80050b8 <HAL_DMA_IRQHandler+0x208>
 800505a:	bf00      	nop
 800505c:	24000004 	.word	0x24000004
 8005060:	1b4e81b5 	.word	0x1b4e81b5
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0204 	bic.w	r2, r2, #4
 80050ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2208      	movs	r2, #8
 80050d6:	409a      	lsls	r2, r3
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d06e      	beq.n	80051dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a69      	ldr	r2, [pc, #420]	; (80052a8 <HAL_DMA_IRQHandler+0x3f8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d04a      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a67      	ldr	r2, [pc, #412]	; (80052ac <HAL_DMA_IRQHandler+0x3fc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d045      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a66      	ldr	r2, [pc, #408]	; (80052b0 <HAL_DMA_IRQHandler+0x400>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d040      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a64      	ldr	r2, [pc, #400]	; (80052b4 <HAL_DMA_IRQHandler+0x404>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d03b      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_DMA_IRQHandler+0x408>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d036      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a61      	ldr	r2, [pc, #388]	; (80052bc <HAL_DMA_IRQHandler+0x40c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d031      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a60      	ldr	r2, [pc, #384]	; (80052c0 <HAL_DMA_IRQHandler+0x410>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d02c      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a5e      	ldr	r2, [pc, #376]	; (80052c4 <HAL_DMA_IRQHandler+0x414>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d027      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_DMA_IRQHandler+0x418>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a5b      	ldr	r2, [pc, #364]	; (80052cc <HAL_DMA_IRQHandler+0x41c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01d      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_DMA_IRQHandler+0x420>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a58      	ldr	r2, [pc, #352]	; (80052d4 <HAL_DMA_IRQHandler+0x424>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_DMA_IRQHandler+0x428>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a55      	ldr	r2, [pc, #340]	; (80052dc <HAL_DMA_IRQHandler+0x42c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_DMA_IRQHandler+0x430>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_DMA_IRQHandler+0x2ee>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <HAL_DMA_IRQHandler+0x434>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d10a      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x304>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e003      	b.n	80051bc <HAL_DMA_IRQHandler+0x30c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	2201      	movs	r2, #1
 80051ca:	409a      	lsls	r2, r3
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	f043 0202 	orr.w	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2204      	movs	r2, #4
 80051e6:	409a      	lsls	r2, r3
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 808f 	beq.w	8005310 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <HAL_DMA_IRQHandler+0x3f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d04a      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <HAL_DMA_IRQHandler+0x3fc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d045      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <HAL_DMA_IRQHandler+0x400>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d040      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <HAL_DMA_IRQHandler+0x404>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d03b      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <HAL_DMA_IRQHandler+0x408>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d036      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a24      	ldr	r2, [pc, #144]	; (80052bc <HAL_DMA_IRQHandler+0x40c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d031      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <HAL_DMA_IRQHandler+0x410>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d02c      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <HAL_DMA_IRQHandler+0x414>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d027      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a20      	ldr	r2, [pc, #128]	; (80052c8 <HAL_DMA_IRQHandler+0x418>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d022      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <HAL_DMA_IRQHandler+0x41c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01d      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <HAL_DMA_IRQHandler+0x420>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <HAL_DMA_IRQHandler+0x424>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <HAL_DMA_IRQHandler+0x428>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_DMA_IRQHandler+0x42c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a17      	ldr	r2, [pc, #92]	; (80052e0 <HAL_DMA_IRQHandler+0x430>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_DMA_IRQHandler+0x3e2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <HAL_DMA_IRQHandler+0x434>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d12a      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x438>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e023      	b.n	80052f0 <HAL_DMA_IRQHandler+0x440>
 80052a8:	40020010 	.word	0x40020010
 80052ac:	40020028 	.word	0x40020028
 80052b0:	40020040 	.word	0x40020040
 80052b4:	40020058 	.word	0x40020058
 80052b8:	40020070 	.word	0x40020070
 80052bc:	40020088 	.word	0x40020088
 80052c0:	400200a0 	.word	0x400200a0
 80052c4:	400200b8 	.word	0x400200b8
 80052c8:	40020410 	.word	0x40020410
 80052cc:	40020428 	.word	0x40020428
 80052d0:	40020440 	.word	0x40020440
 80052d4:	40020458 	.word	0x40020458
 80052d8:	40020470 	.word	0x40020470
 80052dc:	40020488 	.word	0x40020488
 80052e0:	400204a0 	.word	0x400204a0
 80052e4:	400204b8 	.word	0x400204b8
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2204      	movs	r2, #4
 80052fe:	409a      	lsls	r2, r3
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2210      	movs	r2, #16
 800531a:	409a      	lsls	r2, r3
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a6 	beq.w	8005472 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a85      	ldr	r2, [pc, #532]	; (8005540 <HAL_DMA_IRQHandler+0x690>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d04a      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a83      	ldr	r2, [pc, #524]	; (8005544 <HAL_DMA_IRQHandler+0x694>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d045      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a82      	ldr	r2, [pc, #520]	; (8005548 <HAL_DMA_IRQHandler+0x698>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d040      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a80      	ldr	r2, [pc, #512]	; (800554c <HAL_DMA_IRQHandler+0x69c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d03b      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7f      	ldr	r2, [pc, #508]	; (8005550 <HAL_DMA_IRQHandler+0x6a0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d036      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a7d      	ldr	r2, [pc, #500]	; (8005554 <HAL_DMA_IRQHandler+0x6a4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d031      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a7c      	ldr	r2, [pc, #496]	; (8005558 <HAL_DMA_IRQHandler+0x6a8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d02c      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7a      	ldr	r2, [pc, #488]	; (800555c <HAL_DMA_IRQHandler+0x6ac>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d027      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a79      	ldr	r2, [pc, #484]	; (8005560 <HAL_DMA_IRQHandler+0x6b0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a77      	ldr	r2, [pc, #476]	; (8005564 <HAL_DMA_IRQHandler+0x6b4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01d      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a76      	ldr	r2, [pc, #472]	; (8005568 <HAL_DMA_IRQHandler+0x6b8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a74      	ldr	r2, [pc, #464]	; (800556c <HAL_DMA_IRQHandler+0x6bc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a73      	ldr	r2, [pc, #460]	; (8005570 <HAL_DMA_IRQHandler+0x6c0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a71      	ldr	r2, [pc, #452]	; (8005574 <HAL_DMA_IRQHandler+0x6c4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a70      	ldr	r2, [pc, #448]	; (8005578 <HAL_DMA_IRQHandler+0x6c8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x516>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6e      	ldr	r2, [pc, #440]	; (800557c <HAL_DMA_IRQHandler+0x6cc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10a      	bne.n	80053dc <HAL_DMA_IRQHandler+0x52c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e009      	b.n	80053f0 <HAL_DMA_IRQHandler+0x540>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03e      	beq.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2210      	movs	r2, #16
 80053fe:	409a      	lsls	r2, r3
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d018      	beq.n	8005444 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d108      	bne.n	8005432 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d024      	beq.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
 8005430:	e01f      	b.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01b      	beq.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
 8005442:	e016      	b.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d107      	bne.n	8005462 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0208 	bic.w	r2, r2, #8
 8005460:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	f003 031f 	and.w	r3, r3, #31
 800547a:	2220      	movs	r2, #32
 800547c:	409a      	lsls	r2, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8110 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <HAL_DMA_IRQHandler+0x690>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04a      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <HAL_DMA_IRQHandler+0x694>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d045      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a29      	ldr	r2, [pc, #164]	; (8005548 <HAL_DMA_IRQHandler+0x698>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d040      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_DMA_IRQHandler+0x69c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d03b      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a26      	ldr	r2, [pc, #152]	; (8005550 <HAL_DMA_IRQHandler+0x6a0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d036      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a25      	ldr	r2, [pc, #148]	; (8005554 <HAL_DMA_IRQHandler+0x6a4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d031      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_DMA_IRQHandler+0x6a8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02c      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_DMA_IRQHandler+0x6ac>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d027      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <HAL_DMA_IRQHandler+0x6b0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <HAL_DMA_IRQHandler+0x6b4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01d      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <HAL_DMA_IRQHandler+0x6b8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <HAL_DMA_IRQHandler+0x6bc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_DMA_IRQHandler+0x6c0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a19      	ldr	r2, [pc, #100]	; (8005574 <HAL_DMA_IRQHandler+0x6c4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_DMA_IRQHandler+0x6c8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_DMA_IRQHandler+0x678>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <HAL_DMA_IRQHandler+0x6cc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d12b      	bne.n	8005580 <HAL_DMA_IRQHandler+0x6d0>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	e02a      	b.n	8005594 <HAL_DMA_IRQHandler+0x6e4>
 800553e:	bf00      	nop
 8005540:	40020010 	.word	0x40020010
 8005544:	40020028 	.word	0x40020028
 8005548:	40020040 	.word	0x40020040
 800554c:	40020058 	.word	0x40020058
 8005550:	40020070 	.word	0x40020070
 8005554:	40020088 	.word	0x40020088
 8005558:	400200a0 	.word	0x400200a0
 800555c:	400200b8 	.word	0x400200b8
 8005560:	40020410 	.word	0x40020410
 8005564:	40020428 	.word	0x40020428
 8005568:	40020440 	.word	0x40020440
 800556c:	40020458 	.word	0x40020458
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204a0 	.word	0x400204a0
 800557c:	400204b8 	.word	0x400204b8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8087 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2220      	movs	r2, #32
 80055a4:	409a      	lsls	r2, r3
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d139      	bne.n	800562a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0216 	bic.w	r2, r2, #22
 80055c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_DMA_IRQHandler+0x736>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0208 	bic.w	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	223f      	movs	r2, #63	; 0x3f
 8005600:	409a      	lsls	r2, r3
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 834a 	beq.w	8005cb4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
          }
          return;
 8005628:	e344      	b.n	8005cb4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d018      	beq.n	800566a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d108      	bne.n	8005658 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02c      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
 8005656:	e027      	b.n	80056a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d023      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
 8005668:	e01e      	b.n	80056a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10f      	bne.n	8005698 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0210 	bic.w	r2, r2, #16
 8005686:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8306 	beq.w	8005cbe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8088 	beq.w	80057d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2204      	movs	r2, #4
 80056c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7a      	ldr	r2, [pc, #488]	; (80058b8 <HAL_DMA_IRQHandler+0xa08>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d04a      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a79      	ldr	r2, [pc, #484]	; (80058bc <HAL_DMA_IRQHandler+0xa0c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d045      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a77      	ldr	r2, [pc, #476]	; (80058c0 <HAL_DMA_IRQHandler+0xa10>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d040      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a76      	ldr	r2, [pc, #472]	; (80058c4 <HAL_DMA_IRQHandler+0xa14>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d03b      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a74      	ldr	r2, [pc, #464]	; (80058c8 <HAL_DMA_IRQHandler+0xa18>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d036      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a73      	ldr	r2, [pc, #460]	; (80058cc <HAL_DMA_IRQHandler+0xa1c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d031      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a71      	ldr	r2, [pc, #452]	; (80058d0 <HAL_DMA_IRQHandler+0xa20>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d02c      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a70      	ldr	r2, [pc, #448]	; (80058d4 <HAL_DMA_IRQHandler+0xa24>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d027      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a6e      	ldr	r2, [pc, #440]	; (80058d8 <HAL_DMA_IRQHandler+0xa28>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6d      	ldr	r2, [pc, #436]	; (80058dc <HAL_DMA_IRQHandler+0xa2c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01d      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6b      	ldr	r2, [pc, #428]	; (80058e0 <HAL_DMA_IRQHandler+0xa30>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6a      	ldr	r2, [pc, #424]	; (80058e4 <HAL_DMA_IRQHandler+0xa34>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a68      	ldr	r2, [pc, #416]	; (80058e8 <HAL_DMA_IRQHandler+0xa38>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a67      	ldr	r2, [pc, #412]	; (80058ec <HAL_DMA_IRQHandler+0xa3c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a65      	ldr	r2, [pc, #404]	; (80058f0 <HAL_DMA_IRQHandler+0xa40>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_DMA_IRQHandler+0x8b8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a64      	ldr	r2, [pc, #400]	; (80058f4 <HAL_DMA_IRQHandler+0xa44>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d108      	bne.n	800577a <HAL_DMA_IRQHandler+0x8ca>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e007      	b.n	800578a <HAL_DMA_IRQHandler+0x8da>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	429a      	cmp	r2, r3
 8005794:	d307      	bcc.n	80057a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f2      	bne.n	800578a <HAL_DMA_IRQHandler+0x8da>
 80057a4:	e000      	b.n	80057a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057a6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2203      	movs	r2, #3
 80057c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057c6:	e003      	b.n	80057d0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8272 	beq.w	8005cbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
 80057e2:	e26c      	b.n	8005cbe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a43      	ldr	r2, [pc, #268]	; (80058f8 <HAL_DMA_IRQHandler+0xa48>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a42      	ldr	r2, [pc, #264]	; (80058fc <HAL_DMA_IRQHandler+0xa4c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01d      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a40      	ldr	r2, [pc, #256]	; (8005900 <HAL_DMA_IRQHandler+0xa50>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3f      	ldr	r2, [pc, #252]	; (8005904 <HAL_DMA_IRQHandler+0xa54>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3d      	ldr	r2, [pc, #244]	; (8005908 <HAL_DMA_IRQHandler+0xa58>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3c      	ldr	r2, [pc, #240]	; (800590c <HAL_DMA_IRQHandler+0xa5c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a3a      	ldr	r2, [pc, #232]	; (8005910 <HAL_DMA_IRQHandler+0xa60>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_DMA_IRQHandler+0x984>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a39      	ldr	r2, [pc, #228]	; (8005914 <HAL_DMA_IRQHandler+0xa64>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d101      	bne.n	8005838 <HAL_DMA_IRQHandler+0x988>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_DMA_IRQHandler+0x98a>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 823f 	beq.w	8005cbe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2204      	movs	r2, #4
 8005852:	409a      	lsls	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80cd 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xb48>
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80c7 	beq.w	80059f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2204      	movs	r2, #4
 8005874:	409a      	lsls	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d049      	beq.n	8005918 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8210 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a0:	e20a      	b.n	8005cb8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8206 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058b4:	e200      	b.n	8005cb8 <HAL_DMA_IRQHandler+0xe08>
 80058b6:	bf00      	nop
 80058b8:	40020010 	.word	0x40020010
 80058bc:	40020028 	.word	0x40020028
 80058c0:	40020040 	.word	0x40020040
 80058c4:	40020058 	.word	0x40020058
 80058c8:	40020070 	.word	0x40020070
 80058cc:	40020088 	.word	0x40020088
 80058d0:	400200a0 	.word	0x400200a0
 80058d4:	400200b8 	.word	0x400200b8
 80058d8:	40020410 	.word	0x40020410
 80058dc:	40020428 	.word	0x40020428
 80058e0:	40020440 	.word	0x40020440
 80058e4:	40020458 	.word	0x40020458
 80058e8:	40020470 	.word	0x40020470
 80058ec:	40020488 	.word	0x40020488
 80058f0:	400204a0 	.word	0x400204a0
 80058f4:	400204b8 	.word	0x400204b8
 80058f8:	58025408 	.word	0x58025408
 80058fc:	5802541c 	.word	0x5802541c
 8005900:	58025430 	.word	0x58025430
 8005904:	58025444 	.word	0x58025444
 8005908:	58025458 	.word	0x58025458
 800590c:	5802546c 	.word	0x5802546c
 8005910:	58025480 	.word	0x58025480
 8005914:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d160      	bne.n	80059e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a8c      	ldr	r2, [pc, #560]	; (8005b58 <HAL_DMA_IRQHandler+0xca8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a8a      	ldr	r2, [pc, #552]	; (8005b5c <HAL_DMA_IRQHandler+0xcac>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a89      	ldr	r2, [pc, #548]	; (8005b60 <HAL_DMA_IRQHandler+0xcb0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a87      	ldr	r2, [pc, #540]	; (8005b64 <HAL_DMA_IRQHandler+0xcb4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a86      	ldr	r2, [pc, #536]	; (8005b68 <HAL_DMA_IRQHandler+0xcb8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a84      	ldr	r2, [pc, #528]	; (8005b6c <HAL_DMA_IRQHandler+0xcbc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a83      	ldr	r2, [pc, #524]	; (8005b70 <HAL_DMA_IRQHandler+0xcc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a81      	ldr	r2, [pc, #516]	; (8005b74 <HAL_DMA_IRQHandler+0xcc4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <HAL_DMA_IRQHandler+0xcc8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a7e      	ldr	r2, [pc, #504]	; (8005b7c <HAL_DMA_IRQHandler+0xccc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7d      	ldr	r2, [pc, #500]	; (8005b80 <HAL_DMA_IRQHandler+0xcd0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7b      	ldr	r2, [pc, #492]	; (8005b84 <HAL_DMA_IRQHandler+0xcd4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7a      	ldr	r2, [pc, #488]	; (8005b88 <HAL_DMA_IRQHandler+0xcd8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a78      	ldr	r2, [pc, #480]	; (8005b8c <HAL_DMA_IRQHandler+0xcdc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a77      	ldr	r2, [pc, #476]	; (8005b90 <HAL_DMA_IRQHandler+0xce0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_IRQHandler+0xb12>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a75      	ldr	r2, [pc, #468]	; (8005b94 <HAL_DMA_IRQHandler+0xce4>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_IRQHandler+0xb24>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0208 	bic.w	r2, r2, #8
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e007      	b.n	80059e4 <HAL_DMA_IRQHandler+0xb34>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8165 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059f6:	e15f      	b.n	8005cb8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2202      	movs	r2, #2
 8005a02:	409a      	lsls	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80c5 	beq.w	8005b98 <HAL_DMA_IRQHandler+0xce8>
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80bf 	beq.w	8005b98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2202      	movs	r2, #2
 8005a24:	409a      	lsls	r2, r3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d018      	beq.n	8005a66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 813a 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a50:	e134      	b.n	8005cbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8130 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a64:	e12a      	b.n	8005cbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d168      	bne.n	8005b42 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a38      	ldr	r2, [pc, #224]	; (8005b58 <HAL_DMA_IRQHandler+0xca8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d04a      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a37      	ldr	r2, [pc, #220]	; (8005b5c <HAL_DMA_IRQHandler+0xcac>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d045      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <HAL_DMA_IRQHandler+0xcb0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d040      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a34      	ldr	r2, [pc, #208]	; (8005b64 <HAL_DMA_IRQHandler+0xcb4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d03b      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a32      	ldr	r2, [pc, #200]	; (8005b68 <HAL_DMA_IRQHandler+0xcb8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d036      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a31      	ldr	r2, [pc, #196]	; (8005b6c <HAL_DMA_IRQHandler+0xcbc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d031      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <HAL_DMA_IRQHandler+0xcc0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d02c      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2e      	ldr	r2, [pc, #184]	; (8005b74 <HAL_DMA_IRQHandler+0xcc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d027      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <HAL_DMA_IRQHandler+0xcc8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <HAL_DMA_IRQHandler+0xccc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01d      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a29      	ldr	r2, [pc, #164]	; (8005b80 <HAL_DMA_IRQHandler+0xcd0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a28      	ldr	r2, [pc, #160]	; (8005b84 <HAL_DMA_IRQHandler+0xcd4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a26      	ldr	r2, [pc, #152]	; (8005b88 <HAL_DMA_IRQHandler+0xcd8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a25      	ldr	r2, [pc, #148]	; (8005b8c <HAL_DMA_IRQHandler+0xcdc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a23      	ldr	r2, [pc, #140]	; (8005b90 <HAL_DMA_IRQHandler+0xce0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_DMA_IRQHandler+0xc60>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <HAL_DMA_IRQHandler+0xce4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <HAL_DMA_IRQHandler+0xc72>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0214 	bic.w	r2, r2, #20
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e007      	b.n	8005b32 <HAL_DMA_IRQHandler+0xc82>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 020a 	bic.w	r2, r2, #10
 8005b30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80b8 	beq.w	8005cbc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b54:	e0b2      	b.n	8005cbc <HAL_DMA_IRQHandler+0xe0c>
 8005b56:	bf00      	nop
 8005b58:	40020010 	.word	0x40020010
 8005b5c:	40020028 	.word	0x40020028
 8005b60:	40020040 	.word	0x40020040
 8005b64:	40020058 	.word	0x40020058
 8005b68:	40020070 	.word	0x40020070
 8005b6c:	40020088 	.word	0x40020088
 8005b70:	400200a0 	.word	0x400200a0
 8005b74:	400200b8 	.word	0x400200b8
 8005b78:	40020410 	.word	0x40020410
 8005b7c:	40020428 	.word	0x40020428
 8005b80:	40020440 	.word	0x40020440
 8005b84:	40020458 	.word	0x40020458
 8005b88:	40020470 	.word	0x40020470
 8005b8c:	40020488 	.word	0x40020488
 8005b90:	400204a0 	.word	0x400204a0
 8005b94:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	409a      	lsls	r2, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8088 	beq.w	8005cbe <HAL_DMA_IRQHandler+0xe0e>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8082 	beq.w	8005cbe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a41      	ldr	r2, [pc, #260]	; (8005cc4 <HAL_DMA_IRQHandler+0xe14>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <HAL_DMA_IRQHandler+0xe18>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3e      	ldr	r2, [pc, #248]	; (8005ccc <HAL_DMA_IRQHandler+0xe1c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <HAL_DMA_IRQHandler+0xe20>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a3b      	ldr	r2, [pc, #236]	; (8005cd4 <HAL_DMA_IRQHandler+0xe24>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a39      	ldr	r2, [pc, #228]	; (8005cd8 <HAL_DMA_IRQHandler+0xe28>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a38      	ldr	r2, [pc, #224]	; (8005cdc <HAL_DMA_IRQHandler+0xe2c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a36      	ldr	r2, [pc, #216]	; (8005ce0 <HAL_DMA_IRQHandler+0xe30>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a35      	ldr	r2, [pc, #212]	; (8005ce4 <HAL_DMA_IRQHandler+0xe34>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a33      	ldr	r2, [pc, #204]	; (8005ce8 <HAL_DMA_IRQHandler+0xe38>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a32      	ldr	r2, [pc, #200]	; (8005cec <HAL_DMA_IRQHandler+0xe3c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <HAL_DMA_IRQHandler+0xe40>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <HAL_DMA_IRQHandler+0xe44>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2d      	ldr	r2, [pc, #180]	; (8005cf8 <HAL_DMA_IRQHandler+0xe48>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <HAL_DMA_IRQHandler+0xe4c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xdaa>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2a      	ldr	r2, [pc, #168]	; (8005d00 <HAL_DMA_IRQHandler+0xe50>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <HAL_DMA_IRQHandler+0xdbc>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 021c 	bic.w	r2, r2, #28
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e007      	b.n	8005c7c <HAL_DMA_IRQHandler+0xdcc>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 020e 	bic.w	r2, r2, #14
 8005c7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	2201      	movs	r2, #1
 8005c86:	409a      	lsls	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e004      	b.n	8005cbe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cbe:	3728      	adds	r7, #40	; 0x28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40020010 	.word	0x40020010
 8005cc8:	40020028 	.word	0x40020028
 8005ccc:	40020040 	.word	0x40020040
 8005cd0:	40020058 	.word	0x40020058
 8005cd4:	40020070 	.word	0x40020070
 8005cd8:	40020088 	.word	0x40020088
 8005cdc:	400200a0 	.word	0x400200a0
 8005ce0:	400200b8 	.word	0x400200b8
 8005ce4:	40020410 	.word	0x40020410
 8005ce8:	40020428 	.word	0x40020428
 8005cec:	40020440 	.word	0x40020440
 8005cf0:	40020458 	.word	0x40020458
 8005cf4:	40020470 	.word	0x40020470
 8005cf8:	40020488 	.word	0x40020488
 8005cfc:	400204a0 	.word	0x400204a0
 8005d00:	400204b8 	.word	0x400204b8

08005d04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a84      	ldr	r2, [pc, #528]	; (8005f34 <DMA_SetConfig+0x230>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d072      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a82      	ldr	r2, [pc, #520]	; (8005f38 <DMA_SetConfig+0x234>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d06d      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a81      	ldr	r2, [pc, #516]	; (8005f3c <DMA_SetConfig+0x238>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d068      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a7f      	ldr	r2, [pc, #508]	; (8005f40 <DMA_SetConfig+0x23c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d063      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7e      	ldr	r2, [pc, #504]	; (8005f44 <DMA_SetConfig+0x240>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d05e      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7c      	ldr	r2, [pc, #496]	; (8005f48 <DMA_SetConfig+0x244>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d059      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a7b      	ldr	r2, [pc, #492]	; (8005f4c <DMA_SetConfig+0x248>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d054      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a79      	ldr	r2, [pc, #484]	; (8005f50 <DMA_SetConfig+0x24c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d04f      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a78      	ldr	r2, [pc, #480]	; (8005f54 <DMA_SetConfig+0x250>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d04a      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a76      	ldr	r2, [pc, #472]	; (8005f58 <DMA_SetConfig+0x254>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d045      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a75      	ldr	r2, [pc, #468]	; (8005f5c <DMA_SetConfig+0x258>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d040      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a73      	ldr	r2, [pc, #460]	; (8005f60 <DMA_SetConfig+0x25c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d03b      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a72      	ldr	r2, [pc, #456]	; (8005f64 <DMA_SetConfig+0x260>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d036      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a70      	ldr	r2, [pc, #448]	; (8005f68 <DMA_SetConfig+0x264>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d031      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6f      	ldr	r2, [pc, #444]	; (8005f6c <DMA_SetConfig+0x268>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d02c      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a6d      	ldr	r2, [pc, #436]	; (8005f70 <DMA_SetConfig+0x26c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d027      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6c      	ldr	r2, [pc, #432]	; (8005f74 <DMA_SetConfig+0x270>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d022      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6a      	ldr	r2, [pc, #424]	; (8005f78 <DMA_SetConfig+0x274>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a69      	ldr	r2, [pc, #420]	; (8005f7c <DMA_SetConfig+0x278>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d018      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a67      	ldr	r2, [pc, #412]	; (8005f80 <DMA_SetConfig+0x27c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a66      	ldr	r2, [pc, #408]	; (8005f84 <DMA_SetConfig+0x280>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <DMA_SetConfig+0x284>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <DMA_SetConfig+0x288>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <DMA_SetConfig+0x10a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a61      	ldr	r2, [pc, #388]	; (8005f90 <DMA_SetConfig+0x28c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <DMA_SetConfig+0x10e>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <DMA_SetConfig+0x110>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00d      	beq.n	8005e34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a3e      	ldr	r2, [pc, #248]	; (8005f34 <DMA_SetConfig+0x230>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3d      	ldr	r2, [pc, #244]	; (8005f38 <DMA_SetConfig+0x234>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3b      	ldr	r2, [pc, #236]	; (8005f3c <DMA_SetConfig+0x238>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a3a      	ldr	r2, [pc, #232]	; (8005f40 <DMA_SetConfig+0x23c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <DMA_SetConfig+0x240>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a37      	ldr	r2, [pc, #220]	; (8005f48 <DMA_SetConfig+0x244>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <DMA_SetConfig+0x248>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <DMA_SetConfig+0x24c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a32      	ldr	r2, [pc, #200]	; (8005f54 <DMA_SetConfig+0x250>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <DMA_SetConfig+0x254>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <DMA_SetConfig+0x258>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <DMA_SetConfig+0x25c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <DMA_SetConfig+0x260>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2b      	ldr	r2, [pc, #172]	; (8005f68 <DMA_SetConfig+0x264>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <DMA_SetConfig+0x268>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <DMA_SetConfig+0x1d0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <DMA_SetConfig+0x26c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <DMA_SetConfig+0x1d4>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <DMA_SetConfig+0x1d6>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d05a      	beq.n	8005f94 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	223f      	movs	r2, #63	; 0x3f
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005efc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d108      	bne.n	8005f20 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f1e:	e087      	b.n	8006030 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	60da      	str	r2, [r3, #12]
}
 8005f30:	e07e      	b.n	8006030 <DMA_SetConfig+0x32c>
 8005f32:	bf00      	nop
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	58025408 	.word	0x58025408
 8005f78:	5802541c 	.word	0x5802541c
 8005f7c:	58025430 	.word	0x58025430
 8005f80:	58025444 	.word	0x58025444
 8005f84:	58025458 	.word	0x58025458
 8005f88:	5802546c 	.word	0x5802546c
 8005f8c:	58025480 	.word	0x58025480
 8005f90:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a28      	ldr	r2, [pc, #160]	; (800603c <DMA_SetConfig+0x338>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <DMA_SetConfig+0x33c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <DMA_SetConfig+0x340>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a24      	ldr	r2, [pc, #144]	; (8006048 <DMA_SetConfig+0x344>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <DMA_SetConfig+0x348>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a21      	ldr	r2, [pc, #132]	; (8006050 <DMA_SetConfig+0x34c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1f      	ldr	r2, [pc, #124]	; (8006054 <DMA_SetConfig+0x350>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <DMA_SetConfig+0x2e0>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <DMA_SetConfig+0x354>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d101      	bne.n	8005fe8 <DMA_SetConfig+0x2e4>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <DMA_SetConfig+0x2e6>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d020      	beq.n	8006030 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	409a      	lsls	r2, r3
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d108      	bne.n	8006020 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	60da      	str	r2, [r3, #12]
}
 800601e:	e007      	b.n	8006030 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	58025408 	.word	0x58025408
 8006040:	5802541c 	.word	0x5802541c
 8006044:	58025430 	.word	0x58025430
 8006048:	58025444 	.word	0x58025444
 800604c:	58025458 	.word	0x58025458
 8006050:	5802546c 	.word	0x5802546c
 8006054:	58025480 	.word	0x58025480
 8006058:	58025494 	.word	0x58025494

0800605c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a42      	ldr	r2, [pc, #264]	; (8006174 <DMA_CalcBaseAndBitshift+0x118>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d04a      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a41      	ldr	r2, [pc, #260]	; (8006178 <DMA_CalcBaseAndBitshift+0x11c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d045      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a3f      	ldr	r2, [pc, #252]	; (800617c <DMA_CalcBaseAndBitshift+0x120>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d040      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3e      	ldr	r2, [pc, #248]	; (8006180 <DMA_CalcBaseAndBitshift+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d03b      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <DMA_CalcBaseAndBitshift+0x128>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d036      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3b      	ldr	r2, [pc, #236]	; (8006188 <DMA_CalcBaseAndBitshift+0x12c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d031      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a39      	ldr	r2, [pc, #228]	; (800618c <DMA_CalcBaseAndBitshift+0x130>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02c      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a38      	ldr	r2, [pc, #224]	; (8006190 <DMA_CalcBaseAndBitshift+0x134>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d027      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a36      	ldr	r2, [pc, #216]	; (8006194 <DMA_CalcBaseAndBitshift+0x138>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a35      	ldr	r2, [pc, #212]	; (8006198 <DMA_CalcBaseAndBitshift+0x13c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a33      	ldr	r2, [pc, #204]	; (800619c <DMA_CalcBaseAndBitshift+0x140>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a32      	ldr	r2, [pc, #200]	; (80061a0 <DMA_CalcBaseAndBitshift+0x144>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a30      	ldr	r2, [pc, #192]	; (80061a4 <DMA_CalcBaseAndBitshift+0x148>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2f      	ldr	r2, [pc, #188]	; (80061a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2d      	ldr	r2, [pc, #180]	; (80061ac <DMA_CalcBaseAndBitshift+0x150>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <DMA_CalcBaseAndBitshift+0xa8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2c      	ldr	r2, [pc, #176]	; (80061b0 <DMA_CalcBaseAndBitshift+0x154>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <DMA_CalcBaseAndBitshift+0xac>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <DMA_CalcBaseAndBitshift+0xae>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d024      	beq.n	8006158 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	3b10      	subs	r3, #16
 8006116:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <DMA_CalcBaseAndBitshift+0x158>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006128:	5cd3      	ldrb	r3, [r2, r3]
 800612a:	461a      	mov	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d908      	bls.n	8006148 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <DMA_CalcBaseAndBitshift+0x160>)
 800613e:	4013      	ands	r3, r2
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	659a      	str	r2, [r3, #88]	; 0x58
 8006146:	e00d      	b.n	8006164 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <DMA_CalcBaseAndBitshift+0x160>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6593      	str	r3, [r2, #88]	; 0x58
 8006156:	e005      	b.n	8006164 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40020010 	.word	0x40020010
 8006178:	40020028 	.word	0x40020028
 800617c:	40020040 	.word	0x40020040
 8006180:	40020058 	.word	0x40020058
 8006184:	40020070 	.word	0x40020070
 8006188:	40020088 	.word	0x40020088
 800618c:	400200a0 	.word	0x400200a0
 8006190:	400200b8 	.word	0x400200b8
 8006194:	40020410 	.word	0x40020410
 8006198:	40020428 	.word	0x40020428
 800619c:	40020440 	.word	0x40020440
 80061a0:	40020458 	.word	0x40020458
 80061a4:	40020470 	.word	0x40020470
 80061a8:	40020488 	.word	0x40020488
 80061ac:	400204a0 	.word	0x400204a0
 80061b0:	400204b8 	.word	0x400204b8
 80061b4:	aaaaaaab 	.word	0xaaaaaaab
 80061b8:	0800bfec 	.word	0x0800bfec
 80061bc:	fffffc00 	.word	0xfffffc00

080061c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d120      	bne.n	8006216 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d858      	bhi.n	800628e <DMA_CheckFifoParam+0xce>
 80061dc:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <DMA_CheckFifoParam+0x24>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006207 	.word	0x08006207
 80061ec:	080061f5 	.word	0x080061f5
 80061f0:	0800628f 	.word	0x0800628f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d048      	beq.n	8006292 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006204:	e045      	b.n	8006292 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800620e:	d142      	bne.n	8006296 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006214:	e03f      	b.n	8006296 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800621e:	d123      	bne.n	8006268 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	2b03      	cmp	r3, #3
 8006226:	d838      	bhi.n	800629a <DMA_CheckFifoParam+0xda>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <DMA_CheckFifoParam+0x70>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006241 	.word	0x08006241
 8006234:	08006247 	.word	0x08006247
 8006238:	08006241 	.word	0x08006241
 800623c:	08006259 	.word	0x08006259
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
        break;
 8006244:	e030      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d025      	beq.n	800629e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006256:	e022      	b.n	800629e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006260:	d11f      	bne.n	80062a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006266:	e01c      	b.n	80062a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	2b02      	cmp	r3, #2
 800626e:	d902      	bls.n	8006276 <DMA_CheckFifoParam+0xb6>
 8006270:	2b03      	cmp	r3, #3
 8006272:	d003      	beq.n	800627c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006274:	e018      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
        break;
 800627a:	e015      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
    break;
 800628c:	e00b      	b.n	80062a6 <DMA_CheckFifoParam+0xe6>
        break;
 800628e:	bf00      	nop
 8006290:	e00a      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006292:	bf00      	nop
 8006294:	e008      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        break;
 8006296:	bf00      	nop
 8006298:	e006      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        break;
 800629a:	bf00      	nop
 800629c:	e004      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        break;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
        break;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <DMA_CheckFifoParam+0xe8>
    break;
 80062a6:	bf00      	nop
    }
  }

  return status;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop

080062b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a38      	ldr	r2, [pc, #224]	; (80063ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d022      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a36      	ldr	r2, [pc, #216]	; (80063b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01d      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a35      	ldr	r2, [pc, #212]	; (80063b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d018      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a33      	ldr	r2, [pc, #204]	; (80063b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a32      	ldr	r2, [pc, #200]	; (80063bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a30      	ldr	r2, [pc, #192]	; (80063c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d009      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2f      	ldr	r2, [pc, #188]	; (80063c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2d      	ldr	r2, [pc, #180]	; (80063c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01a      	beq.n	8006356 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3b08      	subs	r3, #8
 8006328:	4a28      	ldr	r2, [pc, #160]	; (80063cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006344:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	2201      	movs	r2, #1
 800634e:	409a      	lsls	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006354:	e024      	b.n	80063a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	3b10      	subs	r3, #16
 800635e:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4a1c      	ldr	r2, [pc, #112]	; (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d806      	bhi.n	800637e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d902      	bls.n	800637e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3308      	adds	r3, #8
 800637c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006390:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 031f 	and.w	r3, r3, #31
 8006398:	2201      	movs	r2, #1
 800639a:	409a      	lsls	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	58025408 	.word	0x58025408
 80063b0:	5802541c 	.word	0x5802541c
 80063b4:	58025430 	.word	0x58025430
 80063b8:	58025444 	.word	0x58025444
 80063bc:	58025458 	.word	0x58025458
 80063c0:	5802546c 	.word	0x5802546c
 80063c4:	58025480 	.word	0x58025480
 80063c8:	58025494 	.word	0x58025494
 80063cc:	cccccccd 	.word	0xcccccccd
 80063d0:	16009600 	.word	0x16009600
 80063d4:	58025880 	.word	0x58025880
 80063d8:	aaaaaaab 	.word	0xaaaaaaab
 80063dc:	400204b8 	.word	0x400204b8
 80063e0:	4002040f 	.word	0x4002040f
 80063e4:	10008200 	.word	0x10008200
 80063e8:	40020880 	.word	0x40020880

080063ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04a      	beq.n	8006498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b08      	cmp	r3, #8
 8006406:	d847      	bhi.n	8006498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d022      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d01d      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a22      	ldr	r2, [pc, #136]	; (80064ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d018      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a21      	ldr	r2, [pc, #132]	; (80064b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00e      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1e      	ldr	r2, [pc, #120]	; (80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d009      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d004      	beq.n	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d101      	bne.n	800645c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800645c:	2300      	movs	r3, #0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006474:	671a      	str	r2, [r3, #112]	; 0x70
 8006476:	e009      	b.n	800648c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4b14      	ldr	r3, [pc, #80]	; (80064cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800648a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3b01      	subs	r3, #1
 8006490:	2201      	movs	r2, #1
 8006492:	409a      	lsls	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	58025408 	.word	0x58025408
 80064a8:	5802541c 	.word	0x5802541c
 80064ac:	58025430 	.word	0x58025430
 80064b0:	58025444 	.word	0x58025444
 80064b4:	58025458 	.word	0x58025458
 80064b8:	5802546c 	.word	0x5802546c
 80064bc:	58025480 	.word	0x58025480
 80064c0:	58025494 	.word	0x58025494
 80064c4:	1600963f 	.word	0x1600963f
 80064c8:	58025940 	.word	0x58025940
 80064cc:	1000823f 	.word	0x1000823f
 80064d0:	40020940 	.word	0x40020940

080064d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b089      	sub	sp, #36	; 0x24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80064e2:	4b86      	ldr	r3, [pc, #536]	; (80066fc <HAL_GPIO_Init+0x228>)
 80064e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064e6:	e18c      	b.n	8006802 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 817e 	beq.w	80067fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d00b      	beq.n	8006520 <HAL_GPIO_Init+0x4c>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d007      	beq.n	8006520 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006514:	2b11      	cmp	r3, #17
 8006516:	d003      	beq.n	8006520 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b12      	cmp	r3, #18
 800651e:	d130      	bne.n	8006582 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	2203      	movs	r2, #3
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	43db      	mvns	r3, r3
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4013      	ands	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4313      	orrs	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006556:	2201      	movs	r2, #1
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4013      	ands	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	f003 0201 	and.w	r2, r3, #1
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	2203      	movs	r2, #3
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4013      	ands	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0xee>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b12      	cmp	r3, #18
 80065c0:	d123      	bne.n	800660a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	08da      	lsrs	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3208      	adds	r2, #8
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	220f      	movs	r2, #15
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	08da      	lsrs	r2, r3, #3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3208      	adds	r2, #8
 8006604:	69b9      	ldr	r1, [r7, #24]
 8006606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	2203      	movs	r2, #3
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43db      	mvns	r3, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4013      	ands	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 0203 	and.w	r2, r3, #3
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4313      	orrs	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80d8 	beq.w	80067fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800664c:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <HAL_GPIO_Init+0x22c>)
 800664e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006652:	4a2b      	ldr	r2, [pc, #172]	; (8006700 <HAL_GPIO_Init+0x22c>)
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800665c:	4b28      	ldr	r3, [pc, #160]	; (8006700 <HAL_GPIO_Init+0x22c>)
 800665e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800666a:	4a26      	ldr	r2, [pc, #152]	; (8006704 <HAL_GPIO_Init+0x230>)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	089b      	lsrs	r3, r3, #2
 8006670:	3302      	adds	r3, #2
 8006672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	220f      	movs	r2, #15
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <HAL_GPIO_Init+0x234>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_GPIO_Init+0x258>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a1c      	ldr	r2, [pc, #112]	; (800670c <HAL_GPIO_Init+0x238>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02b      	beq.n	80066f6 <HAL_GPIO_Init+0x222>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1b      	ldr	r2, [pc, #108]	; (8006710 <HAL_GPIO_Init+0x23c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d025      	beq.n	80066f2 <HAL_GPIO_Init+0x21e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_GPIO_Init+0x240>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01f      	beq.n	80066ee <HAL_GPIO_Init+0x21a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_GPIO_Init+0x244>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d019      	beq.n	80066ea <HAL_GPIO_Init+0x216>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_GPIO_Init+0x248>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_GPIO_Init+0x212>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a17      	ldr	r2, [pc, #92]	; (8006720 <HAL_GPIO_Init+0x24c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00d      	beq.n	80066e2 <HAL_GPIO_Init+0x20e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a16      	ldr	r2, [pc, #88]	; (8006724 <HAL_GPIO_Init+0x250>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <HAL_GPIO_Init+0x20a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a15      	ldr	r2, [pc, #84]	; (8006728 <HAL_GPIO_Init+0x254>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <HAL_GPIO_Init+0x206>
 80066d6:	2309      	movs	r3, #9
 80066d8:	e029      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066da:	230a      	movs	r3, #10
 80066dc:	e027      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066de:	2307      	movs	r3, #7
 80066e0:	e025      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066e2:	2306      	movs	r3, #6
 80066e4:	e023      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066e6:	2305      	movs	r3, #5
 80066e8:	e021      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066ea:	2304      	movs	r3, #4
 80066ec:	e01f      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066ee:	2303      	movs	r3, #3
 80066f0:	e01d      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e01b      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e019      	b.n	800672e <HAL_GPIO_Init+0x25a>
 80066fa:	bf00      	nop
 80066fc:	58000080 	.word	0x58000080
 8006700:	58024400 	.word	0x58024400
 8006704:	58000400 	.word	0x58000400
 8006708:	58020000 	.word	0x58020000
 800670c:	58020400 	.word	0x58020400
 8006710:	58020800 	.word	0x58020800
 8006714:	58020c00 	.word	0x58020c00
 8006718:	58021000 	.word	0x58021000
 800671c:	58021400 	.word	0x58021400
 8006720:	58021800 	.word	0x58021800
 8006724:	58021c00 	.word	0x58021c00
 8006728:	58022400 	.word	0x58022400
 800672c:	2300      	movs	r3, #0
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	f002 0203 	and.w	r2, r2, #3
 8006734:	0092      	lsls	r2, r2, #2
 8006736:	4093      	lsls	r3, r2
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4313      	orrs	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800673e:	4938      	ldr	r1, [pc, #224]	; (8006820 <HAL_GPIO_Init+0x34c>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	43db      	mvns	r3, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	f47f ae6b 	bne.w	80064e8 <HAL_GPIO_Init+0x14>
  }
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	3724      	adds	r7, #36	; 0x24
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	58000400 	.word	0x58000400

08006824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
 8006830:	4613      	mov	r3, r2
 8006832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006840:	e003      	b.n	800684a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006842:	887b      	ldrh	r3, [r7, #2]
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	4603      	mov	r3, r0
 800685e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006864:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 feeb 	bl	8000658 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <HAL_PWREx_ConfigSupply+0x70>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b04      	cmp	r3, #4
 800689e:	d00a      	beq.n	80068b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80068a0:	4b16      	ldr	r3, [pc, #88]	; (80068fc <HAL_PWREx_ConfigSupply+0x70>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e01f      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e01d      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80068b6:	4b11      	ldr	r3, [pc, #68]	; (80068fc <HAL_PWREx_ConfigSupply+0x70>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f023 0207 	bic.w	r2, r3, #7
 80068be:	490f      	ldr	r1, [pc, #60]	; (80068fc <HAL_PWREx_ConfigSupply+0x70>)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80068c6:	f7fa ff0b 	bl	80016e0 <HAL_GetTick>
 80068ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068cc:	e009      	b.n	80068e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80068ce:	f7fa ff07 	bl	80016e0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068dc:	d901      	bls.n	80068e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e007      	b.n	80068f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_PWREx_ConfigSupply+0x70>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ee:	d1ee      	bne.n	80068ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	58024800 	.word	0x58024800

08006900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08c      	sub	sp, #48	; 0x30
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e37a      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8087 	beq.w	8006a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006920:	4ba0      	ldr	r3, [pc, #640]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006928:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800692a:	4b9e      	ldr	r3, [pc, #632]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b10      	cmp	r3, #16
 8006934:	d007      	beq.n	8006946 <HAL_RCC_OscConfig+0x46>
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2b18      	cmp	r3, #24
 800693a:	d110      	bne.n	800695e <HAL_RCC_OscConfig+0x5e>
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d10b      	bne.n	800695e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006946:	4b97      	ldr	r3, [pc, #604]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d06c      	beq.n	8006a2c <HAL_RCC_OscConfig+0x12c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d168      	bne.n	8006a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e354      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006966:	d106      	bne.n	8006976 <HAL_RCC_OscConfig+0x76>
 8006968:	4b8e      	ldr	r3, [pc, #568]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a8d      	ldr	r2, [pc, #564]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 800696e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	e02e      	b.n	80069d4 <HAL_RCC_OscConfig+0xd4>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10c      	bne.n	8006998 <HAL_RCC_OscConfig+0x98>
 800697e:	4b89      	ldr	r3, [pc, #548]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a88      	ldr	r2, [pc, #544]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	4b86      	ldr	r3, [pc, #536]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a85      	ldr	r2, [pc, #532]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e01d      	b.n	80069d4 <HAL_RCC_OscConfig+0xd4>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069a0:	d10c      	bne.n	80069bc <HAL_RCC_OscConfig+0xbc>
 80069a2:	4b80      	ldr	r3, [pc, #512]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a7f      	ldr	r2, [pc, #508]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b7d      	ldr	r3, [pc, #500]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a7c      	ldr	r2, [pc, #496]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e00b      	b.n	80069d4 <HAL_RCC_OscConfig+0xd4>
 80069bc:	4b79      	ldr	r3, [pc, #484]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a78      	ldr	r2, [pc, #480]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	4b76      	ldr	r3, [pc, #472]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a75      	ldr	r2, [pc, #468]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fa fe80 	bl	80016e0 <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069e4:	f7fa fe7c 	bl	80016e0 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e308      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069f6:	4b6b      	ldr	r3, [pc, #428]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0xe4>
 8006a02:	e014      	b.n	8006a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fa fe6c 	bl	80016e0 <HAL_GetTick>
 8006a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fa fe68 	bl	80016e0 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	; 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e2f4      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a1e:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0x10c>
 8006a2a:	e000      	b.n	8006a2e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06d      	beq.n	8006b16 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a3a:	4b5a      	ldr	r3, [pc, #360]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a44:	4b57      	ldr	r3, [pc, #348]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_RCC_OscConfig+0x160>
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	d11b      	bne.n	8006a8e <HAL_RCC_OscConfig+0x18e>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d116      	bne.n	8006a8e <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a60:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_OscConfig+0x178>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e2c7      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b4a      	ldr	r3, [pc, #296]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	4947      	ldr	r1, [pc, #284]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a8c:	e043      	b.n	8006b16 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d026      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a96:	4b43      	ldr	r3, [pc, #268]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 0219 	bic.w	r2, r3, #25
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4940      	ldr	r1, [pc, #256]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fa fe1a 	bl	80016e0 <HAL_GetTick>
 8006aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fa fe16 	bl	80016e0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e2a2      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac2:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d0f0      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ace:	4b35      	ldr	r3, [pc, #212]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	4931      	ldr	r1, [pc, #196]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	604b      	str	r3, [r1, #4]
 8006ae2:	e018      	b.n	8006b16 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae4:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a2e      	ldr	r2, [pc, #184]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af0:	f7fa fdf6 	bl	80016e0 <HAL_GetTick>
 8006af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af8:	f7fa fdf2 	bl	80016e0 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e27e      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b0a:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d06c      	beq.n	8006bfc <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d007      	beq.n	8006b48 <HAL_RCC_OscConfig+0x248>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b18      	cmp	r3, #24
 8006b3c:	d11b      	bne.n	8006b76 <HAL_RCC_OscConfig+0x276>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d116      	bne.n	8006b76 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_RCC_OscConfig+0x260>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e253      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b60:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	061b      	lsls	r3, r3, #24
 8006b6e:	490d      	ldr	r1, [pc, #52]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b74:	e042      	b.n	8006bfc <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d025      	beq.n	8006bca <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <HAL_RCC_OscConfig+0x2a4>)
 8006b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8a:	f7fa fda9 	bl	80016e0 <HAL_GetTick>
 8006b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b92:	f7fa fda5 	bl	80016e0 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d903      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e231      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
 8006ba4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ba8:	4ba3      	ldr	r3, [pc, #652]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ee      	beq.n	8006b92 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bb4:	4ba0      	ldr	r3, [pc, #640]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	499d      	ldr	r1, [pc, #628]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60cb      	str	r3, [r1, #12]
 8006bc8:	e018      	b.n	8006bfc <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bca:	4b9b      	ldr	r3, [pc, #620]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a9a      	ldr	r2, [pc, #616]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd6:	f7fa fd83 	bl	80016e0 <HAL_GetTick>
 8006bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006bde:	f7fa fd7f 	bl	80016e0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e20b      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bf0:	4b91      	ldr	r3, [pc, #580]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1f0      	bne.n	8006bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d036      	beq.n	8006c76 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d019      	beq.n	8006c44 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c10:	4b89      	ldr	r3, [pc, #548]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c14:	4a88      	ldr	r2, [pc, #544]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fa fd60 	bl	80016e0 <HAL_GetTick>
 8006c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c24:	f7fa fd5c 	bl	80016e0 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e1e8      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c36:	4b80      	ldr	r3, [pc, #512]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0f0      	beq.n	8006c24 <HAL_RCC_OscConfig+0x324>
 8006c42:	e018      	b.n	8006c76 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c44:	4b7c      	ldr	r3, [pc, #496]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	4a7b      	ldr	r2, [pc, #492]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fa fd46 	bl	80016e0 <HAL_GetTick>
 8006c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c58:	f7fa fd42 	bl	80016e0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e1ce      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c6a:	4b73      	ldr	r3, [pc, #460]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d036      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c8a:	4b6b      	ldr	r3, [pc, #428]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a6a      	ldr	r2, [pc, #424]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c96:	f7fa fd23 	bl	80016e0 <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c9e:	f7fa fd1f 	bl	80016e0 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e1ab      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006cb0:	4b61      	ldr	r3, [pc, #388]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCC_OscConfig+0x39e>
 8006cbc:	e018      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cbe:	4b5e      	ldr	r3, [pc, #376]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a5d      	ldr	r2, [pc, #372]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cca:	f7fa fd09 	bl	80016e0 <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006cd2:	f7fa fd05 	bl	80016e0 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e191      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ce4:	4b54      	ldr	r3, [pc, #336]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f0      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8081 	beq.w	8006e00 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cfe:	4b4f      	ldr	r3, [pc, #316]	; (8006e3c <HAL_RCC_OscConfig+0x53c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a4e      	ldr	r2, [pc, #312]	; (8006e3c <HAL_RCC_OscConfig+0x53c>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d0a:	f7fa fce9 	bl	80016e0 <HAL_GetTick>
 8006d0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fa fce5 	bl	80016e0 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b64      	cmp	r3, #100	; 0x64
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e171      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d24:	4b45      	ldr	r3, [pc, #276]	; (8006e3c <HAL_RCC_OscConfig+0x53c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x446>
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a3e      	ldr	r2, [pc, #248]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	e02d      	b.n	8006da2 <HAL_RCC_OscConfig+0x4a2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x468>
 8006d4e:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a36      	ldr	r2, [pc, #216]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e01c      	b.n	8006da2 <HAL_RCC_OscConfig+0x4a2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	d10c      	bne.n	8006d8a <HAL_RCC_OscConfig+0x48a>
 8006d70:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	4a30      	ldr	r2, [pc, #192]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d76:	f043 0304 	orr.w	r3, r3, #4
 8006d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a2d      	ldr	r2, [pc, #180]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	e00b      	b.n	8006da2 <HAL_RCC_OscConfig+0x4a2>
 8006d8a:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4a2a      	ldr	r2, [pc, #168]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d90:	f023 0301 	bic.w	r3, r3, #1
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
 8006d96:	4b28      	ldr	r3, [pc, #160]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a27      	ldr	r2, [pc, #156]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006d9c:	f023 0304 	bic.w	r3, r3, #4
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d015      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006daa:	f7fa fc99 	bl	80016e0 <HAL_GetTick>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006db0:	e00a      	b.n	8006dc8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db2:	f7fa fc95 	bl	80016e0 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e11f      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ee      	beq.n	8006db2 <HAL_RCC_OscConfig+0x4b2>
 8006dd4:	e014      	b.n	8006e00 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd6:	f7fa fc83 	bl	80016e0 <HAL_GetTick>
 8006dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dde:	f7fa fc7f 	bl	80016e0 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e109      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006df4:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ee      	bne.n	8006dde <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80fe 	beq.w	8007006 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e12:	2b18      	cmp	r3, #24
 8006e14:	f000 80b9 	beq.w	8006f8a <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	f040 809a 	bne.w	8006f56 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <HAL_RCC_OscConfig+0x538>)
 8006e28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2e:	f7fa fc57 	bl	80016e0 <HAL_GetTick>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e34:	e00d      	b.n	8006e52 <HAL_RCC_OscConfig+0x552>
 8006e36:	bf00      	nop
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e40:	f7fa fc4e 	bl	80016e0 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e0da      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e52:	4b6f      	ldr	r3, [pc, #444]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e5e:	4b6c      	ldr	r3, [pc, #432]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e62:	4b6c      	ldr	r3, [pc, #432]	; (8007014 <HAL_RCC_OscConfig+0x714>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e6e:	0112      	lsls	r2, r2, #4
 8006e70:	430a      	orrs	r2, r1
 8006e72:	4967      	ldr	r1, [pc, #412]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	628b      	str	r3, [r1, #40]	; 0x28
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	3b01      	subs	r3, #1
 8006e88:	025b      	lsls	r3, r3, #9
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	3b01      	subs	r3, #1
 8006e94:	041b      	lsls	r3, r3, #16
 8006e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ea8:	4959      	ldr	r1, [pc, #356]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006eae:	4b58      	ldr	r3, [pc, #352]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	4a57      	ldr	r2, [pc, #348]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006eba:	4b55      	ldr	r3, [pc, #340]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebe:	4b56      	ldr	r3, [pc, #344]	; (8007018 <HAL_RCC_OscConfig+0x718>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ec6:	00d2      	lsls	r2, r2, #3
 8006ec8:	4951      	ldr	r1, [pc, #324]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ece:	4b50      	ldr	r3, [pc, #320]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	f023 020c 	bic.w	r2, r3, #12
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	494d      	ldr	r1, [pc, #308]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ee0:	4b4b      	ldr	r3, [pc, #300]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	f023 0202 	bic.w	r2, r3, #2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eec:	4948      	ldr	r1, [pc, #288]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ef2:	4b47      	ldr	r3, [pc, #284]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	4a46      	ldr	r2, [pc, #280]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efe:	4b44      	ldr	r3, [pc, #272]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	4a43      	ldr	r2, [pc, #268]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006f0a:	4b41      	ldr	r3, [pc, #260]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a40      	ldr	r2, [pc, #256]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f16:	4b3e      	ldr	r3, [pc, #248]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	4a3d      	ldr	r2, [pc, #244]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f22:	4b3b      	ldr	r3, [pc, #236]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a3a      	ldr	r2, [pc, #232]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fa fbd7 	bl	80016e0 <HAL_GetTick>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f36:	f7fa fbd3 	bl	80016e0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e05f      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f48:	4b31      	ldr	r3, [pc, #196]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x636>
 8006f54:	e057      	b.n	8007006 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b2e      	ldr	r3, [pc, #184]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f62:	f7fa fbbd 	bl	80016e0 <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f6a:	f7fa fbb9 	bl	80016e0 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e045      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f7c:	4b24      	ldr	r3, [pc, #144]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <HAL_RCC_OscConfig+0x66a>
 8006f88:	e03d      	b.n	8007006 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f8a:	4b21      	ldr	r3, [pc, #132]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f90:	4b1f      	ldr	r3, [pc, #124]	; (8007010 <HAL_RCC_OscConfig+0x710>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d031      	beq.n	8007002 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f003 0203 	and.w	r2, r3, #3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d12a      	bne.n	8007002 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d122      	bne.n	8007002 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d11a      	bne.n	8007002 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	0a5b      	lsrs	r3, r3, #9
 8006fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d111      	bne.n	8007002 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d108      	bne.n	8007002 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	0e1b      	lsrs	r3, r3, #24
 8006ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d001      	beq.n	8007006 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3730      	adds	r7, #48	; 0x30
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	58024400 	.word	0x58024400
 8007014:	fffffc0c 	.word	0xfffffc0c
 8007018:	ffff0007 	.word	0xffff0007

0800701c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e19c      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007030:	4b8a      	ldr	r3, [pc, #552]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d910      	bls.n	8007060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703e:	4b87      	ldr	r3, [pc, #540]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 020f 	bic.w	r2, r3, #15
 8007046:	4985      	ldr	r1, [pc, #532]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800704e:	4b83      	ldr	r3, [pc, #524]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e184      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	4b7b      	ldr	r3, [pc, #492]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007078:	429a      	cmp	r2, r3
 800707a:	d908      	bls.n	800708e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800707c:	4b78      	ldr	r3, [pc, #480]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	4975      	ldr	r1, [pc, #468]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800708a:	4313      	orrs	r3, r2
 800708c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	4b70      	ldr	r3, [pc, #448]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d908      	bls.n	80070bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070aa:	4b6d      	ldr	r3, [pc, #436]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	496a      	ldr	r1, [pc, #424]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699a      	ldr	r2, [r3, #24]
 80070cc:	4b64      	ldr	r3, [pc, #400]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d908      	bls.n	80070ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070d8:	4b61      	ldr	r3, [pc, #388]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	495e      	ldr	r1, [pc, #376]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d010      	beq.n	8007118 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69da      	ldr	r2, [r3, #28]
 80070fa:	4b59      	ldr	r3, [pc, #356]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007102:	429a      	cmp	r2, r3
 8007104:	d908      	bls.n	8007118 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007106:	4b56      	ldr	r3, [pc, #344]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	4953      	ldr	r1, [pc, #332]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007114:	4313      	orrs	r3, r2
 8007116:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	429a      	cmp	r2, r3
 8007132:	d908      	bls.n	8007146 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	4b4a      	ldr	r3, [pc, #296]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f023 020f 	bic.w	r2, r3, #15
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	4947      	ldr	r1, [pc, #284]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007142:	4313      	orrs	r3, r2
 8007144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d055      	beq.n	80071fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007152:	4b43      	ldr	r3, [pc, #268]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	4940      	ldr	r1, [pc, #256]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007160:	4313      	orrs	r3, r2
 8007162:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d107      	bne.n	800717c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800716c:	4b3c      	ldr	r3, [pc, #240]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d121      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0f6      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d107      	bne.n	8007194 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007184:	4b36      	ldr	r3, [pc, #216]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d115      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e0ea      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d107      	bne.n	80071ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800719c:	4b30      	ldr	r3, [pc, #192]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d109      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e0de      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071ac:	4b2c      	ldr	r3, [pc, #176]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0d6      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071bc:	4b28      	ldr	r3, [pc, #160]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f023 0207 	bic.w	r2, r3, #7
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4925      	ldr	r1, [pc, #148]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ce:	f7fa fa87 	bl	80016e0 <HAL_GetTick>
 80071d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071d6:	f7fa fa83 	bl	80016e0 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e0be      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ec:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d1eb      	bne.n	80071d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d010      	beq.n	800722c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	429a      	cmp	r2, r3
 8007218:	d208      	bcs.n	800722c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800721a:	4b11      	ldr	r3, [pc, #68]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f023 020f 	bic.w	r2, r3, #15
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	490e      	ldr	r1, [pc, #56]	; (8007260 <HAL_RCC_ClockConfig+0x244>)
 8007228:	4313      	orrs	r3, r2
 800722a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800722c:	4b0b      	ldr	r3, [pc, #44]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d214      	bcs.n	8007264 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b08      	ldr	r3, [pc, #32]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 020f 	bic.w	r2, r3, #15
 8007242:	4906      	ldr	r1, [pc, #24]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <HAL_RCC_ClockConfig+0x240>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d005      	beq.n	8007264 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e086      	b.n	800736a <HAL_RCC_ClockConfig+0x34e>
 800725c:	52002000 	.word	0x52002000
 8007260:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d010      	beq.n	8007292 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	4b3f      	ldr	r3, [pc, #252]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800727c:	429a      	cmp	r2, r3
 800727e:	d208      	bcs.n	8007292 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007280:	4b3c      	ldr	r3, [pc, #240]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	4939      	ldr	r1, [pc, #228]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 800728e:	4313      	orrs	r3, r2
 8007290:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d010      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	4b34      	ldr	r3, [pc, #208]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d208      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	492e      	ldr	r1, [pc, #184]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d010      	beq.n	80072ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	4b28      	ldr	r3, [pc, #160]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d8:	429a      	cmp	r2, r3
 80072da:	d208      	bcs.n	80072ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072dc:	4b25      	ldr	r3, [pc, #148]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	4922      	ldr	r1, [pc, #136]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d010      	beq.n	800731c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007306:	429a      	cmp	r2, r3
 8007308:	d208      	bcs.n	800731c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	4917      	ldr	r1, [pc, #92]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 8007318:	4313      	orrs	r3, r2
 800731a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800731c:	f000 f834 	bl	8007388 <HAL_RCC_GetSysClockFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b14      	ldr	r3, [pc, #80]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	4912      	ldr	r1, [pc, #72]	; (8007378 <HAL_RCC_ClockConfig+0x35c>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <HAL_RCC_ClockConfig+0x358>)
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	4a0d      	ldr	r2, [pc, #52]	; (8007378 <HAL_RCC_ClockConfig+0x35c>)
 8007344:	5cd3      	ldrb	r3, [r2, r3]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_RCC_ClockConfig+0x360>)
 8007352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007354:	4a0a      	ldr	r2, [pc, #40]	; (8007380 <HAL_RCC_ClockConfig+0x364>)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_RCC_ClockConfig+0x368>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fa f974 	bl	800164c <HAL_InitTick>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	58024400 	.word	0x58024400
 8007378:	0800bfdc 	.word	0x0800bfdc
 800737c:	24000008 	.word	0x24000008
 8007380:	24000004 	.word	0x24000004
 8007384:	2400000c 	.word	0x2400000c

08007388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007388:	b480      	push	{r7}
 800738a:	b089      	sub	sp, #36	; 0x24
 800738c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800738e:	4bb3      	ldr	r3, [pc, #716]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007396:	2b18      	cmp	r3, #24
 8007398:	f200 8155 	bhi.w	8007646 <HAL_RCC_GetSysClockFreq+0x2be>
 800739c:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	08007409 	.word	0x08007409
 80073a8:	08007647 	.word	0x08007647
 80073ac:	08007647 	.word	0x08007647
 80073b0:	08007647 	.word	0x08007647
 80073b4:	08007647 	.word	0x08007647
 80073b8:	08007647 	.word	0x08007647
 80073bc:	08007647 	.word	0x08007647
 80073c0:	08007647 	.word	0x08007647
 80073c4:	0800742f 	.word	0x0800742f
 80073c8:	08007647 	.word	0x08007647
 80073cc:	08007647 	.word	0x08007647
 80073d0:	08007647 	.word	0x08007647
 80073d4:	08007647 	.word	0x08007647
 80073d8:	08007647 	.word	0x08007647
 80073dc:	08007647 	.word	0x08007647
 80073e0:	08007647 	.word	0x08007647
 80073e4:	08007435 	.word	0x08007435
 80073e8:	08007647 	.word	0x08007647
 80073ec:	08007647 	.word	0x08007647
 80073f0:	08007647 	.word	0x08007647
 80073f4:	08007647 	.word	0x08007647
 80073f8:	08007647 	.word	0x08007647
 80073fc:	08007647 	.word	0x08007647
 8007400:	08007647 	.word	0x08007647
 8007404:	0800743b 	.word	0x0800743b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007408:	4b94      	ldr	r3, [pc, #592]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007414:	4b91      	ldr	r3, [pc, #580]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	08db      	lsrs	r3, r3, #3
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	4a90      	ldr	r2, [pc, #576]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
 8007424:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007426:	e111      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007428:	4b8d      	ldr	r3, [pc, #564]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800742a:	61bb      	str	r3, [r7, #24]
    break;
 800742c:	e10e      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800742e:	4b8d      	ldr	r3, [pc, #564]	; (8007664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007430:	61bb      	str	r3, [r7, #24]
    break;
 8007432:	e10b      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007434:	4b8c      	ldr	r3, [pc, #560]	; (8007668 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007436:	61bb      	str	r3, [r7, #24]
    break;
 8007438:	e108      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800743a:	4b88      	ldr	r3, [pc, #544]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007444:	4b85      	ldr	r3, [pc, #532]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800744e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007450:	4b82      	ldr	r3, [pc, #520]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800745a:	4b80      	ldr	r3, [pc, #512]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	08db      	lsrs	r3, r3, #3
 8007460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80e1 	beq.w	8007640 <HAL_RCC_GetSysClockFreq+0x2b8>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b02      	cmp	r3, #2
 8007482:	f000 8083 	beq.w	800758c <HAL_RCC_GetSysClockFreq+0x204>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b02      	cmp	r3, #2
 800748a:	f200 80a1 	bhi.w	80075d0 <HAL_RCC_GetSysClockFreq+0x248>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0x114>
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d056      	beq.n	8007548 <HAL_RCC_GetSysClockFreq+0x1c0>
 800749a:	e099      	b.n	80075d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749c:	4b6f      	ldr	r3, [pc, #444]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0320 	and.w	r3, r3, #32
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d02d      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a8:	4b6c      	ldr	r3, [pc, #432]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	4a6b      	ldr	r2, [pc, #428]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b62      	ldr	r3, [pc, #392]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e4>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007502:	e087      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007670 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b51      	ldr	r3, [pc, #324]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a02 	vldr	s12, [r7, #8]
 800752a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e4>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e065      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007674 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b40      	ldr	r3, [pc, #256]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a02 	vldr	s12, [r7, #8]
 800756e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	e043      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007678 <HAL_RCC_GetSysClockFreq+0x2f0>
 800759a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759e:	4b2f      	ldr	r3, [pc, #188]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80075b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ce:	e021      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007674 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e2:	4b1e      	ldr	r3, [pc, #120]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e4>
 80075fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007612:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	0a5b      	lsrs	r3, r3, #9
 800761a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761e:	3301      	adds	r3, #1
 8007620:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800762c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007638:	ee17 3a90 	vmov	r3, s15
 800763c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800763e:	e005      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    break;
 8007644:	e002      	b.n	800764c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007646:	4b07      	ldr	r3, [pc, #28]	; (8007664 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007648:	61bb      	str	r3, [r7, #24]
    break;
 800764a:	bf00      	nop
  }

  return sysclockfreq;
 800764c:	69bb      	ldr	r3, [r7, #24]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3724      	adds	r7, #36	; 0x24
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	03d09000 	.word	0x03d09000
 8007664:	003d0900 	.word	0x003d0900
 8007668:	007a1200 	.word	0x007a1200
 800766c:	46000000 	.word	0x46000000
 8007670:	4c742400 	.word	0x4c742400
 8007674:	4a742400 	.word	0x4a742400
 8007678:	4af42400 	.word	0x4af42400

0800767c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007682:	f7ff fe81 	bl	8007388 <HAL_RCC_GetSysClockFreq>
 8007686:	4602      	mov	r2, r0
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <HAL_RCC_GetHCLKFreq+0x50>)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	490f      	ldr	r1, [pc, #60]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007694:	5ccb      	ldrb	r3, [r1, r3]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <HAL_RCC_GetHCLKFreq+0x50>)
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80076aa:	5cd3      	ldrb	r3, [r2, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	fa22 f303 	lsr.w	r3, r2, r3
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80076b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076ba:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076c0:	4b04      	ldr	r3, [pc, #16]	; (80076d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80076c2:	681b      	ldr	r3, [r3, #0]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	58024400 	.word	0x58024400
 80076d0:	0800bfdc 	.word	0x0800bfdc
 80076d4:	24000008 	.word	0x24000008
 80076d8:	24000004 	.word	0x24000004

080076dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076e0:	f7ff ffcc 	bl	800767c <HAL_RCC_GetHCLKFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4904      	ldr	r1, [pc, #16]	; (8007704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	58024400 	.word	0x58024400
 8007704:	0800bfdc 	.word	0x0800bfdc

08007708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800770c:	f7ff ffb6 	bl	800767c <HAL_RCC_GetHCLKFreq>
 8007710:	4602      	mov	r2, r0
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	4904      	ldr	r1, [pc, #16]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800771e:	5ccb      	ldrb	r3, [r1, r3]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	58024400 	.word	0x58024400
 8007730:	0800bfdc 	.word	0x0800bfdc

08007734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007740:	2300      	movs	r3, #0
 8007742:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03f      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007758:	d02a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800775a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800775e:	d824      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007764:	d018      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776a:	d81e      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007774:	d007      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007776:	e018      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007778:	4bab      	ldr	r3, [pc, #684]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	4aaa      	ldr	r2, [pc, #680]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007784:	e015      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3304      	adds	r3, #4
 800778a:	2102      	movs	r1, #2
 800778c:	4618      	mov	r0, r3
 800778e:	f001 feff 	bl	8009590 <RCCEx_PLL2_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007796:	e00c      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	2102      	movs	r1, #2
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 ffa8 	bl	80096f4 <RCCEx_PLL3_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077a8:	e003      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
      break;
 80077ae:	e000      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d109      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077b8:	4b9b      	ldr	r3, [pc, #620]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c4:	4998      	ldr	r1, [pc, #608]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	650b      	str	r3, [r1, #80]	; 0x50
 80077ca:	e001      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03d      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d826      	bhi.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007801 	.word	0x08007801
 80077f0:	0800780f 	.word	0x0800780f
 80077f4:	08007821 	.word	0x08007821
 80077f8:	08007839 	.word	0x08007839
 80077fc:	08007839 	.word	0x08007839
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007800:	4b89      	ldr	r3, [pc, #548]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a88      	ldr	r2, [pc, #544]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800780c:	e015      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3304      	adds	r3, #4
 8007812:	2100      	movs	r1, #0
 8007814:	4618      	mov	r0, r3
 8007816:	f001 febb 	bl	8009590 <RCCEx_PLL2_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800781e:	e00c      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3324      	adds	r3, #36	; 0x24
 8007824:	2100      	movs	r1, #0
 8007826:	4618      	mov	r0, r3
 8007828:	f001 ff64 	bl	80096f4 <RCCEx_PLL3_Config>
 800782c:	4603      	mov	r3, r0
 800782e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007830:	e003      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
      break;
 8007836:	e000      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007840:	4b79      	ldr	r3, [pc, #484]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007844:	f023 0207 	bic.w	r2, r3, #7
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	4976      	ldr	r1, [pc, #472]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800784e:	4313      	orrs	r3, r2
 8007850:	650b      	str	r3, [r1, #80]	; 0x50
 8007852:	e001      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007860:	2b00      	cmp	r3, #0
 8007862:	d051      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800786a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800786e:	d036      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007870:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007874:	d830      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800787a:	d032      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800787c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007880:	d82a      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007882:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007886:	d02e      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007888:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800788c:	d824      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800788e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007892:	d018      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007898:	d81e      	bhi.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800789e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a2:	d007      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80078a4:	e018      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a6:	4b60      	ldr	r3, [pc, #384]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	4a5f      	ldr	r2, [pc, #380]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078b2:	e019      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 fe68 	bl	8009590 <RCCEx_PLL2_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078c4:	e010      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3324      	adds	r3, #36	; 0x24
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f001 ff11 	bl	80096f4 <RCCEx_PLL3_Config>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078d6:	e007      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
      break;
 80078dc:	e004      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80078e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80078ee:	4b4e      	ldr	r3, [pc, #312]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078fc:	494a      	ldr	r1, [pc, #296]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	658b      	str	r3, [r1, #88]	; 0x58
 8007902:	e001      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007910:	2b00      	cmp	r3, #0
 8007912:	d051      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800791a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800791e:	d036      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007920:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007924:	d830      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007926:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800792a:	d032      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800792c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007930:	d82a      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007932:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007936:	d02e      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007938:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800793c:	d824      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800793e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007942:	d018      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007948:	d81e      	bhi.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800794e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007952:	d007      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007954:	e018      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	4a33      	ldr	r2, [pc, #204]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800795c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007962:	e019      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fe10 	bl	8009590 <RCCEx_PLL2_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007974:	e010      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3324      	adds	r3, #36	; 0x24
 800797a:	2100      	movs	r1, #0
 800797c:	4618      	mov	r0, r3
 800797e:	f001 feb9 	bl	80096f4 <RCCEx_PLL3_Config>
 8007982:	4603      	mov	r3, r0
 8007984:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007986:	e007      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	75fb      	strb	r3, [r7, #23]
      break;
 800798c:	e004      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800798e:	bf00      	nop
 8007990:	e002      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007992:	bf00      	nop
 8007994:	e000      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800799e:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079ac:	491e      	ldr	r1, [pc, #120]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	658b      	str	r3, [r1, #88]	; 0x58
 80079b2:	e001      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d035      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c8:	2b30      	cmp	r3, #48	; 0x30
 80079ca:	d01c      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80079cc:	2b30      	cmp	r3, #48	; 0x30
 80079ce:	d817      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	d00c      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d813      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d016      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d10f      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	4a10      	ldr	r2, [pc, #64]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80079ec:	e00e      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3304      	adds	r3, #4
 80079f2:	2102      	movs	r1, #2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fdcb 	bl	8009590 <RCCEx_PLL2_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80079fe:	e005      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e002      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a06:	bf00      	nop
 8007a08:	e000      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10c      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a12:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	4902      	ldr	r1, [pc, #8]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a24:	e004      	b.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d047      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a44:	d030      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a4a:	d82a      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a50:	d02c      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a56:	d824      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d018      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a62:	d81e      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6c:	d007      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a6e:	e018      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a70:	4bac      	ldr	r3, [pc, #688]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	4aab      	ldr	r2, [pc, #684]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a7c:	e017      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fd83 	bl	8009590 <RCCEx_PLL2_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007a8e:	e00e      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3324      	adds	r3, #36	; 0x24
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 fe2c 	bl	80096f4 <RCCEx_PLL3_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007aa0:	e005      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d109      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ab4:	4b9b      	ldr	r3, [pc, #620]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac0:	4998      	ldr	r1, [pc, #608]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ac6:	e001      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d049      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ae0:	d02e      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ae6:	d828      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007ae8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aec:	d02a      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007af2:	d822      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007af8:	d026      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007afe:	d81c      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b04:	d010      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b0a:	d816      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01d      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b14:	d111      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fd37 	bl	8009590 <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b26:	e012      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3324      	adds	r3, #36	; 0x24
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 fde0 	bl	80096f4 <RCCEx_PLL3_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b38:	e009      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3e:	e006      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b40:	bf00      	nop
 8007b42:	e004      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b44:	bf00      	nop
 8007b46:	e002      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b48:	bf00      	nop
 8007b4a:	e000      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b54:	4b73      	ldr	r3, [pc, #460]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b60:	4970      	ldr	r1, [pc, #448]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	650b      	str	r3, [r1, #80]	; 0x50
 8007b66:	e001      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d04b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b82:	d02e      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b88:	d828      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8e:	d02a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b94:	d822      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b9a:	d026      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ba0:	d81c      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba6:	d010      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bac:	d816      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01d      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb6:	d111      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 fce6 	bl	8009590 <RCCEx_PLL2_Config>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bc8:	e012      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fd8f 	bl	80096f4 <RCCEx_PLL3_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007bda:	e009      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
      break;
 8007be0:	e006      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007be2:	bf00      	nop
 8007be4:	e004      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007bf6:	4b4b      	ldr	r3, [pc, #300]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c04:	4947      	ldr	r1, [pc, #284]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	658b      	str	r3, [r1, #88]	; 0x58
 8007c0a:	e001      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02f      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c24:	d00e      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2a:	d814      	bhi.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c34:	d10f      	bne.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c36:	4b3b      	ldr	r3, [pc, #236]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a3a      	ldr	r2, [pc, #232]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c42:	e00c      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2101      	movs	r1, #1
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fca0 	bl	8009590 <RCCEx_PLL2_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007c54:	e003      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
      break;
 8007c5a:	e000      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d109      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c64:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c70:	492c      	ldr	r1, [pc, #176]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	650b      	str	r3, [r1, #80]	; 0x50
 8007c76:	e001      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d032      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d81b      	bhi.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ccf 	.word	0x08007ccf
 8007c9c:	08007ca9 	.word	0x08007ca9
 8007ca0:	08007cb7 	.word	0x08007cb7
 8007ca4:	08007ccf 	.word	0x08007ccf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cb4:	e00c      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	2102      	movs	r1, #2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 fc67 	bl	8009590 <RCCEx_PLL2_Config>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007cc6:	e003      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ccc:	e000      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cda:	f023 0203 	bic.w	r2, r3, #3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	4910      	ldr	r1, [pc, #64]	; (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ce8:	e001      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 808a 	beq.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d08:	f7f9 fcea 	bl	80016e0 <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0e:	e00d      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d10:	f7f9 fce6 	bl	80016e0 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b64      	cmp	r3, #100	; 0x64
 8007d1c:	d906      	bls.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	75fb      	strb	r3, [r7, #23]
        break;
 8007d22:	e009      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007d24:	58024400 	.word	0x58024400
 8007d28:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d2c:	4bb9      	ldr	r3, [pc, #740]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0eb      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d166      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d3e:	4bb6      	ldr	r3, [pc, #728]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d48:	4053      	eors	r3, r2
 8007d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d013      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d52:	4bb1      	ldr	r3, [pc, #708]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d5a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d5c:	4bae      	ldr	r3, [pc, #696]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	4aad      	ldr	r2, [pc, #692]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d66:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d68:	4bab      	ldr	r3, [pc, #684]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6c:	4aaa      	ldr	r2, [pc, #680]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d72:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d74:	4aa8      	ldr	r2, [pc, #672]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d84:	d115      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d86:	f7f9 fcab 	bl	80016e0 <HAL_GetTick>
 8007d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d8c:	e00b      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d8e:	f7f9 fca7 	bl	80016e0 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d902      	bls.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	75fb      	strb	r3, [r7, #23]
            break;
 8007da4:	e005      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da6:	4b9c      	ldr	r3, [pc, #624]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ed      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d126      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc6:	d10d      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007dc8:	4b93      	ldr	r3, [pc, #588]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dd6:	0919      	lsrs	r1, r3, #4
 8007dd8:	4b90      	ldr	r3, [pc, #576]	; (800801c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007dda:	400b      	ands	r3, r1
 8007ddc:	498e      	ldr	r1, [pc, #568]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	610b      	str	r3, [r1, #16]
 8007de2:	e005      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007de4:	4b8c      	ldr	r3, [pc, #560]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	4a8b      	ldr	r2, [pc, #556]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007dee:	6113      	str	r3, [r2, #16]
 8007df0:	4b89      	ldr	r3, [pc, #548]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dfe:	4986      	ldr	r1, [pc, #536]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	670b      	str	r3, [r1, #112]	; 0x70
 8007e04:	e004      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	75bb      	strb	r3, [r7, #22]
 8007e0a:	e001      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d07e      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e20:	2b28      	cmp	r3, #40	; 0x28
 8007e22:	d867      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007efb 	.word	0x08007efb
 8007e30:	08007ef5 	.word	0x08007ef5
 8007e34:	08007ef5 	.word	0x08007ef5
 8007e38:	08007ef5 	.word	0x08007ef5
 8007e3c:	08007ef5 	.word	0x08007ef5
 8007e40:	08007ef5 	.word	0x08007ef5
 8007e44:	08007ef5 	.word	0x08007ef5
 8007e48:	08007ef5 	.word	0x08007ef5
 8007e4c:	08007ed1 	.word	0x08007ed1
 8007e50:	08007ef5 	.word	0x08007ef5
 8007e54:	08007ef5 	.word	0x08007ef5
 8007e58:	08007ef5 	.word	0x08007ef5
 8007e5c:	08007ef5 	.word	0x08007ef5
 8007e60:	08007ef5 	.word	0x08007ef5
 8007e64:	08007ef5 	.word	0x08007ef5
 8007e68:	08007ef5 	.word	0x08007ef5
 8007e6c:	08007ee3 	.word	0x08007ee3
 8007e70:	08007ef5 	.word	0x08007ef5
 8007e74:	08007ef5 	.word	0x08007ef5
 8007e78:	08007ef5 	.word	0x08007ef5
 8007e7c:	08007ef5 	.word	0x08007ef5
 8007e80:	08007ef5 	.word	0x08007ef5
 8007e84:	08007ef5 	.word	0x08007ef5
 8007e88:	08007ef5 	.word	0x08007ef5
 8007e8c:	08007efb 	.word	0x08007efb
 8007e90:	08007ef5 	.word	0x08007ef5
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	08007ef5 	.word	0x08007ef5
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007ef5 	.word	0x08007ef5
 8007ea4:	08007ef5 	.word	0x08007ef5
 8007ea8:	08007ef5 	.word	0x08007ef5
 8007eac:	08007efb 	.word	0x08007efb
 8007eb0:	08007ef5 	.word	0x08007ef5
 8007eb4:	08007ef5 	.word	0x08007ef5
 8007eb8:	08007ef5 	.word	0x08007ef5
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007ef5 	.word	0x08007ef5
 8007ec4:	08007ef5 	.word	0x08007ef5
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	08007efb 	.word	0x08007efb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fb5a 	bl	8009590 <RCCEx_PLL2_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ee0:	e00c      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3324      	adds	r3, #36	; 0x24
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fc03 	bl	80096f4 <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ef2:	e003      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	e000      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f02:	4b45      	ldr	r3, [pc, #276]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0e:	4942      	ldr	r1, [pc, #264]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	654b      	str	r3, [r1, #84]	; 0x54
 8007f14:	e001      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	7dfb      	ldrb	r3, [r7, #23]
 8007f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d037      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d820      	bhi.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f77 	.word	0x08007f77
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f5f 	.word	0x08007f5f
 8007f40:	08007f77 	.word	0x08007f77
 8007f44:	08007f77 	.word	0x08007f77
 8007f48:	08007f77 	.word	0x08007f77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	2101      	movs	r1, #1
 8007f52:	4618      	mov	r0, r3
 8007f54:	f001 fb1c 	bl	8009590 <RCCEx_PLL2_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f5c:	e00c      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3324      	adds	r3, #36	; 0x24
 8007f62:	2101      	movs	r1, #1
 8007f64:	4618      	mov	r0, r3
 8007f66:	f001 fbc5 	bl	80096f4 <RCCEx_PLL3_Config>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007f6e:	e003      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	e000      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f7e:	4b26      	ldr	r3, [pc, #152]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f023 0207 	bic.w	r2, r3, #7
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	4923      	ldr	r1, [pc, #140]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8007f90:	e001      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d040      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d821      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007ff7 	.word	0x08007ff7
 8007fb8:	08007fcd 	.word	0x08007fcd
 8007fbc:	08007fdf 	.word	0x08007fdf
 8007fc0:	08007ff7 	.word	0x08007ff7
 8007fc4:	08007ff7 	.word	0x08007ff7
 8007fc8:	08007ff7 	.word	0x08007ff7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fadc 	bl	8009590 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3324      	adds	r3, #36	; 0x24
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fb85 	bl	80096f4 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d110      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008002:	f023 0207 	bic.w	r2, r3, #7
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800800c:	4902      	ldr	r1, [pc, #8]	; (8008018 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800800e:	4313      	orrs	r3, r2
 8008010:	658b      	str	r3, [r1, #88]	; 0x58
 8008012:	e007      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008014:	58024800 	.word	0x58024800
 8008018:	58024400 	.word	0x58024400
 800801c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d04b      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800803a:	d02e      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800803c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008040:	d828      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008046:	d02a      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804c:	d822      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800804e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008052:	d026      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008058:	d81c      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800805a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805e:	d010      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008064:	d816      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01d      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800806a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800806e:	d111      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3304      	adds	r3, #4
 8008074:	2100      	movs	r1, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fa8a 	bl	8009590 <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008080:	e012      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	; 0x24
 8008086:	2102      	movs	r1, #2
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fb33 	bl	80096f4 <RCCEx_PLL3_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008092:	e009      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
      break;
 8008098:	e006      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800809a:	bf00      	nop
 800809c:	e004      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800809e:	bf00      	nop
 80080a0:	e002      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080a2:	bf00      	nop
 80080a4:	e000      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80080a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ae:	4bb2      	ldr	r3, [pc, #712]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	49ae      	ldr	r1, [pc, #696]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	654b      	str	r3, [r1, #84]	; 0x54
 80080c2:	e001      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d04b      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080de:	d02e      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80080e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080e4:	d828      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	d02a      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80080ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f0:	d822      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80080f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f6:	d026      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fc:	d81c      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80080fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008102:	d010      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008108:	d816      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01d      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800810e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008112:	d111      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f001 fa38 	bl	8009590 <RCCEx_PLL2_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008124:	e012      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3324      	adds	r3, #36	; 0x24
 800812a:	2102      	movs	r1, #2
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fae1 	bl	80096f4 <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008136:	e009      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
      break;
 800813c:	e006      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800813e:	bf00      	nop
 8008140:	e004      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008142:	bf00      	nop
 8008144:	e002      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008146:	bf00      	nop
 8008148:	e000      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800814a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008152:	4b89      	ldr	r3, [pc, #548]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008156:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008160:	4985      	ldr	r1, [pc, #532]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008162:	4313      	orrs	r3, r2
 8008164:	658b      	str	r3, [r1, #88]	; 0x58
 8008166:	e001      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d04b      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800817e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008182:	d02e      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008184:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008188:	d828      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	d02a      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008194:	d822      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800819a:	d026      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800819c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081a0:	d81c      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a6:	d010      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80081a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ac:	d816      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01d      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b6:	d111      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 f9e6 	bl	8009590 <RCCEx_PLL2_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081c8:	e012      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	2102      	movs	r1, #2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fa8f 	bl	80096f4 <RCCEx_PLL3_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80081da:	e009      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
      break;
 80081e0:	e006      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80081e2:	bf00      	nop
 80081e4:	e004      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80081e6:	bf00      	nop
 80081e8:	e002      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80081ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80081f6:	4b60      	ldr	r3, [pc, #384]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008204:	495c      	ldr	r1, [pc, #368]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008206:	4313      	orrs	r3, r2
 8008208:	658b      	str	r3, [r1, #88]	; 0x58
 800820a:	e001      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
 800820e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d018      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008224:	d10a      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3324      	adds	r3, #36	; 0x24
 800822a:	2102      	movs	r1, #2
 800822c:	4618      	mov	r0, r3
 800822e:	f001 fa61 	bl	80096f4 <RCCEx_PLL3_Config>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800823c:	4b4e      	ldr	r3, [pc, #312]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800823e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008240:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008248:	494b      	ldr	r1, [pc, #300]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800824a:	4313      	orrs	r3, r2
 800824c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008264:	d10a      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	3324      	adds	r3, #36	; 0x24
 800826a:	2102      	movs	r1, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa41 	bl	80096f4 <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800827c:	4b3e      	ldr	r3, [pc, #248]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800827e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828a:	493b      	ldr	r1, [pc, #236]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800828c:	4313      	orrs	r3, r2
 800828e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d034      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a6:	d01d      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80082a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ac:	d817      	bhi.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80082b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b6:	d009      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80082b8:	e011      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3304      	adds	r3, #4
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 f965 	bl	8009590 <RCCEx_PLL2_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082ca:	e00c      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3324      	adds	r3, #36	; 0x24
 80082d0:	2102      	movs	r1, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fa0e 	bl	80096f4 <RCCEx_PLL3_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]
      break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80082e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082ec:	4b22      	ldr	r3, [pc, #136]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082fa:	491f      	ldr	r1, [pc, #124]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	658b      	str	r3, [r1, #88]	; 0x58
 8008300:	e001      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d036      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800831c:	d01c      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800831e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008322:	d816      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008328:	d003      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800832a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800832e:	d007      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008330:	e00f      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008332:	4b11      	ldr	r3, [pc, #68]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	4a10      	ldr	r2, [pc, #64]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800833c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800833e:	e00c      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f001 f9d4 	bl	80096f4 <RCCEx_PLL3_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008350:	e003      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
      break;
 8008356:	e000      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10d      	bne.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800836e:	4902      	ldr	r1, [pc, #8]	; (8008378 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008370:	4313      	orrs	r3, r2
 8008372:	654b      	str	r3, [r1, #84]	; 0x54
 8008374:	e004      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008376:	bf00      	nop
 8008378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
 800837e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d029      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d007      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800839a:	e00f      	b.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800839c:	4b61      	ldr	r3, [pc, #388]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4a60      	ldr	r2, [pc, #384]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083a8:	e00b      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3304      	adds	r3, #4
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f8ed 	bl	8009590 <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	75fb      	strb	r3, [r7, #23]
      break;
 80083c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d109      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083c8:	4b56      	ldr	r3, [pc, #344]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d4:	4953      	ldr	r1, [pc, #332]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083da:	e001      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3324      	adds	r3, #36	; 0x24
 80083f0:	2102      	movs	r1, #2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f97e 	bl	80096f4 <RCCEx_PLL3_Config>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d030      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008416:	d017      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841c:	d811      	bhi.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800841e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008422:	d013      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008428:	d80b      	bhi.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008432:	d106      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008434:	4b3b      	ldr	r3, [pc, #236]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4a3a      	ldr	r2, [pc, #232]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800843a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008440:	e007      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
      break;
 8008446:	e004      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008448:	bf00      	nop
 800844a:	e002      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008458:	4b32      	ldr	r3, [pc, #200]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800845a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008464:	492f      	ldr	r1, [pc, #188]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008466:	4313      	orrs	r3, r2
 8008468:	654b      	str	r3, [r1, #84]	; 0x54
 800846a:	e001      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800847c:	4b29      	ldr	r3, [pc, #164]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800847e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008488:	4926      	ldr	r1, [pc, #152]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800848a:	4313      	orrs	r3, r2
 800848c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800849a:	4b22      	ldr	r3, [pc, #136]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800849c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a6:	491f      	ldr	r1, [pc, #124]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00d      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	4a19      	ldr	r2, [pc, #100]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084c2:	6113      	str	r3, [r2, #16]
 80084c4:	4b17      	ldr	r3, [pc, #92]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084ce:	4915      	ldr	r1, [pc, #84]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da08      	bge.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	490e      	ldr	r1, [pc, #56]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80084fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008508:	4906      	ldr	r1, [pc, #24]	; (8008524 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800850a:	4313      	orrs	r3, r2
 800850c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800850e:	7dbb      	ldrb	r3, [r7, #22]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400

08008528 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b090      	sub	sp, #64	; 0x40
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008536:	f040 8089 	bne.w	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800853a:	4b95      	ldr	r3, [pc, #596]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800853c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	633b      	str	r3, [r7, #48]	; 0x30
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2b04      	cmp	r3, #4
 8008548:	d87d      	bhi.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008565 	.word	0x08008565
 8008554:	08008589 	.word	0x08008589
 8008558:	080085ad 	.word	0x080085ad
 800855c:	08008641 	.word	0x08008641
 8008560:	080085d1 	.word	0x080085d1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008564:	4b8a      	ldr	r3, [pc, #552]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008576:	4618      	mov	r0, r3
 8008578:	f000 feb8 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008580:	e3ed      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008586:	e3ea      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008588:	4b81      	ldr	r3, [pc, #516]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008594:	d107      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fbfe 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085a4:	e3db      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085aa:	e3d8      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ac:	4b78      	ldr	r3, [pc, #480]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ba:	f107 030c 	add.w	r3, r7, #12
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fd40 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085c8:	e3c9      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ce:	e3c6      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085d0:	4b6f      	ldr	r3, [pc, #444]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085da:	4b6d      	ldr	r3, [pc, #436]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d10c      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d109      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085ec:	4b68      	ldr	r3, [pc, #416]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	08db      	lsrs	r3, r3, #3
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	4a67      	ldr	r2, [pc, #412]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085fe:	e01e      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008600:	4b63      	ldr	r3, [pc, #396]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860c:	d106      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008614:	d102      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008616:	4b60      	ldr	r3, [pc, #384]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800861a:	e010      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800861c:	4b5c      	ldr	r3, [pc, #368]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008628:	d106      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008630:	d102      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008632:	4b5a      	ldr	r3, [pc, #360]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008636:	e002      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800863c:	e38f      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800863e:	e38e      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008640:	4b57      	ldr	r3, [pc, #348]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008644:	e38b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800864a:	e388      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008652:	f040 80a7 	bne.w	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008656:	4b4e      	ldr	r3, [pc, #312]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800865e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008666:	d054      	beq.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800866e:	f200 808b 	bhi.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008678:	f000 8083 	beq.w	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008682:	f200 8081 	bhi.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800868c:	d02f      	beq.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008694:	d878      	bhi.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086a2:	d012      	beq.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80086a4:	e070      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086a6:	4b3a      	ldr	r3, [pc, #232]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b2:	d107      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fe17 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086c2:	e34c      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086c8:	e349      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086ca:	4b31      	ldr	r3, [pc, #196]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086d6:	d107      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d8:	f107 0318 	add.w	r3, r7, #24
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fb5d 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086e6:	e33a      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ec:	e337      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ee:	4b28      	ldr	r3, [pc, #160]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086fa:	d107      	bne.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fc:	f107 030c 	add.w	r3, r7, #12
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fc9f 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800870a:	e328      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008710:	e325      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008712:	4b1f      	ldr	r3, [pc, #124]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800871a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800871c:	4b1c      	ldr	r3, [pc, #112]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b04      	cmp	r3, #4
 8008726:	d10c      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800872e:	4b18      	ldr	r3, [pc, #96]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	4a16      	ldr	r2, [pc, #88]	; (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008740:	e01e      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874e:	d106      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800875c:	e010      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800876a:	d106      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008772:	d102      	bne.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008774:	4b09      	ldr	r3, [pc, #36]	; (800879c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008778:	e002      	b.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800877e:	e2ee      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008780:	e2ed      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008786:	e2ea      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008788:	2300      	movs	r3, #0
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800878c:	e2e7      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800878e:	bf00      	nop
 8008790:	58024400 	.word	0x58024400
 8008794:	03d09000 	.word	0x03d09000
 8008798:	003d0900 	.word	0x003d0900
 800879c:	007a1200 	.word	0x007a1200
 80087a0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087aa:	f040 809c 	bne.w	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80087ae:	4b9e      	ldr	r3, [pc, #632]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087be:	d054      	beq.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087c6:	f200 808b 	bhi.w	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087d0:	f000 8083 	beq.w	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087da:	f200 8081 	bhi.w	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087e4:	d02f      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ec:	d878      	bhi.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087fa:	d012      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80087fc:	e070      	b.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087fe:	4b8a      	ldr	r3, [pc, #552]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800880a:	d107      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fd6b 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800881a:	e2a0      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008820:	e29d      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008822:	4b81      	ldr	r3, [pc, #516]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882e:	d107      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008830:	f107 0318 	add.w	r3, r7, #24
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fab1 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800883e:	e28e      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008844:	e28b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008846:	4b78      	ldr	r3, [pc, #480]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008852:	d107      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008854:	f107 030c 	add.w	r3, r7, #12
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fbf3 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008862:	e27c      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008868:	e279      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800886a:	4b6f      	ldr	r3, [pc, #444]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800886c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008872:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008874:	4b6c      	ldr	r3, [pc, #432]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b04      	cmp	r3, #4
 800887e:	d10c      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008886:	4b68      	ldr	r3, [pc, #416]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	4a66      	ldr	r2, [pc, #408]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008892:	fa22 f303 	lsr.w	r3, r2, r3
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008898:	e01e      	b.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800889a:	4b63      	ldr	r3, [pc, #396]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a6:	d106      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ae:	d102      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80088b0:	4b5f      	ldr	r3, [pc, #380]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b4:	e010      	b.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088b6:	4b5c      	ldr	r3, [pc, #368]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088c2:	d106      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ca:	d102      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088cc:	4b59      	ldr	r3, [pc, #356]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d0:	e002      	b.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088d6:	e242      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80088d8:	e241      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088da:	4b57      	ldr	r3, [pc, #348]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80088dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088de:	e23e      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e4:	e23b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ec:	f040 80a6 	bne.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80088f0:	4b4d      	ldr	r3, [pc, #308]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80088f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80088f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008900:	d054      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008908:	f200 808b 	bhi.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008912:	f000 8083 	beq.w	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800891c:	f200 8081 	bhi.w	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008926:	d02f      	beq.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800892e:	d878      	bhi.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800893c:	d012      	beq.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800893e:	e070      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008940:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800894c:	d107      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800894e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fcca 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800895c:	e1ff      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008962:	e1fc      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008964:	4b30      	ldr	r3, [pc, #192]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800896c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008970:	d107      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008972:	f107 0318 	add.w	r3, r7, #24
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fa10 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008980:	e1ed      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008986:	e1ea      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008994:	d107      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fb52 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089a4:	e1db      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089aa:	e1d8      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089ac:	4b1e      	ldr	r3, [pc, #120]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089b6:	4b1c      	ldr	r3, [pc, #112]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d10c      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089c8:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	08db      	lsrs	r3, r3, #3
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80089d4:	fa22 f303 	lsr.w	r3, r2, r3
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089da:	e01e      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089dc:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e8:	d106      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f0:	d102      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f6:	e010      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a04:	d106      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8008a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0c:	d102      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a12:	e002      	b.n	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a18:	e1a1      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a1a:	e1a0      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a20:	e19d      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a26:	e19a      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	03d09000 	.word	0x03d09000
 8008a30:	003d0900 	.word	0x003d0900
 8008a34:	007a1200 	.word	0x007a1200
 8008a38:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a42:	d173      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008a44:	4b9a      	ldr	r3, [pc, #616]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a54:	d02f      	beq.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5c:	d863      	bhi.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6a:	d012      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008a6c:	e05b      	b.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a6e:	4b90      	ldr	r3, [pc, #576]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7a:	d107      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a7c:	f107 0318 	add.w	r3, r7, #24
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f98b 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a8a:	e168      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a90:	e165      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a92:	4b87      	ldr	r3, [pc, #540]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a9e:	d107      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 facd 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aae:	e156      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab4:	e153      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008ab6:	4b7e      	ldr	r3, [pc, #504]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac0:	4b7b      	ldr	r3, [pc, #492]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d10c      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ad2:	4b77      	ldr	r3, [pc, #476]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	08db      	lsrs	r3, r3, #3
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	4a75      	ldr	r2, [pc, #468]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008ade:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae4:	e01e      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ae6:	4b72      	ldr	r3, [pc, #456]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af2:	d106      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008afa:	d102      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008afc:	4b6e      	ldr	r3, [pc, #440]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b00:	e010      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b02:	4b6b      	ldr	r3, [pc, #428]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b0e:	d106      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b16:	d102      	bne.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b18:	4b68      	ldr	r3, [pc, #416]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b1c:	e002      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b22:	e11c      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008b24:	e11b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b2a:	e118      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b32:	d133      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008b34:	4b5e      	ldr	r3, [pc, #376]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d004      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4a:	d012      	beq.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008b4c:	e023      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b4e:	4b58      	ldr	r3, [pc, #352]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b5a:	d107      	bne.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fbc3 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b6a:	e0f8      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b70:	e0f5      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b72:	4b4f      	ldr	r3, [pc, #316]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b80:	f107 0318 	add.w	r3, r7, #24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 f909 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b8e:	e0e6      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b94:	e0e3      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b9a:	e0e0      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ba2:	f040 808d 	bne.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008ba6:	4b42      	ldr	r3, [pc, #264]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008baa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008bae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb6:	d06b      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bbe:	d874      	bhi.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc6:	d056      	beq.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bce:	d86c      	bhi.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bd6:	d03b      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bde:	d864      	bhi.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be6:	d021      	beq.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bee:	d85c      	bhi.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bfc:	d004      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008bfe:	e054      	b.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c00:	f000 f8b6 	bl	8008d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c04:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008c06:	e0aa      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c08:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c14:	d107      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c16:	f107 0318 	add.w	r3, r7, #24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f8be 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c24:	e09b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c2a:	e098      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c2c:	4b20      	ldr	r3, [pc, #128]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c38:	d107      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c3a:	f107 030c 	add.w	r3, r7, #12
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fa00 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c48:	e089      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c4e:	e086      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c50:	4b17      	ldr	r3, [pc, #92]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d109      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c5c:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	08db      	lsrs	r3, r3, #3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c6e:	e076      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c74:	e073      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c76:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c82:	d102      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008c84:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c88:	e069      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8e:	e066      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c90:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c9c:	d102      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008c9e:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ca2:	e05c      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ca8:	e059      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cae:	e056      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	03d09000 	.word	0x03d09000
 8008cb8:	003d0900 	.word	0x003d0900
 8008cbc:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc6:	d148      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008cc8:	4b27      	ldr	r3, [pc, #156]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd8:	d02a      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ce0:	d838      	bhi.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cee:	d00d      	beq.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008cf0:	e030      	b.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf2:	4b1d      	ldr	r3, [pc, #116]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cfe:	d102      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008d00:	4b1a      	ldr	r3, [pc, #104]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d04:	e02b      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0a:	e028      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d18:	d107      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fae4 	bl	80092ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d28:	e019      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d2e:	e016      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3e:	f107 0318 	add.w	r3, r7, #24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f82a 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008d4c:	e007      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d52:	e004      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d58:	e001      	b.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3740      	adds	r7, #64	; 0x40
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	58024400 	.word	0x58024400
 8008d6c:	007a1200 	.word	0x007a1200

08008d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008d74:	f7fe fc82 	bl	800767c <HAL_RCC_GetHCLKFreq>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	091b      	lsrs	r3, r3, #4
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	4904      	ldr	r1, [pc, #16]	; (8008d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d86:	5ccb      	ldrb	r3, [r1, r3]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	58024400 	.word	0x58024400
 8008d98:	0800bfdc 	.word	0x0800bfdc

08008d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	; 0x24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008da4:	4ba1      	ldr	r3, [pc, #644]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008dae:	4b9f      	ldr	r3, [pc, #636]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db2:	0b1b      	lsrs	r3, r3, #12
 8008db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dba:	4b9c      	ldr	r3, [pc, #624]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008dc6:	4b99      	ldr	r3, [pc, #612]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	08db      	lsrs	r3, r3, #3
 8008dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8111 	beq.w	800900c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	f000 8083 	beq.w	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	f200 80a1 	bhi.w	8008f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d056      	beq.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e06:	e099      	b.n	8008f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e08:	4b88      	ldr	r3, [pc, #544]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d02d      	beq.n	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e14:	4b85      	ldr	r3, [pc, #532]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	08db      	lsrs	r3, r3, #3
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	4a84      	ldr	r2, [pc, #528]	; (8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e20:	fa22 f303 	lsr.w	r3, r2, r3
 8008e24:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	ee07 3a90 	vmov	s15, r3
 8008e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b7b      	ldr	r3, [pc, #492]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e6e:	e087      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b6a      	ldr	r3, [pc, #424]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb2:	e065      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800903c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b59      	ldr	r3, [pc, #356]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ef6:	e043      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	4b48      	ldr	r3, [pc, #288]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f3a:	e021      	b.n	8008f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800903c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4e:	4b37      	ldr	r3, [pc, #220]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008f80:	4b2a      	ldr	r3, [pc, #168]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	0a5b      	lsrs	r3, r3, #9
 8008f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8a:	ee07 3a90 	vmov	s15, r3
 8008f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008fae:	4b1f      	ldr	r3, [pc, #124]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	0c1b      	lsrs	r3, r3, #16
 8008fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd4:	ee17 2a90 	vmov	r2, s15
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008fdc:	4b13      	ldr	r3, [pc, #76]	; (800902c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	0e1b      	lsrs	r3, r3, #24
 8008fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009002:	ee17 2a90 	vmov	r2, s15
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800900a:	e008      	b.n	800901e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
}
 800901e:	bf00      	nop
 8009020:	3724      	adds	r7, #36	; 0x24
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	58024400 	.word	0x58024400
 8009030:	03d09000 	.word	0x03d09000
 8009034:	46000000 	.word	0x46000000
 8009038:	4c742400 	.word	0x4c742400
 800903c:	4a742400 	.word	0x4a742400
 8009040:	4af42400 	.word	0x4af42400

08009044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009044:	b480      	push	{r7}
 8009046:	b089      	sub	sp, #36	; 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800904c:	4ba1      	ldr	r3, [pc, #644]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f003 0303 	and.w	r3, r3, #3
 8009054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009056:	4b9f      	ldr	r3, [pc, #636]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009062:	4b9c      	ldr	r3, [pc, #624]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800906e:	4b99      	ldr	r3, [pc, #612]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	fb02 f303 	mul.w	r3, r2, r3
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8111 	beq.w	80092b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f000 8083 	beq.w	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b02      	cmp	r3, #2
 800909e:	f200 80a1 	bhi.w	80091e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d056      	beq.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090ae:	e099      	b.n	80091e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090b0:	4b88      	ldr	r3, [pc, #544]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0320 	and.w	r3, r3, #32
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02d      	beq.n	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090bc:	4b85      	ldr	r3, [pc, #532]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a84      	ldr	r2, [pc, #528]	; (80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b7b      	ldr	r3, [pc, #492]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009116:	e087      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b6a      	ldr	r3, [pc, #424]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800915a:	e065      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b59      	ldr	r3, [pc, #356]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009182:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800919e:	e043      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b2:	4b48      	ldr	r3, [pc, #288]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091e2:	e021      	b.n	8009228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f6:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009206:	ed97 6a03 	vldr	s12, [r7, #12]
 800920a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800920e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800921a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009228:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800922a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922c:	0a5b      	lsrs	r3, r3, #9
 800922e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800923e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009242:	edd7 6a07 	vldr	s13, [r7, #28]
 8009246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800924e:	ee17 2a90 	vmov	r2, s15
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009256:	4b1f      	ldr	r3, [pc, #124]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	0c1b      	lsrs	r3, r3, #16
 800925c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800926c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009270:	edd7 6a07 	vldr	s13, [r7, #28]
 8009274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800927c:	ee17 2a90 	vmov	r2, s15
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009284:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	0e1b      	lsrs	r3, r3, #24
 800928a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800929a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800929e:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092aa:	ee17 2a90 	vmov	r2, s15
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092b2:	e008      	b.n	80092c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	609a      	str	r2, [r3, #8]
}
 80092c6:	bf00      	nop
 80092c8:	3724      	adds	r7, #36	; 0x24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	58024400 	.word	0x58024400
 80092d8:	03d09000 	.word	0x03d09000
 80092dc:	46000000 	.word	0x46000000
 80092e0:	4c742400 	.word	0x4c742400
 80092e4:	4a742400 	.word	0x4a742400
 80092e8:	4af42400 	.word	0x4af42400

080092ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092f4:	4ba0      	ldr	r3, [pc, #640]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80092fe:	4b9e      	ldr	r3, [pc, #632]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009302:	091b      	lsrs	r3, r3, #4
 8009304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009308:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800930a:	4b9b      	ldr	r3, [pc, #620]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009314:	4b98      	ldr	r3, [pc, #608]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	08db      	lsrs	r3, r3, #3
 800931a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	fb02 f303 	mul.w	r3, r2, r3
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 8111 	beq.w	800955a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	2b02      	cmp	r3, #2
 800933c:	f000 8083 	beq.w	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b02      	cmp	r3, #2
 8009344:	f200 80a1 	bhi.w	800948a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d056      	beq.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009354:	e099      	b.n	800948a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009356:	4b88      	ldr	r3, [pc, #544]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	d02d      	beq.n	80093be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009362:	4b85      	ldr	r3, [pc, #532]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	08db      	lsrs	r3, r3, #3
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	4a83      	ldr	r2, [pc, #524]	; (800957c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800936e:	fa22 f303 	lsr.w	r3, r2, r3
 8009372:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938c:	4b7a      	ldr	r3, [pc, #488]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80093bc:	e087      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d0:	4b69      	ldr	r3, [pc, #420]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009400:	e065      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009414:	4b58      	ldr	r3, [pc, #352]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009424:	ed97 6a03 	vldr	s12, [r7, #12]
 8009428:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800942c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009444:	e043      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	ee07 3a90 	vmov	s15, r3
 800944c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009450:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800958c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009458:	4b47      	ldr	r3, [pc, #284]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	ee07 3a90 	vmov	s15, r3
 8009464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009468:	ed97 6a03 	vldr	s12, [r7, #12]
 800946c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800947c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009484:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009488:	e021      	b.n	80094ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	ee07 3a90 	vmov	s15, r3
 8009490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009494:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949c:	4b36      	ldr	r3, [pc, #216]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80094b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80094ce:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	0a5b      	lsrs	r3, r3, #9
 80094d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d8:	ee07 3a90 	vmov	s15, r3
 80094dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f4:	ee17 2a90 	vmov	r2, s15
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80094fc:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	0c1b      	lsrs	r3, r3, #16
 8009502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009516:	edd7 6a07 	vldr	s13, [r7, #28]
 800951a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800951e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009522:	ee17 2a90 	vmov	r2, s15
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	0e1b      	lsrs	r3, r3, #24
 8009530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009544:	edd7 6a07 	vldr	s13, [r7, #28]
 8009548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009550:	ee17 2a90 	vmov	r2, s15
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009558:	e008      	b.n	800956c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	609a      	str	r2, [r3, #8]
}
 800956c:	bf00      	nop
 800956e:	3724      	adds	r7, #36	; 0x24
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	58024400 	.word	0x58024400
 800957c:	03d09000 	.word	0x03d09000
 8009580:	46000000 	.word	0x46000000
 8009584:	4c742400 	.word	0x4c742400
 8009588:	4a742400 	.word	0x4a742400
 800958c:	4af42400 	.word	0x4af42400

08009590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800959e:	4b53      	ldr	r3, [pc, #332]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d101      	bne.n	80095ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e099      	b.n	80096e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095ae:	4b4f      	ldr	r3, [pc, #316]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a4e      	ldr	r2, [pc, #312]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ba:	f7f8 f891 	bl	80016e0 <HAL_GetTick>
 80095be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095c0:	e008      	b.n	80095d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80095c2:	f7f8 f88d 	bl	80016e0 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e086      	b.n	80096e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095d4:	4b45      	ldr	r3, [pc, #276]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f0      	bne.n	80095c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095e0:	4b42      	ldr	r3, [pc, #264]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	031b      	lsls	r3, r3, #12
 80095ee:	493f      	ldr	r1, [pc, #252]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	628b      	str	r3, [r1, #40]	; 0x28
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	3b01      	subs	r3, #1
 8009604:	025b      	lsls	r3, r3, #9
 8009606:	b29b      	uxth	r3, r3
 8009608:	431a      	orrs	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	3b01      	subs	r3, #1
 8009610:	041b      	lsls	r3, r3, #16
 8009612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	3b01      	subs	r3, #1
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009624:	4931      	ldr	r1, [pc, #196]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009626:	4313      	orrs	r3, r2
 8009628:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800962a:	4b30      	ldr	r3, [pc, #192]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800962c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	492d      	ldr	r1, [pc, #180]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009638:	4313      	orrs	r3, r2
 800963a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800963c:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	f023 0220 	bic.w	r2, r3, #32
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	4928      	ldr	r1, [pc, #160]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800964a:	4313      	orrs	r3, r2
 800964c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800964e:	4b27      	ldr	r3, [pc, #156]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	4a26      	ldr	r2, [pc, #152]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009654:	f023 0310 	bic.w	r3, r3, #16
 8009658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800965a:	4b24      	ldr	r3, [pc, #144]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800965c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800965e:	4b24      	ldr	r3, [pc, #144]	; (80096f0 <RCCEx_PLL2_Config+0x160>)
 8009660:	4013      	ands	r3, r2
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	69d2      	ldr	r2, [r2, #28]
 8009666:	00d2      	lsls	r2, r2, #3
 8009668:	4920      	ldr	r1, [pc, #128]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800966a:	4313      	orrs	r3, r2
 800966c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800966e:	4b1f      	ldr	r3, [pc, #124]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009674:	f043 0310 	orr.w	r3, r3, #16
 8009678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009680:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a19      	ldr	r2, [pc, #100]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800968a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800968c:	e00f      	b.n	80096ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d106      	bne.n	80096a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009694:	4b15      	ldr	r3, [pc, #84]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a14      	ldr	r2, [pc, #80]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 800969a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096a0:	e005      	b.n	80096ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	4a11      	ldr	r2, [pc, #68]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80096a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096ae:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80096b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80096b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ba:	f7f8 f811 	bl	80016e0 <HAL_GetTick>
 80096be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096c0:	e008      	b.n	80096d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80096c2:	f7f8 f80d 	bl	80016e0 <HAL_GetTick>
 80096c6:	4602      	mov	r2, r0
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d901      	bls.n	80096d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e006      	b.n	80096e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096d4:	4b05      	ldr	r3, [pc, #20]	; (80096ec <RCCEx_PLL2_Config+0x15c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f0      	beq.n	80096c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	58024400 	.word	0x58024400
 80096f0:	ffff0007 	.word	0xffff0007

080096f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009702:	4b53      	ldr	r3, [pc, #332]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	f003 0303 	and.w	r3, r3, #3
 800970a:	2b03      	cmp	r3, #3
 800970c:	d101      	bne.n	8009712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e099      	b.n	8009846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009712:	4b4f      	ldr	r3, [pc, #316]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a4e      	ldr	r2, [pc, #312]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800971c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800971e:	f7f7 ffdf 	bl	80016e0 <HAL_GetTick>
 8009722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009724:	e008      	b.n	8009738 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009726:	f7f7 ffdb 	bl	80016e0 <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d901      	bls.n	8009738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e086      	b.n	8009846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009738:	4b45      	ldr	r3, [pc, #276]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1f0      	bne.n	8009726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009744:	4b42      	ldr	r3, [pc, #264]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009748:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	051b      	lsls	r3, r3, #20
 8009752:	493f      	ldr	r1, [pc, #252]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009754:	4313      	orrs	r3, r2
 8009756:	628b      	str	r3, [r1, #40]	; 0x28
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	3b01      	subs	r3, #1
 800975e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	3b01      	subs	r3, #1
 8009768:	025b      	lsls	r3, r3, #9
 800976a:	b29b      	uxth	r3, r3
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	3b01      	subs	r3, #1
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	3b01      	subs	r3, #1
 8009782:	061b      	lsls	r3, r3, #24
 8009784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009788:	4931      	ldr	r1, [pc, #196]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 800978a:	4313      	orrs	r3, r2
 800978c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800978e:	4b30      	ldr	r3, [pc, #192]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	492d      	ldr	r1, [pc, #180]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 800979c:	4313      	orrs	r3, r2
 800979e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097a0:	4b2b      	ldr	r3, [pc, #172]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	4928      	ldr	r1, [pc, #160]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097b2:	4b27      	ldr	r3, [pc, #156]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	4a26      	ldr	r2, [pc, #152]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097be:	4b24      	ldr	r3, [pc, #144]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097c2:	4b24      	ldr	r3, [pc, #144]	; (8009854 <RCCEx_PLL3_Config+0x160>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	69d2      	ldr	r2, [r2, #28]
 80097ca:	00d2      	lsls	r2, r2, #3
 80097cc:	4920      	ldr	r1, [pc, #128]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	4a1e      	ldr	r2, [pc, #120]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097e4:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	4a19      	ldr	r2, [pc, #100]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097f0:	e00f      	b.n	8009812 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d106      	bne.n	8009806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097f8:	4b15      	ldr	r3, [pc, #84]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	4a14      	ldr	r2, [pc, #80]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 80097fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009804:	e005      	b.n	8009812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	4a11      	ldr	r2, [pc, #68]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 800980c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a0e      	ldr	r2, [pc, #56]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 8009818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800981e:	f7f7 ff5f 	bl	80016e0 <HAL_GetTick>
 8009822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009824:	e008      	b.n	8009838 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009826:	f7f7 ff5b 	bl	80016e0 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2b02      	cmp	r3, #2
 8009832:	d901      	bls.n	8009838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e006      	b.n	8009846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009838:	4b05      	ldr	r3, [pc, #20]	; (8009850 <RCCEx_PLL3_Config+0x15c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0f0      	beq.n	8009826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	ffff0007 	.word	0xffff0007

08009858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e049      	b.n	80098fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f7 fcb6 	bl	80011f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f000 faf8 	bl	8009e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	d001      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e05e      	b.n	80099de <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a2b      	ldr	r2, [pc, #172]	; (80099ec <HAL_TIM_Base_Start_IT+0xe4>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d02c      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d027      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a27      	ldr	r2, [pc, #156]	; (80099f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d022      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a26      	ldr	r2, [pc, #152]	; (80099f4 <HAL_TIM_Base_Start_IT+0xec>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d01d      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a24      	ldr	r2, [pc, #144]	; (80099f8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d018      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a23      	ldr	r2, [pc, #140]	; (80099fc <HAL_TIM_Base_Start_IT+0xf4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d013      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a21      	ldr	r2, [pc, #132]	; (8009a00 <HAL_TIM_Base_Start_IT+0xf8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d00e      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <HAL_TIM_Base_Start_IT+0xfc>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d009      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a1e      	ldr	r2, [pc, #120]	; (8009a08 <HAL_TIM_Base_Start_IT+0x100>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d004      	beq.n	800999c <HAL_TIM_Base_Start_IT+0x94>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a1d      	ldr	r2, [pc, #116]	; (8009a0c <HAL_TIM_Base_Start_IT+0x104>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d115      	bne.n	80099c8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	4b1b      	ldr	r3, [pc, #108]	; (8009a10 <HAL_TIM_Base_Start_IT+0x108>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b06      	cmp	r3, #6
 80099ac:	d015      	beq.n	80099da <HAL_TIM_Base_Start_IT+0xd2>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b4:	d011      	beq.n	80099da <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f042 0201 	orr.w	r2, r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c6:	e008      	b.n	80099da <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e000      	b.n	80099dc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40010000 	.word	0x40010000
 80099f0:	40000400 	.word	0x40000400
 80099f4:	40000800 	.word	0x40000800
 80099f8:	40000c00 	.word	0x40000c00
 80099fc:	40010400 	.word	0x40010400
 8009a00:	40001800 	.word	0x40001800
 8009a04:	40014000 	.word	0x40014000
 8009a08:	4000e000 	.word	0x4000e000
 8009a0c:	4000e400 	.word	0x4000e400
 8009a10:	00010007 	.word	0x00010007

08009a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d122      	bne.n	8009a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d11b      	bne.n	8009a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0202 	mvn.w	r2, #2
 8009a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f9fa 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009a5c:	e005      	b.n	8009a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9ec 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9fd 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d122      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d11b      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f06f 0204 	mvn.w	r2, #4
 8009a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f9d0 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009ab0:	e005      	b.n	8009abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f9c2 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f9d3 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d122      	bne.n	8009b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f003 0308 	and.w	r3, r3, #8
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d11b      	bne.n	8009b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f06f 0208 	mvn.w	r2, #8
 8009ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2204      	movs	r2, #4
 8009aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f9a6 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009b04:	e005      	b.n	8009b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f998 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f9a9 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	f003 0310 	and.w	r3, r3, #16
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	d122      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	2b10      	cmp	r3, #16
 8009b32:	d11b      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f06f 0210 	mvn.w	r2, #16
 8009b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2208      	movs	r2, #8
 8009b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d003      	beq.n	8009b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f97c 	bl	8009e50 <HAL_TIM_IC_CaptureCallback>
 8009b58:	e005      	b.n	8009b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f96e 	bl	8009e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f97f 	bl	8009e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d10e      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d107      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0201 	mvn.w	r2, #1
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f6 fd40 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba2:	2b80      	cmp	r3, #128	; 0x80
 8009ba4:	d10e      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb0:	2b80      	cmp	r3, #128	; 0x80
 8009bb2:	d107      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fb4e 	bl	800a260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bd2:	d10e      	bne.n	8009bf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bde:	2b80      	cmp	r3, #128	; 0x80
 8009be0:	d107      	bne.n	8009bf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fb41 	bl	800a274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b40      	cmp	r3, #64	; 0x40
 8009bfe:	d10e      	bne.n	8009c1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0a:	2b40      	cmp	r3, #64	; 0x40
 8009c0c:	d107      	bne.n	8009c1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f92d 	bl	8009e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d10e      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d107      	bne.n	8009c4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f06f 0220 	mvn.w	r2, #32
 8009c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fb01 	bl	800a24c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d101      	bne.n	8009c6c <HAL_TIM_ConfigClockSource+0x18>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e0db      	b.n	8009e24 <HAL_TIM_ConfigClockSource+0x1d0>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4b69      	ldr	r3, [pc, #420]	; (8009e2c <HAL_TIM_ConfigClockSource+0x1d8>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a63      	ldr	r2, [pc, #396]	; (8009e30 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	f000 80a9 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009ca8:	4a61      	ldr	r2, [pc, #388]	; (8009e30 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	f200 80ae 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009cb0:	4a60      	ldr	r2, [pc, #384]	; (8009e34 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	f000 80a1 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009cb8:	4a5e      	ldr	r2, [pc, #376]	; (8009e34 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	f200 80a6 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009cc0:	4a5d      	ldr	r2, [pc, #372]	; (8009e38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	f000 8099 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009cc8:	4a5b      	ldr	r2, [pc, #364]	; (8009e38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	f200 809e 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009cd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009cd4:	f000 8091 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009cd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009cdc:	f200 8096 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce4:	f000 8089 	beq.w	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cec:	f200 808e 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf4:	d03e      	beq.n	8009d74 <HAL_TIM_ConfigClockSource+0x120>
 8009cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cfa:	f200 8087 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	f000 8085 	beq.w	8009e10 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0a:	d87f      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d0c:	2b70      	cmp	r3, #112	; 0x70
 8009d0e:	d01a      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0xf2>
 8009d10:	2b70      	cmp	r3, #112	; 0x70
 8009d12:	d87b      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d14:	2b60      	cmp	r3, #96	; 0x60
 8009d16:	d050      	beq.n	8009dba <HAL_TIM_ConfigClockSource+0x166>
 8009d18:	2b60      	cmp	r3, #96	; 0x60
 8009d1a:	d877      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d1c:	2b50      	cmp	r3, #80	; 0x50
 8009d1e:	d03c      	beq.n	8009d9a <HAL_TIM_ConfigClockSource+0x146>
 8009d20:	2b50      	cmp	r3, #80	; 0x50
 8009d22:	d873      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	d058      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x186>
 8009d28:	2b40      	cmp	r3, #64	; 0x40
 8009d2a:	d86f      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d2c:	2b30      	cmp	r3, #48	; 0x30
 8009d2e:	d064      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009d30:	2b30      	cmp	r3, #48	; 0x30
 8009d32:	d86b      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d060      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d867      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d05c      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d05a      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009d44:	e062      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f000 f9bd 	bl	800a0d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	609a      	str	r2, [r3, #8]
      break;
 8009d72:	e04e      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	6899      	ldr	r1, [r3, #8]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f000 f9a6 	bl	800a0d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d96:	609a      	str	r2, [r3, #8]
      break;
 8009d98:	e03b      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	6859      	ldr	r1, [r3, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f000 f916 	bl	8009fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2150      	movs	r1, #80	; 0x50
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f970 	bl	800a098 <TIM_ITRx_SetConfig>
      break;
 8009db8:	e02b      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f000 f935 	bl	800a036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2160      	movs	r1, #96	; 0x60
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f960 	bl	800a098 <TIM_ITRx_SetConfig>
      break;
 8009dd8:	e01b      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6859      	ldr	r1, [r3, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f000 f8f6 	bl	8009fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2140      	movs	r1, #64	; 0x40
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f950 	bl	800a098 <TIM_ITRx_SetConfig>
      break;
 8009df8:	e00b      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f000 f947 	bl	800a098 <TIM_ITRx_SetConfig>
        break;
 8009e0a:	e002      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009e10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	ffceff88 	.word	0xffceff88
 8009e30:	00100040 	.word	0x00100040
 8009e34:	00100030 	.word	0x00100030
 8009e38:	00100020 	.word	0x00100020

08009e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a44      	ldr	r2, [pc, #272]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d013      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eaa:	d00f      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a41      	ldr	r2, [pc, #260]	; (8009fb4 <TIM_Base_SetConfig+0x128>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00b      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a40      	ldr	r2, [pc, #256]	; (8009fb8 <TIM_Base_SetConfig+0x12c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a3f      	ldr	r2, [pc, #252]	; (8009fbc <TIM_Base_SetConfig+0x130>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_Base_SetConfig+0x40>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a3e      	ldr	r2, [pc, #248]	; (8009fc0 <TIM_Base_SetConfig+0x134>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d108      	bne.n	8009ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a33      	ldr	r2, [pc, #204]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d027      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eec:	d023      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a30      	ldr	r2, [pc, #192]	; (8009fb4 <TIM_Base_SetConfig+0x128>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d01f      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a2f      	ldr	r2, [pc, #188]	; (8009fb8 <TIM_Base_SetConfig+0x12c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d01b      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a2e      	ldr	r2, [pc, #184]	; (8009fbc <TIM_Base_SetConfig+0x130>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d017      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a2d      	ldr	r2, [pc, #180]	; (8009fc0 <TIM_Base_SetConfig+0x134>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d013      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a2c      	ldr	r2, [pc, #176]	; (8009fc4 <TIM_Base_SetConfig+0x138>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00f      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a2b      	ldr	r2, [pc, #172]	; (8009fc8 <TIM_Base_SetConfig+0x13c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d00b      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2a      	ldr	r2, [pc, #168]	; (8009fcc <TIM_Base_SetConfig+0x140>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d007      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <TIM_Base_SetConfig+0x144>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d003      	beq.n	8009f36 <TIM_Base_SetConfig+0xaa>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a28      	ldr	r2, [pc, #160]	; (8009fd4 <TIM_Base_SetConfig+0x148>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d108      	bne.n	8009f48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a10      	ldr	r2, [pc, #64]	; (8009fb0 <TIM_Base_SetConfig+0x124>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00f      	beq.n	8009f94 <TIM_Base_SetConfig+0x108>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <TIM_Base_SetConfig+0x134>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00b      	beq.n	8009f94 <TIM_Base_SetConfig+0x108>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a11      	ldr	r2, [pc, #68]	; (8009fc4 <TIM_Base_SetConfig+0x138>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d007      	beq.n	8009f94 <TIM_Base_SetConfig+0x108>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <TIM_Base_SetConfig+0x13c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_Base_SetConfig+0x108>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a0f      	ldr	r2, [pc, #60]	; (8009fcc <TIM_Base_SetConfig+0x140>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d103      	bne.n	8009f9c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	615a      	str	r2, [r3, #20]
}
 8009fa2:	bf00      	nop
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40000400 	.word	0x40000400
 8009fb8:	40000800 	.word	0x40000800
 8009fbc:	40000c00 	.word	0x40000c00
 8009fc0:	40010400 	.word	0x40010400
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40014400 	.word	0x40014400
 8009fcc:	40014800 	.word	0x40014800
 8009fd0:	4000e000 	.word	0x4000e000
 8009fd4:	4000e400 	.word	0x4000e400

08009fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	f023 0201 	bic.w	r2, r3, #1
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	011b      	lsls	r3, r3, #4
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f023 030a 	bic.w	r3, r3, #10
 800a014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	bf00      	nop
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a036:	b480      	push	{r7}
 800a038:	b087      	sub	sp, #28
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	f023 0210 	bic.w	r2, r3, #16
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	031b      	lsls	r3, r3, #12
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <TIM_ITRx_SetConfig+0x38>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f043 0307 	orr.w	r3, r3, #7
 800a0ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	609a      	str	r2, [r3, #8]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	ffcfff8f 	.word	0xffcfff8f

0800a0d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	021a      	lsls	r2, r3, #8
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	431a      	orrs	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	609a      	str	r2, [r3, #8]
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a128:	2302      	movs	r3, #2
 800a12a:	e077      	b.n	800a21c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a35      	ldr	r2, [pc, #212]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d004      	beq.n	800a160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a34      	ldr	r2, [pc, #208]	; (800a22c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d108      	bne.n	800a172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a25      	ldr	r2, [pc, #148]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d02c      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19e:	d027      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a22      	ldr	r2, [pc, #136]	; (800a230 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d022      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a21      	ldr	r2, [pc, #132]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d01d      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a1f      	ldr	r2, [pc, #124]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d018      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a1a      	ldr	r2, [pc, #104]	; (800a22c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1b      	ldr	r2, [pc, #108]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00e      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1a      	ldr	r2, [pc, #104]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d009      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a18      	ldr	r2, [pc, #96]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d004      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a17      	ldr	r2, [pc, #92]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10c      	bne.n	800a20a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	40010000 	.word	0x40010000
 800a22c:	40010400 	.word	0x40010400
 800a230:	40000400 	.word	0x40000400
 800a234:	40000800 	.word	0x40000800
 800a238:	40000c00 	.word	0x40000c00
 800a23c:	40001800 	.word	0x40001800
 800a240:	40014000 	.word	0x40014000
 800a244:	4000e000 	.word	0x4000e000
 800a248:	4000e400 	.word	0x4000e400

0800a24c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e042      	b.n	800a320 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7f6 ffc7 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2224      	movs	r2, #36	; 0x24
 800a2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0201 	bic.w	r2, r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fb80 	bl	800a9d0 <UART_SetConfig>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e022      	b.n	800a320 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 f9d2 	bl	800b68c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f042 0201 	orr.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fa59 	bl	800b7d0 <UART_CheckIdleState>
 800a31e:	4603      	mov	r3, r0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	4613      	mov	r3, r2
 800a334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d168      	bne.n	800a412 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <HAL_UART_Transmit_IT+0x24>
 800a346:	88fb      	ldrh	r3, [r7, #6]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e061      	b.n	800a414 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_UART_Transmit_IT+0x36>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e05a      	b.n	800a414 <HAL_UART_Transmit_IT+0xec>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	88fa      	ldrh	r2, [r7, #6]
 800a370:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	88fa      	ldrh	r2, [r7, #6]
 800a378:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2221      	movs	r2, #33	; 0x21
 800a38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a39a:	d11c      	bne.n	800a3d6 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a4:	d107      	bne.n	800a3b6 <HAL_UART_Transmit_IT+0x8e>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4a1b      	ldr	r2, [pc, #108]	; (800a420 <HAL_UART_Transmit_IT+0xf8>)
 800a3b2:	675a      	str	r2, [r3, #116]	; 0x74
 800a3b4:	e002      	b.n	800a3bc <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4a1a      	ldr	r2, [pc, #104]	; (800a424 <HAL_UART_Transmit_IT+0xfc>)
 800a3ba:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a3d2:	609a      	str	r2, [r3, #8]
 800a3d4:	e01b      	b.n	800a40e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3de:	d107      	bne.n	800a3f0 <HAL_UART_Transmit_IT+0xc8>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4a0f      	ldr	r2, [pc, #60]	; (800a428 <HAL_UART_Transmit_IT+0x100>)
 800a3ec:	675a      	str	r2, [r3, #116]	; 0x74
 800a3ee:	e002      	b.n	800a3f6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4a0e      	ldr	r2, [pc, #56]	; (800a42c <HAL_UART_Transmit_IT+0x104>)
 800a3f4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a40c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	e000      	b.n	800a414 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800a412:	2302      	movs	r3, #2
  }
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	0800bb85 	.word	0x0800bb85
 800a424:	0800baeb 	.word	0x0800baeb
 800a428:	0800ba6d 	.word	0x0800ba6d
 800a42c:	0800b9f9 	.word	0x0800b9f9

0800a430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	f640 030f 	movw	r3, #2063	; 0x80f
 800a456:	4013      	ands	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d118      	bne.n	800a492 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f003 0320 	and.w	r3, r3, #32
 800a466:	2b00      	cmp	r3, #0
 800a468:	d013      	beq.n	800a492 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 8282 	beq.w	800a98c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
      }
      return;
 800a490:	e27c      	b.n	800a98c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80ef 	beq.w	800a678 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	4b73      	ldr	r3, [pc, #460]	; (800a66c <HAL_UART_IRQHandler+0x23c>)
 800a49e:	4013      	ands	r3, r2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d105      	bne.n	800a4b0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	4b72      	ldr	r3, [pc, #456]	; (800a670 <HAL_UART_IRQHandler+0x240>)
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80e4 	beq.w	800a678 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d010      	beq.n	800a4dc <HAL_UART_IRQHandler+0xac>
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d2:	f043 0201 	orr.w	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_UART_IRQHandler+0xd8>
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4fe:	f043 0204 	orr.w	r2, r3, #4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d010      	beq.n	800a534 <HAL_UART_IRQHandler+0x104>
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2204      	movs	r2, #4
 800a522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a52a:	f043 0202 	orr.w	r2, r3, #2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f003 0308 	and.w	r3, r3, #8
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d015      	beq.n	800a56a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d104      	bne.n	800a552 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	4b48      	ldr	r3, [pc, #288]	; (800a66c <HAL_UART_IRQHandler+0x23c>)
 800a54c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00b      	beq.n	800a56a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2208      	movs	r2, #8
 800a558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a560:	f043 0208 	orr.w	r2, r3, #8
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a570:	2b00      	cmp	r3, #0
 800a572:	d011      	beq.n	800a598 <HAL_UART_IRQHandler+0x168>
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a58e:	f043 0220 	orr.w	r2, r3, #32
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 81f6 	beq.w	800a990 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d011      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e4:	2b40      	cmp	r3, #64	; 0x40
 800a5e6:	d004      	beq.n	800a5f2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d031      	beq.n	800a656 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f9b8 	bl	800b968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a602:	2b40      	cmp	r3, #64	; 0x40
 800a604:	d123      	bne.n	800a64e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a614:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d013      	beq.n	800a646 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a622:	4a14      	ldr	r2, [pc, #80]	; (800a674 <HAL_UART_IRQHandler+0x244>)
 800a624:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fa f9fc 	bl	8004a28 <HAL_DMA_Abort_IT>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d017      	beq.n	800a666 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a640:	4610      	mov	r0, r2
 800a642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a644:	e00f      	b.n	800a666 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f9ac 	bl	800a9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a64c:	e00b      	b.n	800a666 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f9a8 	bl	800a9a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a654:	e007      	b.n	800a666 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f9a4 	bl	800a9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a664:	e194      	b.n	800a990 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a666:	bf00      	nop
    return;
 800a668:	e192      	b.n	800a990 <HAL_UART_IRQHandler+0x560>
 800a66a:	bf00      	nop
 800a66c:	10000001 	.word	0x10000001
 800a670:	04000120 	.word	0x04000120
 800a674:	0800b9cd 	.word	0x0800b9cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	f040 810f 	bne.w	800a8a0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f003 0310 	and.w	r3, r3, #16
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8109 	beq.w	800a8a0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8103 	beq.w	800a8a0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2210      	movs	r2, #16
 800a6a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ac:	2b40      	cmp	r3, #64	; 0x40
 800a6ae:	f040 80bb 	bne.w	800a828 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a96      	ldr	r2, [pc, #600]	; (800a914 <HAL_UART_IRQHandler+0x4e4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d059      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a94      	ldr	r2, [pc, #592]	; (800a918 <HAL_UART_IRQHandler+0x4e8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d053      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a92      	ldr	r2, [pc, #584]	; (800a91c <HAL_UART_IRQHandler+0x4ec>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d04d      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a90      	ldr	r2, [pc, #576]	; (800a920 <HAL_UART_IRQHandler+0x4f0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d047      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a8e      	ldr	r2, [pc, #568]	; (800a924 <HAL_UART_IRQHandler+0x4f4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d041      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a8c      	ldr	r2, [pc, #560]	; (800a928 <HAL_UART_IRQHandler+0x4f8>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d03b      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a8a      	ldr	r2, [pc, #552]	; (800a92c <HAL_UART_IRQHandler+0x4fc>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d035      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a88      	ldr	r2, [pc, #544]	; (800a930 <HAL_UART_IRQHandler+0x500>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d02f      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a86      	ldr	r2, [pc, #536]	; (800a934 <HAL_UART_IRQHandler+0x504>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d029      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a84      	ldr	r2, [pc, #528]	; (800a938 <HAL_UART_IRQHandler+0x508>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d023      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a82      	ldr	r2, [pc, #520]	; (800a93c <HAL_UART_IRQHandler+0x50c>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01d      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a80      	ldr	r2, [pc, #512]	; (800a940 <HAL_UART_IRQHandler+0x510>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d017      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a7e      	ldr	r2, [pc, #504]	; (800a944 <HAL_UART_IRQHandler+0x514>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d011      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a7c      	ldr	r2, [pc, #496]	; (800a948 <HAL_UART_IRQHandler+0x518>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00b      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a7a      	ldr	r2, [pc, #488]	; (800a94c <HAL_UART_IRQHandler+0x51c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d005      	beq.n	800a772 <HAL_UART_IRQHandler+0x342>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a78      	ldr	r2, [pc, #480]	; (800a950 <HAL_UART_IRQHandler+0x520>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d105      	bne.n	800a77e <HAL_UART_IRQHandler+0x34e>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	e004      	b.n	800a788 <HAL_UART_IRQHandler+0x358>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	b29b      	uxth	r3, r3
 800a788:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a78a:	893b      	ldrh	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 8101 	beq.w	800a994 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a798:	893a      	ldrh	r2, [r7, #8]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	f080 80fa 	bcs.w	800a994 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	893a      	ldrh	r2, [r7, #8]
 800a7a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b2:	d02b      	beq.n	800a80c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	689a      	ldr	r2, [r3, #8]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0201 	bic.w	r2, r2, #1
 800a7d2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7e2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0210 	bic.w	r2, r2, #16
 800a800:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a806:	4618      	mov	r0, r3
 800a808:	f7f9 fdf0 	bl	80043ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a818:	b29b      	uxth	r3, r3
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f8c9 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a826:	e0b5      	b.n	800a994 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a834:	b29b      	uxth	r3, r3
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a840:	b29b      	uxth	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 80a8 	beq.w	800a998 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800a848:	897b      	ldrh	r3, [r7, #10]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 80a4 	beq.w	800a998 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a85e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6899      	ldr	r1, [r3, #8]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	4b3a      	ldr	r3, [pc, #232]	; (800a954 <HAL_UART_IRQHandler+0x524>)
 800a86c:	400b      	ands	r3, r1
 800a86e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0210 	bic.w	r2, r2, #16
 800a892:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a894:	897b      	ldrh	r3, [r7, #10]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f88d 	bl	800a9b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a89e:	e07b      	b.n	800a998 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00d      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x496>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d008      	beq.n	800a8c6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a8bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f001 f9cc 	bl	800bc5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8c4:	e06b      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d012      	beq.n	800a8f6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d008      	beq.n	800a8f6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d057      	beq.n	800a99c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
    }
    return;
 800a8f4:	e052      	b.n	800a99c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d02b      	beq.n	800a958 <HAL_UART_IRQHandler+0x528>
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	d026      	beq.n	800a958 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 f98c 	bl	800bc28 <UART_EndTransmit_IT>
    return;
 800a910:	e045      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
 800a912:	bf00      	nop
 800a914:	40020010 	.word	0x40020010
 800a918:	40020028 	.word	0x40020028
 800a91c:	40020040 	.word	0x40020040
 800a920:	40020058 	.word	0x40020058
 800a924:	40020070 	.word	0x40020070
 800a928:	40020088 	.word	0x40020088
 800a92c:	400200a0 	.word	0x400200a0
 800a930:	400200b8 	.word	0x400200b8
 800a934:	40020410 	.word	0x40020410
 800a938:	40020428 	.word	0x40020428
 800a93c:	40020440 	.word	0x40020440
 800a940:	40020458 	.word	0x40020458
 800a944:	40020470 	.word	0x40020470
 800a948:	40020488 	.word	0x40020488
 800a94c:	400204a0 	.word	0x400204a0
 800a950:	400204b8 	.word	0x400204b8
 800a954:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d008      	beq.n	800a974 <HAL_UART_IRQHandler+0x544>
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 f989 	bl	800bc84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a972:	e014      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00f      	beq.n	800a99e <HAL_UART_IRQHandler+0x56e>
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	da0c      	bge.n	800a99e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 f973 	bl	800bc70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a98a:	e008      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
      return;
 800a98c:	bf00      	nop
 800a98e:	e006      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
    return;
 800a990:	bf00      	nop
 800a992:	e004      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
      return;
 800a994:	bf00      	nop
 800a996:	e002      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
      return;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <HAL_UART_IRQHandler+0x56e>
    return;
 800a99c:	bf00      	nop
  }
}
 800a99e:	3720      	adds	r7, #32
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b08e      	sub	sp, #56	; 0x38
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	4bbf      	ldr	r3, [pc, #764]	; (800acfc <UART_SetConfig+0x32c>)
 800a9fe:	4013      	ands	r3, r2
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	6812      	ldr	r2, [r2, #0]
 800aa04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4ab5      	ldr	r2, [pc, #724]	; (800ad00 <UART_SetConfig+0x330>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d004      	beq.n	800aa3a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa36:	4313      	orrs	r3, r2
 800aa38:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	4bb0      	ldr	r3, [pc, #704]	; (800ad04 <UART_SetConfig+0x334>)
 800aa42:	4013      	ands	r3, r2
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa4a:	430b      	orrs	r3, r1
 800aa4c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa54:	f023 010f 	bic.w	r1, r3, #15
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4aa7      	ldr	r2, [pc, #668]	; (800ad08 <UART_SetConfig+0x338>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d176      	bne.n	800ab5c <UART_SetConfig+0x18c>
 800aa6e:	4ba7      	ldr	r3, [pc, #668]	; (800ad0c <UART_SetConfig+0x33c>)
 800aa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa76:	2b28      	cmp	r3, #40	; 0x28
 800aa78:	d86c      	bhi.n	800ab54 <UART_SetConfig+0x184>
 800aa7a:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <UART_SetConfig+0xb0>)
 800aa7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa80:	0800ab25 	.word	0x0800ab25
 800aa84:	0800ab55 	.word	0x0800ab55
 800aa88:	0800ab55 	.word	0x0800ab55
 800aa8c:	0800ab55 	.word	0x0800ab55
 800aa90:	0800ab55 	.word	0x0800ab55
 800aa94:	0800ab55 	.word	0x0800ab55
 800aa98:	0800ab55 	.word	0x0800ab55
 800aa9c:	0800ab55 	.word	0x0800ab55
 800aaa0:	0800ab2d 	.word	0x0800ab2d
 800aaa4:	0800ab55 	.word	0x0800ab55
 800aaa8:	0800ab55 	.word	0x0800ab55
 800aaac:	0800ab55 	.word	0x0800ab55
 800aab0:	0800ab55 	.word	0x0800ab55
 800aab4:	0800ab55 	.word	0x0800ab55
 800aab8:	0800ab55 	.word	0x0800ab55
 800aabc:	0800ab55 	.word	0x0800ab55
 800aac0:	0800ab35 	.word	0x0800ab35
 800aac4:	0800ab55 	.word	0x0800ab55
 800aac8:	0800ab55 	.word	0x0800ab55
 800aacc:	0800ab55 	.word	0x0800ab55
 800aad0:	0800ab55 	.word	0x0800ab55
 800aad4:	0800ab55 	.word	0x0800ab55
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab3d 	.word	0x0800ab3d
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab55 	.word	0x0800ab55
 800aaec:	0800ab55 	.word	0x0800ab55
 800aaf0:	0800ab55 	.word	0x0800ab55
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	0800ab55 	.word	0x0800ab55
 800aafc:	0800ab55 	.word	0x0800ab55
 800ab00:	0800ab45 	.word	0x0800ab45
 800ab04:	0800ab55 	.word	0x0800ab55
 800ab08:	0800ab55 	.word	0x0800ab55
 800ab0c:	0800ab55 	.word	0x0800ab55
 800ab10:	0800ab55 	.word	0x0800ab55
 800ab14:	0800ab55 	.word	0x0800ab55
 800ab18:	0800ab55 	.word	0x0800ab55
 800ab1c:	0800ab55 	.word	0x0800ab55
 800ab20:	0800ab4d 	.word	0x0800ab4d
 800ab24:	2301      	movs	r3, #1
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab2a:	e326      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab2c:	2304      	movs	r3, #4
 800ab2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab32:	e322      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab34:	2308      	movs	r3, #8
 800ab36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab3a:	e31e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab3c:	2310      	movs	r3, #16
 800ab3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab42:	e31a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab44:	2320      	movs	r3, #32
 800ab46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4a:	e316      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab4c:	2340      	movs	r3, #64	; 0x40
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab52:	e312      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab54:	2380      	movs	r3, #128	; 0x80
 800ab56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5a:	e30e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a6b      	ldr	r2, [pc, #428]	; (800ad10 <UART_SetConfig+0x340>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d130      	bne.n	800abc8 <UART_SetConfig+0x1f8>
 800ab66:	4b69      	ldr	r3, [pc, #420]	; (800ad0c <UART_SetConfig+0x33c>)
 800ab68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	d826      	bhi.n	800abc0 <UART_SetConfig+0x1f0>
 800ab72:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <UART_SetConfig+0x1a8>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800ab91 	.word	0x0800ab91
 800ab7c:	0800ab99 	.word	0x0800ab99
 800ab80:	0800aba1 	.word	0x0800aba1
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb9 	.word	0x0800abb9
 800ab90:	2300      	movs	r3, #0
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab96:	e2f0      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ab98:	2304      	movs	r3, #4
 800ab9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab9e:	e2ec      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aba0:	2308      	movs	r3, #8
 800aba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aba6:	e2e8      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aba8:	2310      	movs	r3, #16
 800abaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abae:	e2e4      	b.n	800b17a <UART_SetConfig+0x7aa>
 800abb0:	2320      	movs	r3, #32
 800abb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abb6:	e2e0      	b.n	800b17a <UART_SetConfig+0x7aa>
 800abb8:	2340      	movs	r3, #64	; 0x40
 800abba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abbe:	e2dc      	b.n	800b17a <UART_SetConfig+0x7aa>
 800abc0:	2380      	movs	r3, #128	; 0x80
 800abc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abc6:	e2d8      	b.n	800b17a <UART_SetConfig+0x7aa>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a51      	ldr	r2, [pc, #324]	; (800ad14 <UART_SetConfig+0x344>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d130      	bne.n	800ac34 <UART_SetConfig+0x264>
 800abd2:	4b4e      	ldr	r3, [pc, #312]	; (800ad0c <UART_SetConfig+0x33c>)
 800abd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d826      	bhi.n	800ac2c <UART_SetConfig+0x25c>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <UART_SetConfig+0x214>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800abfd 	.word	0x0800abfd
 800abe8:	0800ac05 	.word	0x0800ac05
 800abec:	0800ac0d 	.word	0x0800ac0d
 800abf0:	0800ac15 	.word	0x0800ac15
 800abf4:	0800ac1d 	.word	0x0800ac1d
 800abf8:	0800ac25 	.word	0x0800ac25
 800abfc:	2300      	movs	r3, #0
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e2ba      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac04:	2304      	movs	r3, #4
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e2b6      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac0c:	2308      	movs	r3, #8
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e2b2      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac14:	2310      	movs	r3, #16
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e2ae      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac1c:	2320      	movs	r3, #32
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e2aa      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e2a6      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac2c:	2380      	movs	r3, #128	; 0x80
 800ac2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac32:	e2a2      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a37      	ldr	r2, [pc, #220]	; (800ad18 <UART_SetConfig+0x348>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d130      	bne.n	800aca0 <UART_SetConfig+0x2d0>
 800ac3e:	4b33      	ldr	r3, [pc, #204]	; (800ad0c <UART_SetConfig+0x33c>)
 800ac40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d826      	bhi.n	800ac98 <UART_SetConfig+0x2c8>
 800ac4a:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0x280>)
 800ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac50:	0800ac69 	.word	0x0800ac69
 800ac54:	0800ac71 	.word	0x0800ac71
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	0800ac81 	.word	0x0800ac81
 800ac60:	0800ac89 	.word	0x0800ac89
 800ac64:	0800ac91 	.word	0x0800ac91
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e284      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac70:	2304      	movs	r3, #4
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e280      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac78:	2308      	movs	r3, #8
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e27c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac80:	2310      	movs	r3, #16
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e278      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e274      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac90:	2340      	movs	r3, #64	; 0x40
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e270      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ac98:	2380      	movs	r3, #128	; 0x80
 800ac9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9e:	e26c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1d      	ldr	r2, [pc, #116]	; (800ad1c <UART_SetConfig+0x34c>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d142      	bne.n	800ad30 <UART_SetConfig+0x360>
 800acaa:	4b18      	ldr	r3, [pc, #96]	; (800ad0c <UART_SetConfig+0x33c>)
 800acac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d838      	bhi.n	800ad28 <UART_SetConfig+0x358>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <UART_SetConfig+0x2ec>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800acd5 	.word	0x0800acd5
 800acc0:	0800acdd 	.word	0x0800acdd
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800aced 	.word	0x0800aced
 800accc:	0800acf5 	.word	0x0800acf5
 800acd0:	0800ad21 	.word	0x0800ad21
 800acd4:	2300      	movs	r3, #0
 800acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acda:	e24e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800acdc:	2304      	movs	r3, #4
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace2:	e24a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ace4:	2308      	movs	r3, #8
 800ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acea:	e246      	b.n	800b17a <UART_SetConfig+0x7aa>
 800acec:	2310      	movs	r3, #16
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf2:	e242      	b.n	800b17a <UART_SetConfig+0x7aa>
 800acf4:	2320      	movs	r3, #32
 800acf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfa:	e23e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800acfc:	cfff69f3 	.word	0xcfff69f3
 800ad00:	58000c00 	.word	0x58000c00
 800ad04:	11fff4ff 	.word	0x11fff4ff
 800ad08:	40011000 	.word	0x40011000
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	40004400 	.word	0x40004400
 800ad14:	40004800 	.word	0x40004800
 800ad18:	40004c00 	.word	0x40004c00
 800ad1c:	40005000 	.word	0x40005000
 800ad20:	2340      	movs	r3, #64	; 0x40
 800ad22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad26:	e228      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ad28:	2380      	movs	r3, #128	; 0x80
 800ad2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2e:	e224      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4ab1      	ldr	r2, [pc, #708]	; (800affc <UART_SetConfig+0x62c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d176      	bne.n	800ae28 <UART_SetConfig+0x458>
 800ad3a:	4bb1      	ldr	r3, [pc, #708]	; (800b000 <UART_SetConfig+0x630>)
 800ad3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad42:	2b28      	cmp	r3, #40	; 0x28
 800ad44:	d86c      	bhi.n	800ae20 <UART_SetConfig+0x450>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <UART_SetConfig+0x37c>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800adf1 	.word	0x0800adf1
 800ad50:	0800ae21 	.word	0x0800ae21
 800ad54:	0800ae21 	.word	0x0800ae21
 800ad58:	0800ae21 	.word	0x0800ae21
 800ad5c:	0800ae21 	.word	0x0800ae21
 800ad60:	0800ae21 	.word	0x0800ae21
 800ad64:	0800ae21 	.word	0x0800ae21
 800ad68:	0800ae21 	.word	0x0800ae21
 800ad6c:	0800adf9 	.word	0x0800adf9
 800ad70:	0800ae21 	.word	0x0800ae21
 800ad74:	0800ae21 	.word	0x0800ae21
 800ad78:	0800ae21 	.word	0x0800ae21
 800ad7c:	0800ae21 	.word	0x0800ae21
 800ad80:	0800ae21 	.word	0x0800ae21
 800ad84:	0800ae21 	.word	0x0800ae21
 800ad88:	0800ae21 	.word	0x0800ae21
 800ad8c:	0800ae01 	.word	0x0800ae01
 800ad90:	0800ae21 	.word	0x0800ae21
 800ad94:	0800ae21 	.word	0x0800ae21
 800ad98:	0800ae21 	.word	0x0800ae21
 800ad9c:	0800ae21 	.word	0x0800ae21
 800ada0:	0800ae21 	.word	0x0800ae21
 800ada4:	0800ae21 	.word	0x0800ae21
 800ada8:	0800ae21 	.word	0x0800ae21
 800adac:	0800ae09 	.word	0x0800ae09
 800adb0:	0800ae21 	.word	0x0800ae21
 800adb4:	0800ae21 	.word	0x0800ae21
 800adb8:	0800ae21 	.word	0x0800ae21
 800adbc:	0800ae21 	.word	0x0800ae21
 800adc0:	0800ae21 	.word	0x0800ae21
 800adc4:	0800ae21 	.word	0x0800ae21
 800adc8:	0800ae21 	.word	0x0800ae21
 800adcc:	0800ae11 	.word	0x0800ae11
 800add0:	0800ae21 	.word	0x0800ae21
 800add4:	0800ae21 	.word	0x0800ae21
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae21 	.word	0x0800ae21
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae21 	.word	0x0800ae21
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae19 	.word	0x0800ae19
 800adf0:	2301      	movs	r3, #1
 800adf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf6:	e1c0      	b.n	800b17a <UART_SetConfig+0x7aa>
 800adf8:	2304      	movs	r3, #4
 800adfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfe:	e1bc      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae00:	2308      	movs	r3, #8
 800ae02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae06:	e1b8      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0e:	e1b4      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae10:	2320      	movs	r3, #32
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae16:	e1b0      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1e:	e1ac      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae20:	2380      	movs	r3, #128	; 0x80
 800ae22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae26:	e1a8      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a75      	ldr	r2, [pc, #468]	; (800b004 <UART_SetConfig+0x634>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d130      	bne.n	800ae94 <UART_SetConfig+0x4c4>
 800ae32:	4b73      	ldr	r3, [pc, #460]	; (800b000 <UART_SetConfig+0x630>)
 800ae34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b05      	cmp	r3, #5
 800ae3c:	d826      	bhi.n	800ae8c <UART_SetConfig+0x4bc>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x474>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800ae5d 	.word	0x0800ae5d
 800ae48:	0800ae65 	.word	0x0800ae65
 800ae4c:	0800ae6d 	.word	0x0800ae6d
 800ae50:	0800ae75 	.word	0x0800ae75
 800ae54:	0800ae7d 	.word	0x0800ae7d
 800ae58:	0800ae85 	.word	0x0800ae85
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae62:	e18a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae64:	2304      	movs	r3, #4
 800ae66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6a:	e186      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae6c:	2308      	movs	r3, #8
 800ae6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae72:	e182      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae74:	2310      	movs	r3, #16
 800ae76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7a:	e17e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae7c:	2320      	movs	r3, #32
 800ae7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae82:	e17a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8a:	e176      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae8c:	2380      	movs	r3, #128	; 0x80
 800ae8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae92:	e172      	b.n	800b17a <UART_SetConfig+0x7aa>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a5b      	ldr	r2, [pc, #364]	; (800b008 <UART_SetConfig+0x638>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d130      	bne.n	800af00 <UART_SetConfig+0x530>
 800ae9e:	4b58      	ldr	r3, [pc, #352]	; (800b000 <UART_SetConfig+0x630>)
 800aea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b05      	cmp	r3, #5
 800aea8:	d826      	bhi.n	800aef8 <UART_SetConfig+0x528>
 800aeaa:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <UART_SetConfig+0x4e0>)
 800aeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb0:	0800aec9 	.word	0x0800aec9
 800aeb4:	0800aed1 	.word	0x0800aed1
 800aeb8:	0800aed9 	.word	0x0800aed9
 800aebc:	0800aee1 	.word	0x0800aee1
 800aec0:	0800aee9 	.word	0x0800aee9
 800aec4:	0800aef1 	.word	0x0800aef1
 800aec8:	2300      	movs	r3, #0
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e154      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aed0:	2304      	movs	r3, #4
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e150      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aed8:	2308      	movs	r3, #8
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e14c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aee0:	2310      	movs	r3, #16
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e148      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aee8:	2320      	movs	r3, #32
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e144      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aef0:	2340      	movs	r3, #64	; 0x40
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e140      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aef8:	2380      	movs	r3, #128	; 0x80
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e13c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a41      	ldr	r2, [pc, #260]	; (800b00c <UART_SetConfig+0x63c>)
 800af06:	4293      	cmp	r3, r2
 800af08:	f040 8082 	bne.w	800b010 <UART_SetConfig+0x640>
 800af0c:	4b3c      	ldr	r3, [pc, #240]	; (800b000 <UART_SetConfig+0x630>)
 800af0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af14:	2b28      	cmp	r3, #40	; 0x28
 800af16:	d86d      	bhi.n	800aff4 <UART_SetConfig+0x624>
 800af18:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <UART_SetConfig+0x550>)
 800af1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1e:	bf00      	nop
 800af20:	0800afc5 	.word	0x0800afc5
 800af24:	0800aff5 	.word	0x0800aff5
 800af28:	0800aff5 	.word	0x0800aff5
 800af2c:	0800aff5 	.word	0x0800aff5
 800af30:	0800aff5 	.word	0x0800aff5
 800af34:	0800aff5 	.word	0x0800aff5
 800af38:	0800aff5 	.word	0x0800aff5
 800af3c:	0800aff5 	.word	0x0800aff5
 800af40:	0800afcd 	.word	0x0800afcd
 800af44:	0800aff5 	.word	0x0800aff5
 800af48:	0800aff5 	.word	0x0800aff5
 800af4c:	0800aff5 	.word	0x0800aff5
 800af50:	0800aff5 	.word	0x0800aff5
 800af54:	0800aff5 	.word	0x0800aff5
 800af58:	0800aff5 	.word	0x0800aff5
 800af5c:	0800aff5 	.word	0x0800aff5
 800af60:	0800afd5 	.word	0x0800afd5
 800af64:	0800aff5 	.word	0x0800aff5
 800af68:	0800aff5 	.word	0x0800aff5
 800af6c:	0800aff5 	.word	0x0800aff5
 800af70:	0800aff5 	.word	0x0800aff5
 800af74:	0800aff5 	.word	0x0800aff5
 800af78:	0800aff5 	.word	0x0800aff5
 800af7c:	0800aff5 	.word	0x0800aff5
 800af80:	0800afdd 	.word	0x0800afdd
 800af84:	0800aff5 	.word	0x0800aff5
 800af88:	0800aff5 	.word	0x0800aff5
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800aff5 	.word	0x0800aff5
 800af94:	0800aff5 	.word	0x0800aff5
 800af98:	0800aff5 	.word	0x0800aff5
 800af9c:	0800aff5 	.word	0x0800aff5
 800afa0:	0800afe5 	.word	0x0800afe5
 800afa4:	0800aff5 	.word	0x0800aff5
 800afa8:	0800aff5 	.word	0x0800aff5
 800afac:	0800aff5 	.word	0x0800aff5
 800afb0:	0800aff5 	.word	0x0800aff5
 800afb4:	0800aff5 	.word	0x0800aff5
 800afb8:	0800aff5 	.word	0x0800aff5
 800afbc:	0800aff5 	.word	0x0800aff5
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	2301      	movs	r3, #1
 800afc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afca:	e0d6      	b.n	800b17a <UART_SetConfig+0x7aa>
 800afcc:	2304      	movs	r3, #4
 800afce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd2:	e0d2      	b.n	800b17a <UART_SetConfig+0x7aa>
 800afd4:	2308      	movs	r3, #8
 800afd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afda:	e0ce      	b.n	800b17a <UART_SetConfig+0x7aa>
 800afdc:	2310      	movs	r3, #16
 800afde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe2:	e0ca      	b.n	800b17a <UART_SetConfig+0x7aa>
 800afe4:	2320      	movs	r3, #32
 800afe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afea:	e0c6      	b.n	800b17a <UART_SetConfig+0x7aa>
 800afec:	2340      	movs	r3, #64	; 0x40
 800afee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff2:	e0c2      	b.n	800b17a <UART_SetConfig+0x7aa>
 800aff4:	2380      	movs	r3, #128	; 0x80
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affa:	e0be      	b.n	800b17a <UART_SetConfig+0x7aa>
 800affc:	40011400 	.word	0x40011400
 800b000:	58024400 	.word	0x58024400
 800b004:	40007800 	.word	0x40007800
 800b008:	40007c00 	.word	0x40007c00
 800b00c:	40011800 	.word	0x40011800
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4aad      	ldr	r2, [pc, #692]	; (800b2cc <UART_SetConfig+0x8fc>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d176      	bne.n	800b108 <UART_SetConfig+0x738>
 800b01a:	4bad      	ldr	r3, [pc, #692]	; (800b2d0 <UART_SetConfig+0x900>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b022:	2b28      	cmp	r3, #40	; 0x28
 800b024:	d86c      	bhi.n	800b100 <UART_SetConfig+0x730>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x65c>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b0d1 	.word	0x0800b0d1
 800b030:	0800b101 	.word	0x0800b101
 800b034:	0800b101 	.word	0x0800b101
 800b038:	0800b101 	.word	0x0800b101
 800b03c:	0800b101 	.word	0x0800b101
 800b040:	0800b101 	.word	0x0800b101
 800b044:	0800b101 	.word	0x0800b101
 800b048:	0800b101 	.word	0x0800b101
 800b04c:	0800b0d9 	.word	0x0800b0d9
 800b050:	0800b101 	.word	0x0800b101
 800b054:	0800b101 	.word	0x0800b101
 800b058:	0800b101 	.word	0x0800b101
 800b05c:	0800b101 	.word	0x0800b101
 800b060:	0800b101 	.word	0x0800b101
 800b064:	0800b101 	.word	0x0800b101
 800b068:	0800b101 	.word	0x0800b101
 800b06c:	0800b0e1 	.word	0x0800b0e1
 800b070:	0800b101 	.word	0x0800b101
 800b074:	0800b101 	.word	0x0800b101
 800b078:	0800b101 	.word	0x0800b101
 800b07c:	0800b101 	.word	0x0800b101
 800b080:	0800b101 	.word	0x0800b101
 800b084:	0800b101 	.word	0x0800b101
 800b088:	0800b101 	.word	0x0800b101
 800b08c:	0800b0e9 	.word	0x0800b0e9
 800b090:	0800b101 	.word	0x0800b101
 800b094:	0800b101 	.word	0x0800b101
 800b098:	0800b101 	.word	0x0800b101
 800b09c:	0800b101 	.word	0x0800b101
 800b0a0:	0800b101 	.word	0x0800b101
 800b0a4:	0800b101 	.word	0x0800b101
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b0f1 	.word	0x0800b0f1
 800b0b0:	0800b101 	.word	0x0800b101
 800b0b4:	0800b101 	.word	0x0800b101
 800b0b8:	0800b101 	.word	0x0800b101
 800b0bc:	0800b101 	.word	0x0800b101
 800b0c0:	0800b101 	.word	0x0800b101
 800b0c4:	0800b101 	.word	0x0800b101
 800b0c8:	0800b101 	.word	0x0800b101
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e050      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e04c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e048      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ee:	e044      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f6:	e040      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fe:	e03c      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b106:	e038      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a71      	ldr	r2, [pc, #452]	; (800b2d4 <UART_SetConfig+0x904>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d130      	bne.n	800b174 <UART_SetConfig+0x7a4>
 800b112:	4b6f      	ldr	r3, [pc, #444]	; (800b2d0 <UART_SetConfig+0x900>)
 800b114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d826      	bhi.n	800b16c <UART_SetConfig+0x79c>
 800b11e:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <UART_SetConfig+0x754>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b14d 	.word	0x0800b14d
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	2302      	movs	r3, #2
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e01a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b144:	2304      	movs	r3, #4
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e016      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b14c:	2308      	movs	r3, #8
 800b14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b152:	e012      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b154:	2310      	movs	r3, #16
 800b156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15a:	e00e      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b15c:	2320      	movs	r3, #32
 800b15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b162:	e00a      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b164:	2340      	movs	r3, #64	; 0x40
 800b166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16a:	e006      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b172:	e002      	b.n	800b17a <UART_SetConfig+0x7aa>
 800b174:	2380      	movs	r3, #128	; 0x80
 800b176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a55      	ldr	r2, [pc, #340]	; (800b2d4 <UART_SetConfig+0x904>)
 800b180:	4293      	cmp	r3, r2
 800b182:	f040 80f0 	bne.w	800b366 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b186:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	dc46      	bgt.n	800b21c <UART_SetConfig+0x84c>
 800b18e:	2b02      	cmp	r3, #2
 800b190:	db75      	blt.n	800b27e <UART_SetConfig+0x8ae>
 800b192:	3b02      	subs	r3, #2
 800b194:	2b1e      	cmp	r3, #30
 800b196:	d872      	bhi.n	800b27e <UART_SetConfig+0x8ae>
 800b198:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <UART_SetConfig+0x7d0>)
 800b19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19e:	bf00      	nop
 800b1a0:	0800b223 	.word	0x0800b223
 800b1a4:	0800b27f 	.word	0x0800b27f
 800b1a8:	0800b22b 	.word	0x0800b22b
 800b1ac:	0800b27f 	.word	0x0800b27f
 800b1b0:	0800b27f 	.word	0x0800b27f
 800b1b4:	0800b27f 	.word	0x0800b27f
 800b1b8:	0800b23b 	.word	0x0800b23b
 800b1bc:	0800b27f 	.word	0x0800b27f
 800b1c0:	0800b27f 	.word	0x0800b27f
 800b1c4:	0800b27f 	.word	0x0800b27f
 800b1c8:	0800b27f 	.word	0x0800b27f
 800b1cc:	0800b27f 	.word	0x0800b27f
 800b1d0:	0800b27f 	.word	0x0800b27f
 800b1d4:	0800b27f 	.word	0x0800b27f
 800b1d8:	0800b24b 	.word	0x0800b24b
 800b1dc:	0800b27f 	.word	0x0800b27f
 800b1e0:	0800b27f 	.word	0x0800b27f
 800b1e4:	0800b27f 	.word	0x0800b27f
 800b1e8:	0800b27f 	.word	0x0800b27f
 800b1ec:	0800b27f 	.word	0x0800b27f
 800b1f0:	0800b27f 	.word	0x0800b27f
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b27f 	.word	0x0800b27f
 800b1fc:	0800b27f 	.word	0x0800b27f
 800b200:	0800b27f 	.word	0x0800b27f
 800b204:	0800b27f 	.word	0x0800b27f
 800b208:	0800b27f 	.word	0x0800b27f
 800b20c:	0800b27f 	.word	0x0800b27f
 800b210:	0800b27f 	.word	0x0800b27f
 800b214:	0800b27f 	.word	0x0800b27f
 800b218:	0800b271 	.word	0x0800b271
 800b21c:	2b40      	cmp	r3, #64	; 0x40
 800b21e:	d02a      	beq.n	800b276 <UART_SetConfig+0x8a6>
 800b220:	e02d      	b.n	800b27e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b222:	f7fd fda5 	bl	8008d70 <HAL_RCCEx_GetD3PCLK1Freq>
 800b226:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b228:	e02f      	b.n	800b28a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22a:	f107 0314 	add.w	r3, r7, #20
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fd fdb4 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b238:	e027      	b.n	800b28a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b23a:	f107 0308 	add.w	r3, r7, #8
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fd ff00 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b248:	e01f      	b.n	800b28a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b24a:	4b21      	ldr	r3, [pc, #132]	; (800b2d0 <UART_SetConfig+0x900>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b256:	4b1e      	ldr	r3, [pc, #120]	; (800b2d0 <UART_SetConfig+0x900>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	08db      	lsrs	r3, r3, #3
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	4a1d      	ldr	r2, [pc, #116]	; (800b2d8 <UART_SetConfig+0x908>)
 800b262:	fa22 f303 	lsr.w	r3, r2, r3
 800b266:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b268:	e00f      	b.n	800b28a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b26a:	4b1b      	ldr	r3, [pc, #108]	; (800b2d8 <UART_SetConfig+0x908>)
 800b26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b26e:	e00c      	b.n	800b28a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b270:	4b1a      	ldr	r3, [pc, #104]	; (800b2dc <UART_SetConfig+0x90c>)
 800b272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b274:	e009      	b.n	800b28a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b27c:	e005      	b.n	800b28a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 81e6 	beq.w	800b65e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	4a12      	ldr	r2, [pc, #72]	; (800b2e0 <UART_SetConfig+0x910>)
 800b298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685a      	ldr	r2, [r3, #4]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	6a3a      	ldr	r2, [r7, #32]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d305      	bcc.n	800b2c2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2bc:	6a3a      	ldr	r2, [r7, #32]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d910      	bls.n	800b2e4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b2c8:	e1c9      	b.n	800b65e <UART_SetConfig+0xc8e>
 800b2ca:	bf00      	nop
 800b2cc:	40011c00 	.word	0x40011c00
 800b2d0:	58024400 	.word	0x58024400
 800b2d4:	58000c00 	.word	0x58000c00
 800b2d8:	03d09000 	.word	0x03d09000
 800b2dc:	003d0900 	.word	0x003d0900
 800b2e0:	0800bff4 	.word	0x0800bff4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f04f 0100 	mov.w	r1, #0
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	4ac1      	ldr	r2, [pc, #772]	; (800b5f8 <UART_SetConfig+0xc28>)
 800b2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	f7f5 f810 	bl	8000320 <__aeabi_uldivmod>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4610      	mov	r0, r2
 800b306:	4619      	mov	r1, r3
 800b308:	f04f 0200 	mov.w	r2, #0
 800b30c:	f04f 0300 	mov.w	r3, #0
 800b310:	020b      	lsls	r3, r1, #8
 800b312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b316:	0202      	lsls	r2, r0, #8
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	6849      	ldr	r1, [r1, #4]
 800b31c:	0849      	lsrs	r1, r1, #1
 800b31e:	4608      	mov	r0, r1
 800b320:	f04f 0100 	mov.w	r1, #0
 800b324:	1814      	adds	r4, r2, r0
 800b326:	eb43 0501 	adc.w	r5, r3, r1
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	461a      	mov	r2, r3
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	f7f4 fff2 	bl	8000320 <__aeabi_uldivmod>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4613      	mov	r3, r2
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b34a:	d308      	bcc.n	800b35e <UART_SetConfig+0x98e>
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b352:	d204      	bcs.n	800b35e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b35a:	60da      	str	r2, [r3, #12]
 800b35c:	e17f      	b.n	800b65e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b364:	e17b      	b.n	800b65e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	69db      	ldr	r3, [r3, #28]
 800b36a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b36e:	f040 80be 	bne.w	800b4ee <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800b372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b376:	2b20      	cmp	r3, #32
 800b378:	dc48      	bgt.n	800b40c <UART_SetConfig+0xa3c>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	db7b      	blt.n	800b476 <UART_SetConfig+0xaa6>
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d879      	bhi.n	800b476 <UART_SetConfig+0xaa6>
 800b382:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <UART_SetConfig+0x9b8>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b413 	.word	0x0800b413
 800b38c:	0800b41b 	.word	0x0800b41b
 800b390:	0800b477 	.word	0x0800b477
 800b394:	0800b477 	.word	0x0800b477
 800b398:	0800b423 	.word	0x0800b423
 800b39c:	0800b477 	.word	0x0800b477
 800b3a0:	0800b477 	.word	0x0800b477
 800b3a4:	0800b477 	.word	0x0800b477
 800b3a8:	0800b433 	.word	0x0800b433
 800b3ac:	0800b477 	.word	0x0800b477
 800b3b0:	0800b477 	.word	0x0800b477
 800b3b4:	0800b477 	.word	0x0800b477
 800b3b8:	0800b477 	.word	0x0800b477
 800b3bc:	0800b477 	.word	0x0800b477
 800b3c0:	0800b477 	.word	0x0800b477
 800b3c4:	0800b477 	.word	0x0800b477
 800b3c8:	0800b443 	.word	0x0800b443
 800b3cc:	0800b477 	.word	0x0800b477
 800b3d0:	0800b477 	.word	0x0800b477
 800b3d4:	0800b477 	.word	0x0800b477
 800b3d8:	0800b477 	.word	0x0800b477
 800b3dc:	0800b477 	.word	0x0800b477
 800b3e0:	0800b477 	.word	0x0800b477
 800b3e4:	0800b477 	.word	0x0800b477
 800b3e8:	0800b477 	.word	0x0800b477
 800b3ec:	0800b477 	.word	0x0800b477
 800b3f0:	0800b477 	.word	0x0800b477
 800b3f4:	0800b477 	.word	0x0800b477
 800b3f8:	0800b477 	.word	0x0800b477
 800b3fc:	0800b477 	.word	0x0800b477
 800b400:	0800b477 	.word	0x0800b477
 800b404:	0800b477 	.word	0x0800b477
 800b408:	0800b469 	.word	0x0800b469
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d02e      	beq.n	800b46e <UART_SetConfig+0xa9e>
 800b410:	e031      	b.n	800b476 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b412:	f7fc f963 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 800b416:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b418:	e033      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b41a:	f7fc f975 	bl	8007708 <HAL_RCC_GetPCLK2Freq>
 800b41e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b420:	e02f      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b422:	f107 0314 	add.w	r3, r7, #20
 800b426:	4618      	mov	r0, r3
 800b428:	f7fd fcb8 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b430:	e027      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd fe04 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b440:	e01f      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b442:	4b6e      	ldr	r3, [pc, #440]	; (800b5fc <UART_SetConfig+0xc2c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d009      	beq.n	800b462 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b44e:	4b6b      	ldr	r3, [pc, #428]	; (800b5fc <UART_SetConfig+0xc2c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	08db      	lsrs	r3, r3, #3
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	4a69      	ldr	r2, [pc, #420]	; (800b600 <UART_SetConfig+0xc30>)
 800b45a:	fa22 f303 	lsr.w	r3, r2, r3
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b460:	e00f      	b.n	800b482 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b462:	4b67      	ldr	r3, [pc, #412]	; (800b600 <UART_SetConfig+0xc30>)
 800b464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b466:	e00c      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b468:	4b66      	ldr	r3, [pc, #408]	; (800b604 <UART_SetConfig+0xc34>)
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b46c:	e009      	b.n	800b482 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b46e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b474:	e005      	b.n	800b482 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b484:	2b00      	cmp	r3, #0
 800b486:	f000 80ea 	beq.w	800b65e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	4a5a      	ldr	r2, [pc, #360]	; (800b5f8 <UART_SetConfig+0xc28>)
 800b490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b494:	461a      	mov	r2, r3
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	fbb3 f3f2 	udiv	r3, r3, r2
 800b49c:	005a      	lsls	r2, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	085b      	lsrs	r3, r3, #1
 800b4a4:	441a      	add	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	2b0f      	cmp	r3, #15
 800b4b6:	d916      	bls.n	800b4e6 <UART_SetConfig+0xb16>
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4be:	d212      	bcs.n	800b4e6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	f023 030f 	bic.w	r3, r3, #15
 800b4c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	085b      	lsrs	r3, r3, #1
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4e2:	60da      	str	r2, [r3, #12]
 800b4e4:	e0bb      	b.n	800b65e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b4ec:	e0b7      	b.n	800b65e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	dc4a      	bgt.n	800b58c <UART_SetConfig+0xbbc>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f2c0 8086 	blt.w	800b608 <UART_SetConfig+0xc38>
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	f200 8083 	bhi.w	800b608 <UART_SetConfig+0xc38>
 800b502:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <UART_SetConfig+0xb38>)
 800b504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b508:	0800b593 	.word	0x0800b593
 800b50c:	0800b59b 	.word	0x0800b59b
 800b510:	0800b609 	.word	0x0800b609
 800b514:	0800b609 	.word	0x0800b609
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b609 	.word	0x0800b609
 800b520:	0800b609 	.word	0x0800b609
 800b524:	0800b609 	.word	0x0800b609
 800b528:	0800b5b3 	.word	0x0800b5b3
 800b52c:	0800b609 	.word	0x0800b609
 800b530:	0800b609 	.word	0x0800b609
 800b534:	0800b609 	.word	0x0800b609
 800b538:	0800b609 	.word	0x0800b609
 800b53c:	0800b609 	.word	0x0800b609
 800b540:	0800b609 	.word	0x0800b609
 800b544:	0800b609 	.word	0x0800b609
 800b548:	0800b5c3 	.word	0x0800b5c3
 800b54c:	0800b609 	.word	0x0800b609
 800b550:	0800b609 	.word	0x0800b609
 800b554:	0800b609 	.word	0x0800b609
 800b558:	0800b609 	.word	0x0800b609
 800b55c:	0800b609 	.word	0x0800b609
 800b560:	0800b609 	.word	0x0800b609
 800b564:	0800b609 	.word	0x0800b609
 800b568:	0800b609 	.word	0x0800b609
 800b56c:	0800b609 	.word	0x0800b609
 800b570:	0800b609 	.word	0x0800b609
 800b574:	0800b609 	.word	0x0800b609
 800b578:	0800b609 	.word	0x0800b609
 800b57c:	0800b609 	.word	0x0800b609
 800b580:	0800b609 	.word	0x0800b609
 800b584:	0800b609 	.word	0x0800b609
 800b588:	0800b5e9 	.word	0x0800b5e9
 800b58c:	2b40      	cmp	r3, #64	; 0x40
 800b58e:	d02e      	beq.n	800b5ee <UART_SetConfig+0xc1e>
 800b590:	e03a      	b.n	800b608 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b592:	f7fc f8a3 	bl	80076dc <HAL_RCC_GetPCLK1Freq>
 800b596:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b598:	e03c      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b59a:	f7fc f8b5 	bl	8007708 <HAL_RCC_GetPCLK2Freq>
 800b59e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b5a0:	e038      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd fbf8 	bl	8008d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5b0:	e030      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fd fd44 	bl	8009044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5c0:	e028      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5c2:	4b0e      	ldr	r3, [pc, #56]	; (800b5fc <UART_SetConfig+0xc2c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d009      	beq.n	800b5e2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5ce:	4b0b      	ldr	r3, [pc, #44]	; (800b5fc <UART_SetConfig+0xc2c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	08db      	lsrs	r3, r3, #3
 800b5d4:	f003 0303 	and.w	r3, r3, #3
 800b5d8:	4a09      	ldr	r2, [pc, #36]	; (800b600 <UART_SetConfig+0xc30>)
 800b5da:	fa22 f303 	lsr.w	r3, r2, r3
 800b5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5e0:	e018      	b.n	800b614 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b5e2:	4b07      	ldr	r3, [pc, #28]	; (800b600 <UART_SetConfig+0xc30>)
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5e6:	e015      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5e8:	4b06      	ldr	r3, [pc, #24]	; (800b604 <UART_SetConfig+0xc34>)
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5ec:	e012      	b.n	800b614 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5f4:	e00e      	b.n	800b614 <UART_SetConfig+0xc44>
 800b5f6:	bf00      	nop
 800b5f8:	0800bff4 	.word	0x0800bff4
 800b5fc:	58024400 	.word	0x58024400
 800b600:	03d09000 	.word	0x03d09000
 800b604:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b612:	bf00      	nop
    }

    if (pclk != 0U)
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d021      	beq.n	800b65e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	4a1a      	ldr	r2, [pc, #104]	; (800b688 <UART_SetConfig+0xcb8>)
 800b620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b624:	461a      	mov	r2, r3
 800b626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b628:	fbb3 f2f2 	udiv	r2, r3, r2
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	085b      	lsrs	r3, r3, #1
 800b632:	441a      	add	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b642:	2b0f      	cmp	r3, #15
 800b644:	d908      	bls.n	800b658 <UART_SetConfig+0xc88>
 800b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b64c:	d204      	bcs.n	800b658 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e002      	b.n	800b65e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b67a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3738      	adds	r7, #56	; 0x38
 800b682:	46bd      	mov	sp, r7
 800b684:	bdb0      	pop	{r4, r5, r7, pc}
 800b686:	bf00      	nop
 800b688:	0800bff4 	.word	0x0800bff4

0800b68c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	f003 0302 	and.w	r3, r3, #2
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00a      	beq.n	800b6d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	430a      	orrs	r2, r1
 800b6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00a      	beq.n	800b6fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	f003 0308 	and.w	r3, r3, #8
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	430a      	orrs	r2, r1
 800b71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b720:	f003 0310 	and.w	r3, r3, #16
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00a      	beq.n	800b73e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	f003 0320 	and.w	r3, r3, #32
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	430a      	orrs	r2, r1
 800b75e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01a      	beq.n	800b7a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	430a      	orrs	r2, r1
 800b780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b78a:	d10a      	bne.n	800b7a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00a      	beq.n	800b7c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	605a      	str	r2, [r3, #4]
  }
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7e0:	f7f5 ff7e 	bl	80016e0 <HAL_GetTick>
 800b7e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d10e      	bne.n	800b812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f82f 	bl	800b866 <UART_WaitOnFlagUntilTimeout>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e025      	b.n	800b85e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0304 	and.w	r3, r3, #4
 800b81c:	2b04      	cmp	r3, #4
 800b81e:	d10e      	bne.n	800b83e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f819 	bl	800b866 <UART_WaitOnFlagUntilTimeout>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e00f      	b.n	800b85e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2220      	movs	r2, #32
 800b842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	603b      	str	r3, [r7, #0]
 800b872:	4613      	mov	r3, r2
 800b874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b876:	e062      	b.n	800b93e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87e:	d05e      	beq.n	800b93e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b880:	f7f5 ff2e 	bl	80016e0 <HAL_GetTick>
 800b884:	4602      	mov	r2, r0
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d302      	bcc.n	800b896 <UART_WaitOnFlagUntilTimeout+0x30>
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d11d      	bne.n	800b8d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b8a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689a      	ldr	r2, [r3, #8]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0201 	bic.w	r2, r2, #1
 800b8b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e045      	b.n	800b95e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d02e      	beq.n	800b93e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ee:	d126      	bne.n	800b93e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b908:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f022 0201 	bic.w	r2, r2, #1
 800b918:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2220      	movs	r2, #32
 800b91e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2220      	movs	r2, #32
 800b926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2220      	movs	r2, #32
 800b92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e00f      	b.n	800b95e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69da      	ldr	r2, [r3, #28]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4013      	ands	r3, r2
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	bf0c      	ite	eq
 800b94e:	2301      	moveq	r3, #1
 800b950:	2300      	movne	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	79fb      	ldrb	r3, [r7, #7]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d08d      	beq.n	800b878 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b97e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6899      	ldr	r1, [r3, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <UART_EndRxTransfer+0x60>)
 800b98c:	400b      	ands	r3, r1
 800b98e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b994:	2b01      	cmp	r3, #1
 800b996:	d107      	bne.n	800b9a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0210 	bic.w	r2, r2, #16
 800b9a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	effffffe 	.word	0xeffffffe

0800b9cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7fe ffda 	bl	800a9a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9f0:	bf00      	nop
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba06:	2b21      	cmp	r3, #33	; 0x21
 800ba08:	d12a      	bne.n	800ba60 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d110      	bne.n	800ba38 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba24:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba34:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ba36:	e013      	b.n	800ba60 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba3c:	781a      	ldrb	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	3b01      	subs	r3, #1
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba7a:	2b21      	cmp	r3, #33	; 0x21
 800ba7c:	d12f      	bne.n	800bade <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d110      	bne.n	800baac <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba98:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baa8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800baaa:	e018      	b.n	800bade <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bac0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac6:	1c9a      	adds	r2, r3, #2
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	3b01      	subs	r3, #1
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bade:	bf00      	nop
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800baea:	b480      	push	{r7}
 800baec:	b085      	sub	sp, #20
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf8:	2b21      	cmp	r3, #33	; 0x21
 800bafa:	d13d      	bne.n	800bb78 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb02:	81fb      	strh	r3, [r7, #14]
 800bb04:	e035      	b.n	800bb72 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d111      	bne.n	800bb36 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689a      	ldr	r2, [r3, #8]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bb20:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb30:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bb32:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bb34:	e020      	b.n	800bb78 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d013      	beq.n	800bb6c <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb48:	781a      	ldrb	r2, [r3, #0]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	3b01      	subs	r3, #1
 800bb64:	b29a      	uxth	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb6c:	89fb      	ldrh	r3, [r7, #14]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	81fb      	strh	r3, [r7, #14]
 800bb72:	89fb      	ldrh	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1c6      	bne.n	800bb06 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800bb78:	bf00      	nop
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb92:	2b21      	cmp	r3, #33	; 0x21
 800bb94:	d142      	bne.n	800bc1c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb9c:	81fb      	strh	r3, [r7, #14]
 800bb9e:	e03a      	b.n	800bc16 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d111      	bne.n	800bbd0 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bbba:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbca:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bbcc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bbce:	e025      	b.n	800bc1c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d018      	beq.n	800bc10 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe2:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbf2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf8:	1c9a      	adds	r2, r3, #2
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	81fb      	strh	r3, [r7, #14]
 800bc16:	89fb      	ldrh	r3, [r7, #14]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1c1      	bne.n	800bba0 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc3e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7f4 fd0e 	bl	8000670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d101      	bne.n	800bcae <HAL_UARTEx_DisableFifoMode+0x16>
 800bcaa:	2302      	movs	r3, #2
 800bcac:	e027      	b.n	800bcfe <HAL_UARTEx_DisableFifoMode+0x66>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2224      	movs	r2, #36	; 0x24
 800bcba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 0201 	bic.w	r2, r2, #1
 800bcd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bcdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2220      	movs	r2, #32
 800bcf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e02d      	b.n	800bd7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2224      	movs	r2, #36	; 0x24
 800bd2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f022 0201 	bic.w	r2, r2, #1
 800bd48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	430a      	orrs	r2, r1
 800bd5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f850 	bl	800be04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d101      	bne.n	800bd9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e02d      	b.n	800bdfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2224      	movs	r2, #36	; 0x24
 800bdaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f022 0201 	bic.w	r2, r2, #1
 800bdc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f812 	bl	800be04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2220      	movs	r2, #32
 800bdec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
	...

0800be04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be10:	2b00      	cmp	r3, #0
 800be12:	d108      	bne.n	800be26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be24:	e031      	b.n	800be8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be26:	2310      	movs	r3, #16
 800be28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be2a:	2310      	movs	r3, #16
 800be2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	0e5b      	lsrs	r3, r3, #25
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	0f5b      	lsrs	r3, r3, #29
 800be46:	b2db      	uxtb	r3, r3
 800be48:	f003 0307 	and.w	r3, r3, #7
 800be4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	7b3a      	ldrb	r2, [r7, #12]
 800be52:	4911      	ldr	r1, [pc, #68]	; (800be98 <UARTEx_SetNbDataToProcess+0x94>)
 800be54:	5c8a      	ldrb	r2, [r1, r2]
 800be56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be5a:	7b3a      	ldrb	r2, [r7, #12]
 800be5c:	490f      	ldr	r1, [pc, #60]	; (800be9c <UARTEx_SetNbDataToProcess+0x98>)
 800be5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be60:	fb93 f3f2 	sdiv	r3, r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	7b7a      	ldrb	r2, [r7, #13]
 800be70:	4909      	ldr	r1, [pc, #36]	; (800be98 <UARTEx_SetNbDataToProcess+0x94>)
 800be72:	5c8a      	ldrb	r2, [r1, r2]
 800be74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be78:	7b7a      	ldrb	r2, [r7, #13]
 800be7a:	4908      	ldr	r1, [pc, #32]	; (800be9c <UARTEx_SetNbDataToProcess+0x98>)
 800be7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be82:	b29a      	uxth	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be8a:	bf00      	nop
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	0800c00c 	.word	0x0800c00c
 800be9c:	0800c014 	.word	0x0800c014

0800bea0 <__libc_init_array>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	4d0d      	ldr	r5, [pc, #52]	; (800bed8 <__libc_init_array+0x38>)
 800bea4:	4c0d      	ldr	r4, [pc, #52]	; (800bedc <__libc_init_array+0x3c>)
 800bea6:	1b64      	subs	r4, r4, r5
 800bea8:	10a4      	asrs	r4, r4, #2
 800beaa:	2600      	movs	r6, #0
 800beac:	42a6      	cmp	r6, r4
 800beae:	d109      	bne.n	800bec4 <__libc_init_array+0x24>
 800beb0:	4d0b      	ldr	r5, [pc, #44]	; (800bee0 <__libc_init_array+0x40>)
 800beb2:	4c0c      	ldr	r4, [pc, #48]	; (800bee4 <__libc_init_array+0x44>)
 800beb4:	f000 f884 	bl	800bfc0 <_init>
 800beb8:	1b64      	subs	r4, r4, r5
 800beba:	10a4      	asrs	r4, r4, #2
 800bebc:	2600      	movs	r6, #0
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	d105      	bne.n	800bece <__libc_init_array+0x2e>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec8:	4798      	blx	r3
 800beca:	3601      	adds	r6, #1
 800becc:	e7ee      	b.n	800beac <__libc_init_array+0xc>
 800bece:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed2:	4798      	blx	r3
 800bed4:	3601      	adds	r6, #1
 800bed6:	e7f2      	b.n	800bebe <__libc_init_array+0x1e>
 800bed8:	0800c04c 	.word	0x0800c04c
 800bedc:	0800c04c 	.word	0x0800c04c
 800bee0:	0800c04c 	.word	0x0800c04c
 800bee4:	0800c050 	.word	0x0800c050

0800bee8 <__itoa>:
 800bee8:	1e93      	subs	r3, r2, #2
 800beea:	2b22      	cmp	r3, #34	; 0x22
 800beec:	b510      	push	{r4, lr}
 800beee:	460c      	mov	r4, r1
 800bef0:	d904      	bls.n	800befc <__itoa+0x14>
 800bef2:	2300      	movs	r3, #0
 800bef4:	700b      	strb	r3, [r1, #0]
 800bef6:	461c      	mov	r4, r3
 800bef8:	4620      	mov	r0, r4
 800befa:	bd10      	pop	{r4, pc}
 800befc:	2a0a      	cmp	r2, #10
 800befe:	d109      	bne.n	800bf14 <__itoa+0x2c>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	da07      	bge.n	800bf14 <__itoa+0x2c>
 800bf04:	232d      	movs	r3, #45	; 0x2d
 800bf06:	700b      	strb	r3, [r1, #0]
 800bf08:	4240      	negs	r0, r0
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	4421      	add	r1, r4
 800bf0e:	f000 f815 	bl	800bf3c <__utoa>
 800bf12:	e7f1      	b.n	800bef8 <__itoa+0x10>
 800bf14:	2100      	movs	r1, #0
 800bf16:	e7f9      	b.n	800bf0c <__itoa+0x24>

0800bf18 <itoa>:
 800bf18:	f7ff bfe6 	b.w	800bee8 <__itoa>

0800bf1c <memset>:
 800bf1c:	4402      	add	r2, r0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d100      	bne.n	800bf26 <memset+0xa>
 800bf24:	4770      	bx	lr
 800bf26:	f803 1b01 	strb.w	r1, [r3], #1
 800bf2a:	e7f9      	b.n	800bf20 <memset+0x4>

0800bf2c <strcpy>:
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf32:	f803 2b01 	strb.w	r2, [r3], #1
 800bf36:	2a00      	cmp	r2, #0
 800bf38:	d1f9      	bne.n	800bf2e <strcpy+0x2>
 800bf3a:	4770      	bx	lr

0800bf3c <__utoa>:
 800bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3e:	4c1f      	ldr	r4, [pc, #124]	; (800bfbc <__utoa+0x80>)
 800bf40:	b08b      	sub	sp, #44	; 0x2c
 800bf42:	4605      	mov	r5, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	466e      	mov	r6, sp
 800bf48:	f104 0c20 	add.w	ip, r4, #32
 800bf4c:	6820      	ldr	r0, [r4, #0]
 800bf4e:	6861      	ldr	r1, [r4, #4]
 800bf50:	4637      	mov	r7, r6
 800bf52:	c703      	stmia	r7!, {r0, r1}
 800bf54:	3408      	adds	r4, #8
 800bf56:	4564      	cmp	r4, ip
 800bf58:	463e      	mov	r6, r7
 800bf5a:	d1f7      	bne.n	800bf4c <__utoa+0x10>
 800bf5c:	7921      	ldrb	r1, [r4, #4]
 800bf5e:	7139      	strb	r1, [r7, #4]
 800bf60:	1e91      	subs	r1, r2, #2
 800bf62:	6820      	ldr	r0, [r4, #0]
 800bf64:	6038      	str	r0, [r7, #0]
 800bf66:	2922      	cmp	r1, #34	; 0x22
 800bf68:	f04f 0100 	mov.w	r1, #0
 800bf6c:	d904      	bls.n	800bf78 <__utoa+0x3c>
 800bf6e:	7019      	strb	r1, [r3, #0]
 800bf70:	460b      	mov	r3, r1
 800bf72:	4618      	mov	r0, r3
 800bf74:	b00b      	add	sp, #44	; 0x2c
 800bf76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf78:	1e58      	subs	r0, r3, #1
 800bf7a:	4684      	mov	ip, r0
 800bf7c:	fbb5 f7f2 	udiv	r7, r5, r2
 800bf80:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800bf84:	fb02 5617 	mls	r6, r2, r7, r5
 800bf88:	4476      	add	r6, lr
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bf90:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bf94:	462e      	mov	r6, r5
 800bf96:	42b2      	cmp	r2, r6
 800bf98:	f101 0101 	add.w	r1, r1, #1
 800bf9c:	463d      	mov	r5, r7
 800bf9e:	d9ed      	bls.n	800bf7c <__utoa+0x40>
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	545a      	strb	r2, [r3, r1]
 800bfa4:	1919      	adds	r1, r3, r4
 800bfa6:	1aa5      	subs	r5, r4, r2
 800bfa8:	42aa      	cmp	r2, r5
 800bfaa:	dae2      	bge.n	800bf72 <__utoa+0x36>
 800bfac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bfb0:	780e      	ldrb	r6, [r1, #0]
 800bfb2:	7006      	strb	r6, [r0, #0]
 800bfb4:	3201      	adds	r2, #1
 800bfb6:	f801 5901 	strb.w	r5, [r1], #-1
 800bfba:	e7f4      	b.n	800bfa6 <__utoa+0x6a>
 800bfbc:	0800c01c 	.word	0x0800c01c

0800bfc0 <_init>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr

0800bfcc <_fini>:
 800bfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfce:	bf00      	nop
 800bfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd2:	bc08      	pop	{r3}
 800bfd4:	469e      	mov	lr, r3
 800bfd6:	4770      	bx	lr
