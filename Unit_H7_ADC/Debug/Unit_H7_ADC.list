
Unit_H7_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b64c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b918  0800b918  0001b918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b988  0800b988  0001b988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b98c  0800b98c  0001b98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  0800b990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  24000020  0800b9b0  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000210  0800b9b0  00020210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   000238e0  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000337d  00000000  00000000  0004392e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014d0  00000000  00000000  00046cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e8  00000000  00000000  00048180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034a07  00000000  00000000  00049568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019359  00000000  00000000  0007df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161273  00000000  00000000  000972c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f853b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b08  00000000  00000000  001f8590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000020 	.word	0x24000020
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b900 	.word	0x0800b900

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000024 	.word	0x24000024
 8000308:	0800b900 	.word	0x0800b900

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96e 	b.w	8000610 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468c      	mov	ip, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8083 	bne.w	8000462 <__udivmoddi4+0x116>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d947      	bls.n	80003f2 <__udivmoddi4+0xa6>
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b142      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000368:	f1c2 0020 	rsb	r0, r2, #32
 800036c:	fa24 f000 	lsr.w	r0, r4, r0
 8000370:	4091      	lsls	r1, r2
 8000372:	4097      	lsls	r7, r2
 8000374:	ea40 0c01 	orr.w	ip, r0, r1
 8000378:	4094      	lsls	r4, r2
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fbbc f6f8 	udiv	r6, ip, r8
 8000384:	fa1f fe87 	uxth.w	lr, r7
 8000388:	fb08 c116 	mls	r1, r8, r6, ip
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f10e 	mul.w	r1, r6, lr
 8000394:	4299      	cmp	r1, r3
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x60>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 30ff 	add.w	r0, r6, #4294967295
 800039e:	f080 8119 	bcs.w	80005d4 <__udivmoddi4+0x288>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 8116 	bls.w	80005d4 <__udivmoddi4+0x288>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x8c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 8105 	bcs.w	80005d8 <__udivmoddi4+0x28c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8102 	bls.w	80005d8 <__udivmoddi4+0x28c>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003dc:	eba4 040e 	sub.w	r4, r4, lr
 80003e0:	2600      	movs	r6, #0
 80003e2:	b11d      	cbz	r5, 80003ec <__udivmoddi4+0xa0>
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	2300      	movs	r3, #0
 80003e8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xaa>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d150      	bne.n	80004a0 <__udivmoddi4+0x154>
 80003fe:	1bcb      	subs	r3, r1, r7
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	2601      	movs	r6, #1
 800040a:	fbb3 fcfe 	udiv	ip, r3, lr
 800040e:	0c21      	lsrs	r1, r4, #16
 8000410:	fb0e 331c 	mls	r3, lr, ip, r3
 8000414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000418:	fb08 f30c 	mul.w	r3, r8, ip
 800041c:	428b      	cmp	r3, r1
 800041e:	d907      	bls.n	8000430 <__udivmoddi4+0xe4>
 8000420:	1879      	adds	r1, r7, r1
 8000422:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0xe2>
 8000428:	428b      	cmp	r3, r1
 800042a:	f200 80e9 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 800042e:	4684      	mov	ip, r0
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	b2a3      	uxth	r3, r4
 8000434:	fbb1 f0fe 	udiv	r0, r1, lr
 8000438:	fb0e 1110 	mls	r1, lr, r0, r1
 800043c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000440:	fb08 f800 	mul.w	r8, r8, r0
 8000444:	45a0      	cmp	r8, r4
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x10c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x10a>
 8000450:	45a0      	cmp	r8, r4
 8000452:	f200 80d9 	bhi.w	8000608 <__udivmoddi4+0x2bc>
 8000456:	4618      	mov	r0, r3
 8000458:	eba4 0408 	sub.w	r4, r4, r8
 800045c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000460:	e7bf      	b.n	80003e2 <__udivmoddi4+0x96>
 8000462:	428b      	cmp	r3, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x12e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	f000 80b1 	beq.w	80005ce <__udivmoddi4+0x282>
 800046c:	2600      	movs	r6, #0
 800046e:	e9c5 0100 	strd	r0, r1, [r5]
 8000472:	4630      	mov	r0, r6
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	fab3 f683 	clz	r6, r3
 800047e:	2e00      	cmp	r6, #0
 8000480:	d14a      	bne.n	8000518 <__udivmoddi4+0x1cc>
 8000482:	428b      	cmp	r3, r1
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0x140>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80b8 	bhi.w	80005fc <__udivmoddi4+0x2b0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb61 0103 	sbc.w	r1, r1, r3
 8000492:	2001      	movs	r0, #1
 8000494:	468c      	mov	ip, r1
 8000496:	2d00      	cmp	r5, #0
 8000498:	d0a8      	beq.n	80003ec <__udivmoddi4+0xa0>
 800049a:	e9c5 4c00 	strd	r4, ip, [r5]
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f603 	lsr.w	r6, r0, r3
 80004a8:	4097      	lsls	r7, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b2:	40d9      	lsrs	r1, r3
 80004b4:	4330      	orrs	r0, r6
 80004b6:	0c03      	lsrs	r3, r0, #16
 80004b8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004bc:	fa1f f887 	uxth.w	r8, r7
 80004c0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c8:	fb06 f108 	mul.w	r1, r6, r8
 80004cc:	4299      	cmp	r1, r3
 80004ce:	fa04 f402 	lsl.w	r4, r4, r2
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x19c>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004da:	f080 808d 	bcs.w	80005f8 <__udivmoddi4+0x2ac>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 808a 	bls.w	80005f8 <__udivmoddi4+0x2ac>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	443b      	add	r3, r7
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b281      	uxth	r1, r0
 80004ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f8:	fb00 f308 	mul.w	r3, r0, r8
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x1c4>
 8000500:	1879      	adds	r1, r7, r1
 8000502:	f100 3cff 	add.w	ip, r0, #4294967295
 8000506:	d273      	bcs.n	80005f0 <__udivmoddi4+0x2a4>
 8000508:	428b      	cmp	r3, r1
 800050a:	d971      	bls.n	80005f0 <__udivmoddi4+0x2a4>
 800050c:	3802      	subs	r0, #2
 800050e:	4439      	add	r1, r7
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000516:	e778      	b.n	800040a <__udivmoddi4+0xbe>
 8000518:	f1c6 0c20 	rsb	ip, r6, #32
 800051c:	fa03 f406 	lsl.w	r4, r3, r6
 8000520:	fa22 f30c 	lsr.w	r3, r2, ip
 8000524:	431c      	orrs	r4, r3
 8000526:	fa20 f70c 	lsr.w	r7, r0, ip
 800052a:	fa01 f306 	lsl.w	r3, r1, r6
 800052e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000532:	fa21 f10c 	lsr.w	r1, r1, ip
 8000536:	431f      	orrs	r7, r3
 8000538:	0c3b      	lsrs	r3, r7, #16
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fa1f f884 	uxth.w	r8, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054a:	fb09 fa08 	mul.w	sl, r9, r8
 800054e:	458a      	cmp	sl, r1
 8000550:	fa02 f206 	lsl.w	r2, r2, r6
 8000554:	fa00 f306 	lsl.w	r3, r0, r6
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x220>
 800055a:	1861      	adds	r1, r4, r1
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	d248      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 8000562:	458a      	cmp	sl, r1
 8000564:	d946      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 8000566:	f1a9 0902 	sub.w	r9, r9, #2
 800056a:	4421      	add	r1, r4
 800056c:	eba1 010a 	sub.w	r1, r1, sl
 8000570:	b2bf      	uxth	r7, r7
 8000572:	fbb1 f0fe 	udiv	r0, r1, lr
 8000576:	fb0e 1110 	mls	r1, lr, r0, r1
 800057a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800057e:	fb00 f808 	mul.w	r8, r0, r8
 8000582:	45b8      	cmp	r8, r7
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x24a>
 8000586:	19e7      	adds	r7, r4, r7
 8000588:	f100 31ff 	add.w	r1, r0, #4294967295
 800058c:	d22e      	bcs.n	80005ec <__udivmoddi4+0x2a0>
 800058e:	45b8      	cmp	r8, r7
 8000590:	d92c      	bls.n	80005ec <__udivmoddi4+0x2a0>
 8000592:	3802      	subs	r0, #2
 8000594:	4427      	add	r7, r4
 8000596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059a:	eba7 0708 	sub.w	r7, r7, r8
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	454f      	cmp	r7, r9
 80005a4:	46c6      	mov	lr, r8
 80005a6:	4649      	mov	r1, r9
 80005a8:	d31a      	bcc.n	80005e0 <__udivmoddi4+0x294>
 80005aa:	d017      	beq.n	80005dc <__udivmoddi4+0x290>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x27a>
 80005ae:	ebb3 020e 	subs.w	r2, r3, lr
 80005b2:	eb67 0701 	sbc.w	r7, r7, r1
 80005b6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ba:	40f2      	lsrs	r2, r6
 80005bc:	ea4c 0202 	orr.w	r2, ip, r2
 80005c0:	40f7      	lsrs	r7, r6
 80005c2:	e9c5 2700 	strd	r2, r7, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e70b      	b.n	80003ec <__udivmoddi4+0xa0>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e9      	b.n	80003ac <__udivmoddi4+0x60>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6fd      	b.n	80003d8 <__udivmoddi4+0x8c>
 80005dc:	4543      	cmp	r3, r8
 80005de:	d2e5      	bcs.n	80005ac <__udivmoddi4+0x260>
 80005e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e4:	eb69 0104 	sbc.w	r1, r9, r4
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7df      	b.n	80005ac <__udivmoddi4+0x260>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e7d2      	b.n	8000596 <__udivmoddi4+0x24a>
 80005f0:	4660      	mov	r0, ip
 80005f2:	e78d      	b.n	8000510 <__udivmoddi4+0x1c4>
 80005f4:	4681      	mov	r9, r0
 80005f6:	e7b9      	b.n	800056c <__udivmoddi4+0x220>
 80005f8:	4666      	mov	r6, ip
 80005fa:	e775      	b.n	80004e8 <__udivmoddi4+0x19c>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e74a      	b.n	8000496 <__udivmoddi4+0x14a>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	4439      	add	r1, r7
 8000606:	e713      	b.n	8000430 <__udivmoddi4+0xe4>
 8000608:	3802      	subs	r0, #2
 800060a:	443c      	add	r4, r7
 800060c:	e724      	b.n	8000458 <__udivmoddi4+0x10c>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef state = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	482d      	ldr	r0, [pc, #180]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000628:	f005 fb94 	bl	8005d54 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc3);
 800062c:	482c      	ldr	r0, [pc, #176]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800062e:	f001 fbbf 	bl	8001db0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 1);
 8000632:	2101      	movs	r1, #1
 8000634:	482a      	ldr	r0, [pc, #168]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000636:	f001 fc85 	bl	8001f44 <HAL_ADC_PollForConversion>

	adc_memory[0] = HAL_ADC_GetValue(&hadc3);
 800063a:	4829      	ldr	r0, [pc, #164]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800063c:	f001 fd76 	bl	800212c <HAL_ADC_GetValue>
 8000640:	4603      	mov	r3, r0
 8000642:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000644:	6013      	str	r3, [r2, #0]

	/* Code voor sensor hier */
	adc_memory[0] = adc_memory[0] * 100;
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000652:	6013      	str	r3, [r2, #0]

	itoa(adc_memory[0], (char *)str, 10);
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	220a      	movs	r2, #10
 800065a:	4923      	ldr	r1, [pc, #140]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800065c:	4618      	mov	r0, r3
 800065e:	f00b f903 	bl	800b868 <itoa>

	//shift numbers for decimal point
	uint16_t i = strlen((char *)str);
 8000662:	4821      	ldr	r0, [pc, #132]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000664:	f7ff fe52 	bl	800030c <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	81bb      	strh	r3, [r7, #12]
	memcpy(&str[i-1], &str[i-2], 2);
 800066c:	89bb      	ldrh	r3, [r7, #12]
 800066e:	3b01      	subs	r3, #1
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000672:	4413      	add	r3, r2
 8000674:	89ba      	ldrh	r2, [r7, #12]
 8000676:	3a02      	subs	r2, #2
 8000678:	491b      	ldr	r1, [pc, #108]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800067a:	440a      	add	r2, r1
 800067c:	8812      	ldrh	r2, [r2, #0]
 800067e:	b292      	uxth	r2, r2
 8000680:	801a      	strh	r2, [r3, #0]
	str[i-2] = '.';
 8000682:	89bb      	ldrh	r3, [r7, #12]
 8000684:	3b02      	subs	r3, #2
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000688:	212e      	movs	r1, #46	; 0x2e
 800068a:	54d1      	strb	r1, [r2, r3]

	if(uart_flag == 0)
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d10c      	bne.n	80006ae <HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		HAL_UART_Transmit_IT(&huart3, str, strlen((char *)str));
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000696:	f7ff fe39 	bl	800030c <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29b      	uxth	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80006a4:	f009 fae8 	bl	8009c78 <HAL_UART_Transmit_IT>
		uart_flag = 1;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
	}
	if(uart_flag == 2)
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d107      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0xb2>
	{
		HAL_UART_Transmit_IT(&huart3, end, 2);
 80006b6:	2202      	movs	r2, #2
 80006b8:	490e      	ldr	r1, [pc, #56]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006ba:	480d      	ldr	r0, [pc, #52]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80006bc:	f009 fadc 	bl	8009c78 <HAL_UART_Transmit_IT>
		uart_flag = 3;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80006ce:	f005 fb41 	bl	8005d54 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58021800 	.word	0x58021800
 80006e0:	24000150 	.word	0x24000150
 80006e4:	2400003c 	.word	0x2400003c
 80006e8:	24000000 	.word	0x24000000
 80006ec:	24000044 	.word	0x24000044
 80006f0:	24000048 	.word	0x24000048
 80006f4:	2400000c 	.word	0x2400000c

080006f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if(uart_flag == 1)
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_UART_TxCpltCallback+0x30>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d102      	bne.n	800070e <HAL_UART_TxCpltCallback+0x16>
	{
		uart_flag = 2;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <HAL_UART_TxCpltCallback+0x30>)
 800070a:	2202      	movs	r2, #2
 800070c:	701a      	strb	r2, [r3, #0]
	}
	if(uart_flag == 3)
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_UART_TxCpltCallback+0x30>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d102      	bne.n	800071c <HAL_UART_TxCpltCallback+0x24>
	{
		uart_flag = 0;
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <HAL_UART_TxCpltCallback+0x30>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	}
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	24000044 	.word	0x24000044

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <main+0xf0>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d11b      	bne.n	8000776 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800073e:	f3bf 8f4f 	dsb	sy
}
 8000742:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000744:	f3bf 8f6f 	isb	sy
}
 8000748:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <main+0xf0>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
}
 8000756:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000758:	f3bf 8f6f 	isb	sy
}
 800075c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <main+0xf0>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a2e      	ldr	r2, [pc, #184]	; (800081c <main+0xf0>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
}
 8000774:	e000      	b.n	8000778 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000776:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <main+0xf0>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000780:	2b00      	cmp	r3, #0
 8000782:	d138      	bne.n	80007f6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <main+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
}
 8000790:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <main+0xf0>)
 8000794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000798:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	0b5b      	lsrs	r3, r3, #13
 800079e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007a2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007ac:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	015a      	lsls	r2, r3, #5
 80007b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007bc:	4917      	ldr	r1, [pc, #92]	; (800081c <main+0xf0>)
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1ef      	bne.n	80007ae <main+0x82>
    } while(sets-- != 0U);
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	60ba      	str	r2, [r7, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1e5      	bne.n	80007a4 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007d8:	f3bf 8f4f 	dsb	sy
}
 80007dc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0xf0>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <main+0xf0>)
 80007e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ea:	f3bf 8f4f 	dsb	sy
}
 80007ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f0:	f3bf 8f6f 	isb	sy
}
 80007f4:	e000      	b.n	80007f8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007f6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fd7a 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f812 	bl	8000824 <SystemClock_Config>
  /* disable D-cache, causes problems with DMA */
  //SCB_DisableDCache();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f9dc 	bl	8000bbc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000804:	f000 f96e 	bl	8000ae4 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000808:	f000 f884 	bl	8000914 <MX_ADC3_Init>
  MX_DMA_Init();
 800080c:	f000 f9b6 	bl	8000b7c <MX_DMA_Init>
  MX_TIM1_Init();
 8000810:	f000 f8f2 	bl	80009f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <main+0xf4>)
 8000816:	f008 faf5 	bl	8008e04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081a:	e7fe      	b.n	800081a <main+0xee>
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	240001c0 	.word	0x240001c0

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	; 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	224c      	movs	r2, #76	; 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f00b f81a 	bl	800b86c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f00b f814 	bl	800b86c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000844:	2002      	movs	r0, #2
 8000846:	f005 fa9f 	bl	8005d88 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b2f      	ldr	r3, [pc, #188]	; (800090c <SystemClock_Config+0xe8>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a2e      	ldr	r2, [pc, #184]	; (800090c <SystemClock_Config+0xe8>)
 8000854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0xe8>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <SystemClock_Config+0xe8>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xec>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	f023 0303 	bic.w	r3, r3, #3
 800087e:	4a24      	ldr	r2, [pc, #144]	; (8000910 <SystemClock_Config+0xec>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800088a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800089c:	f240 1313 	movw	r3, #275	; 0x113
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008ae:	2304      	movs	r3, #4
 80008b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fa9c 	bl	8005dfc <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ca:	f000 fa77 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	; 0x3f
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008da:	2308      	movs	r3, #8
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ec:	2340      	movs	r3, #64	; 0x40
 80008ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2103      	movs	r1, #3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f005 fe0f 	bl	8006518 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000900:	f000 fa5c 	bl	8000dbc <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3770      	adds	r7, #112	; 0x70
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58024800 	.word	0x58024800
 8000910:	58024400 	.word	0x58024400

08000914 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2224      	movs	r2, #36	; 0x24
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f00a ffa3 	bl	800b86c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000926:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000928:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <MX_ADC3_Init+0xe0>)
 800092a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000934:	2208      	movs	r2, #8
 8000936:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000946:	2208      	movs	r2, #8
 8000948:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800094c:	2200      	movs	r2, #0
 800094e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000952:	2201      	movs	r2, #1
 8000954:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000958:	2201      	movs	r2, #1
 800095a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800096c:	2200      	movs	r2, #0
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800097a:	2200      	movs	r2, #0
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800098a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800098e:	2200      	movs	r2, #0
 8000990:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_ADC3_Init+0xdc>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800099a:	4815      	ldr	r0, [pc, #84]	; (80009f0 <MX_ADC3_Init+0xdc>)
 800099c:	f001 f800 	bl	80019a0 <HAL_ADC_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80009a6:	f000 fa09 	bl	8000dbc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009aa:	2301      	movs	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ae:	2306      	movs	r3, #6
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009bc:	2304      	movs	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_ADC3_Init+0xdc>)
 80009da:	f001 fe0d 	bl	80025f8 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 80009e4:	f000 f9ea 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	24000150 	.word	0x24000150
 80009f4:	58026000 	.word	0x58026000

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <MX_TIM1_Init+0xe8>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5500;
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a38:	f241 527c 	movw	r2, #5500	; 0x157c
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a52:	f008 f97f 	bl	8008d54 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a5c:	f000 f9ae 	bl	8000dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481b      	ldr	r0, [pc, #108]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a6e:	f008 fc63 	bl	8009338 <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a78:	f000 f9a0 	bl	8000dbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000a7e:	f008 fa47 	bl	8008f10 <HAL_TIM_IC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a88:	f000 f998 	bl	8000dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480f      	ldr	r0, [pc, #60]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000aa0:	f008 ffe0 	bl	8009a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000aaa:	f000 f987 	bl	8000dbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM1_Init+0xe4>)
 8000ac6:	f008 fba3 	bl	8009210 <HAL_TIM_IC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ad0:	f000 f974 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	240001c0 	.word	0x240001c0
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000aea:	4a23      	ldr	r2, [pc, #140]	; (8000b78 <MX_USART3_UART_Init+0x94>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b2e:	f009 f853 	bl	8009bd8 <HAL_UART_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b38:	f000 f940 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b40:	f00a fd8b 	bl	800b65a <HAL_UARTEx_SetTxFifoThreshold>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f937 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b52:	f00a fdc0 	bl	800b6d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b5c:	f000 f92e 	bl	8000dbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_USART3_UART_Init+0x90>)
 8000b62:	f00a fd41 	bl	800b5e8 <HAL_UARTEx_DisableFifoMode>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b6c:	f000 f926 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	24000048 	.word	0x24000048
 8000b78:	40004800 	.word	0x40004800

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <MX_DMA_Init+0x3c>)
 8000b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <MX_DMA_Init+0x3c>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_DMA_Init+0x3c>)
 8000b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	200b      	movs	r0, #11
 8000ba6:	f002 fcd6 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000baa:	200b      	movs	r0, #11
 8000bac:	f002 fced 	bl	800358a <HAL_NVIC_EnableIRQ>

}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b73      	ldr	r3, [pc, #460]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a71      	ldr	r2, [pc, #452]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf0:	4b6b      	ldr	r3, [pc, #428]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a6a      	ldr	r2, [pc, #424]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b67      	ldr	r3, [pc, #412]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	4a62      	ldr	r2, [pc, #392]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1e:	4b60      	ldr	r3, [pc, #384]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b5c      	ldr	r3, [pc, #368]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	4a5b      	ldr	r2, [pc, #364]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3c:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4b55      	ldr	r3, [pc, #340]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	4a53      	ldr	r2, [pc, #332]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5a:	4b51      	ldr	r3, [pc, #324]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x1e4>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cc8:	4836      	ldr	r0, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x1e8>)
 8000cca:	f005 f843 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd4:	4834      	ldr	r0, [pc, #208]	; (8000da8 <MX_GPIO_Init+0x1ec>)
 8000cd6:	f005 f83d 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	4832      	ldr	r0, [pc, #200]	; (8000dac <MX_GPIO_Init+0x1f0>)
 8000ce2:	f005 f837 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x1f4>)
 8000cec:	f005 f832 	bl	8005d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	482b      	ldr	r0, [pc, #172]	; (8000db4 <MX_GPIO_Init+0x1f8>)
 8000d06:	f004 fe7d 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d0a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <MX_GPIO_Init+0x1e8>)
 8000d24:	f004 fe6e 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4819      	ldr	r0, [pc, #100]	; (8000da8 <MX_GPIO_Init+0x1ec>)
 8000d42:	f004 fe5f 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_GPIO_Init+0x1fc>)
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4814      	ldr	r0, [pc, #80]	; (8000dac <MX_GPIO_Init+0x1f0>)
 8000d5a:	f004 fe53 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_timer_Pin */
  GPIO_InitStruct.Pin = ADC_timer_Pin;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_timer_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_GPIO_Init+0x1f0>)
 8000d78:	f004 fe44 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_GPIO_Init+0x1f4>)
 8000d94:	f004 fe36 	bl	8005a04 <HAL_GPIO_Init>

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	; 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020400 	.word	0x58020400
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	58021800 	.word	0x58021800
 8000db0:	58021000 	.word	0x58021000
 8000db4:	58020800 	.word	0x58020800
 8000db8:	11110000 	.word	0x11110000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x30>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x30>)
 8000de0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0b8      	sub	sp, #224	; 0xe0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	22b4      	movs	r2, #180	; 0xb4
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00a fd25 	bl	800b86c <memset>
  if(hadc->Instance==ADC3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <HAL_ADC_MspInit+0x110>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d16a      	bne.n	8000f02 <HAL_ADC_MspInit+0x106>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000e36:	2318      	movs	r3, #24
 8000e38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e46:	23c0      	movs	r3, #192	; 0xc0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 fee7 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e68:	f7ff ffa8 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_ADC_MspInit+0x114>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    PF4     ------> ADC3_INP9
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    */
    GPIO_InitStruct.Pin = adc_dc_voltage_Pin|adc_dc_current_Pin|adc_ac_current_Pin;
 8000ec6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <HAL_ADC_MspInit+0x118>)
 8000ee2:	f004 fd8f 	bl	8005a04 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ee6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000eea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000eee:	f000 fa91 	bl	8001414 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	207f      	movs	r0, #127	; 0x7f
 8000ef8:	f002 fb2d 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000efc:	207f      	movs	r0, #127	; 0x7f
 8000efe:	f002 fb44 	bl	800358a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	37e0      	adds	r7, #224	; 0xe0
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	58026000 	.word	0x58026000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58021400 	.word	0x58021400

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_TIM_Base_MspInit+0x98>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d136      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_TIM_Base_MspInit+0x9c>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_TIM_Base_MspInit+0xa0>)
 8000f94:	f004 fd36 	bl	8005a04 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2019      	movs	r0, #25
 8000f9e:	f002 fada 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f002 faf1 	bl	800358a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58021000 	.word	0x58021000

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0b6      	sub	sp, #216	; 0xd8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	22b4      	movs	r2, #180	; 0xb4
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00a fc45 	bl	800b86c <memset>
  if(huart->Instance==USART3)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a3f      	ldr	r2, [pc, #252]	; (80010e4 <HAL_UART_MspInit+0x128>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d177      	bne.n	80010dc <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fe18 	bl	8006c30 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001006:	f7ff fed9 	bl	8000dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 800100c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 8001012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001016:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 800101c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a2e      	ldr	r2, [pc, #184]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 8001030:	f043 0308 	orr.w	r3, r3, #8
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_UART_MspInit+0x12c>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001046:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800106a:	4619      	mov	r1, r3
 800106c:	481f      	ldr	r0, [pc, #124]	; (80010ec <HAL_UART_MspInit+0x130>)
 800106e:	f004 fcc9 	bl	8005a04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_UART_MspInit+0x134>)
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_UART_MspInit+0x138>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_UART_MspInit+0x134>)
 800107a:	222e      	movs	r2, #46	; 0x2e
 800107c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_UART_MspInit+0x134>)
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_UART_MspInit+0x134>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0x134>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_UART_MspInit+0x134>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0x134>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010b2:	f002 fa85 	bl	80035c0 <HAL_DMA_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80010bc:	f7ff fe7e 	bl	8000dbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010c4:	679a      	str	r2, [r3, #120]	; 0x78
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_UART_MspInit+0x134>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2027      	movs	r0, #39	; 0x27
 80010d2:	f002 fa40 	bl	8003556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010d6:	2027      	movs	r0, #39	; 0x27
 80010d8:	f002 fa57 	bl	800358a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	37d8      	adds	r7, #216	; 0xd8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004800 	.word	0x40004800
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020c00 	.word	0x58020c00
 80010f0:	240000d8 	.word	0x240000d8
 80010f4:	40020010 	.word	0x40020010

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f946 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <DMA1_Stream0_IRQHandler+0x14>)
 8001152:	f008 fe15 	bl	8009d80 <HAL_UART_IRQHandler>
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <DMA1_Stream0_IRQHandler+0x18>)
 8001158:	f003 faee 	bl	8004738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	24000048 	.word	0x24000048
 8001164:	240000d8 	.word	0x240000d8

08001168 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM1_UP_IRQHandler+0x10>)
 800116e:	f007 ff30 	bl	8008fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	240001c0 	.word	0x240001c0

0800117c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <USART3_IRQHandler+0x10>)
 8001182:	f008 fdfd 	bl	8009d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000048 	.word	0x24000048

08001190 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <ADC3_IRQHandler+0x10>)
 8001196:	f000 ffd7 	bl	8002148 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000150 	.word	0x24000150

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <SystemInit+0xd8>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <SystemInit+0xd8>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <SystemInit+0xdc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d807      	bhi.n	80011d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <SystemInit+0xdc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 030f 	bic.w	r3, r3, #15
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <SystemInit+0xdc>)
 80011ce:	f043 0307 	orr.w	r3, r3, #7
 80011d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <SystemInit+0xe0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <SystemInit+0xe0>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SystemInit+0xe0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <SystemInit+0xe0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4926      	ldr	r1, [pc, #152]	; (8001284 <SystemInit+0xe0>)
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemInit+0xe4>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <SystemInit+0xdc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <SystemInit+0xdc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 030f 	bic.w	r3, r3, #15
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <SystemInit+0xdc>)
 8001208:	f043 0307 	orr.w	r3, r3, #7
 800120c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <SystemInit+0xe0>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <SystemInit+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <SystemInit+0xe0>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <SystemInit+0xe0>)
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <SystemInit+0xe8>)
 8001224:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <SystemInit+0xe0>)
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <SystemInit+0xec>)
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800122c:	4b15      	ldr	r3, [pc, #84]	; (8001284 <SystemInit+0xe0>)
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <SystemInit+0xf0>)
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <SystemInit+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <SystemInit+0xe0>)
 800123a:	4a16      	ldr	r2, [pc, #88]	; (8001294 <SystemInit+0xf0>)
 800123c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <SystemInit+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <SystemInit+0xe0>)
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <SystemInit+0xf0>)
 8001248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <SystemInit+0xe0>)
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <SystemInit+0xe0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <SystemInit+0xe0>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <SystemInit+0xe0>)
 800125e:	2200      	movs	r2, #0
 8001260:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <SystemInit+0xf4>)
 8001264:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001268:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SystemInit+0xd8>)
 800126c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001270:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	52002000 	.word	0x52002000
 8001284:	58024400 	.word	0x58024400
 8001288:	eaf6ed7f 	.word	0xeaf6ed7f
 800128c:	02020200 	.word	0x02020200
 8001290:	01ff0000 	.word	0x01ff0000
 8001294:	01010280 	.word	0x01010280
 8001298:	52004000 	.word	0x52004000

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a0:	f7ff ff80 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f00a fa91 	bl	800b7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fa2d 	bl	800072c <main>
  bx  lr
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012dc:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 80012e0:	0800b990 	.word	0x0800b990
  ldr r2, =_sbss
 80012e4:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 80012e8:	24000210 	.word	0x24000210

080012ec <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f002 f922 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012fc:	f005 fac2 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_Init+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_Init+0x6c>)
 800130e:	5ccb      	ldrb	r3, [r1, r3]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_Init+0x6c>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_Init+0x70>)
 8001332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x74>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f814 	bl	8001368 <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e002      	b.n	8001350 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fd3d 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	58024400 	.word	0x58024400
 800135c:	0800b918 	.word	0x0800b918
 8001360:	24000014 	.word	0x24000014
 8001364:	24000010 	.word	0x24000010

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_InitTick+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e021      	b.n	80013c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_InitTick+0x64>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_InitTick+0x60>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f002 f907 	bl	80035a6 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f002 f8d1 	bl	8003556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x68>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400001c 	.word	0x2400001c
 80013cc:	24000010 	.word	0x24000010
 80013d0:	24000018 	.word	0x24000018

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2400001c 	.word	0x2400001c
 80013f8:	2400020c 	.word	0x2400020c

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2400020c 	.word	0x2400020c

08001414 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	58000400 	.word	0x58000400

08001440 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	609a      	str	r2, [r3, #8]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3360      	adds	r3, #96	; 0x60
 80014ba:	461a      	mov	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <LL_ADC_SetOffset+0x60>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10b      	bne.n	80014e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014e2:	e00b      	b.n	80014fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	430b      	orrs	r3, r1
 80014f6:	431a      	orrs	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	58026000 	.word	0x58026000

0800150c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3360      	adds	r3, #96	; 0x60
 800151a:	461a      	mov	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	611a      	str	r2, [r3, #16]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00e      	beq.n	800159e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3360      	adds	r3, #96	; 0x60
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]
  }
}
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	58026000 	.word	0x58026000

080015b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10e      	bne.n	80015e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3360      	adds	r3, #96	; 0x60
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	431a      	orrs	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	58026000 	.word	0x58026000

080015f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <LL_ADC_SetOffsetSign+0x40>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d10e      	bne.n	8001626 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3360      	adds	r3, #96	; 0x60
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	431a      	orrs	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001626:	bf00      	nop
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	58026000 	.word	0x58026000

08001638 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3360      	adds	r3, #96	; 0x60
 8001648:	461a      	mov	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <LL_ADC_SetOffsetState+0x50>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d108      	bne.n	800166c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800166a:	e007      	b.n	800167c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	431a      	orrs	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	58026000 	.word	0x58026000

0800168c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b087      	sub	sp, #28
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3330      	adds	r3, #48	; 0x30
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	211f      	movs	r1, #31
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	401a      	ands	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0e9b      	lsrs	r3, r3, #26
 80016ea:	f003 011f 	and.w	r1, r3, #31
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3314      	adds	r3, #20
 8001740:	461a      	mov	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	0e5b      	lsrs	r3, r3, #25
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	4413      	add	r3, r2
 800174e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0d1b      	lsrs	r3, r3, #20
 8001758:	f003 031f 	and.w	r3, r3, #31
 800175c:	2107      	movs	r1, #7
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	401a      	ands	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	0d1b      	lsrs	r3, r3, #20
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800177a:	bf00      	nop
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d115      	bne.n	80017c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0318 	and.w	r3, r3, #24
 80017b2:	4914      	ldr	r1, [pc, #80]	; (8001804 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80017b4:	40d9      	lsrs	r1, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	400b      	ands	r3, r1
 80017ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80017c6:	e014      	b.n	80017f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0318 	and.w	r3, r3, #24
 80017de:	4909      	ldr	r1, [pc, #36]	; (8001804 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80017e0:	40d9      	lsrs	r1, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	400b      	ands	r3, r1
 80017e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ea:	431a      	orrs	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	58026000 	.word	0x58026000
 8001804:	000fffff 	.word	0x000fffff

08001808 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 031f 	and.w	r3, r3, #31
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <LL_ADC_DisableDeepPowerDown+0x20>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6093      	str	r3, [r2, #8]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	5fffffc0 	.word	0x5fffffc0

08001864 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001878:	d101      	bne.n	800187e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800189a:	4013      	ands	r3, r2
 800189c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	6fffffc0 	.word	0x6fffffc0

080018b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018c8:	d101      	bne.n	80018ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <LL_ADC_Enable+0x24>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	f043 0201 	orr.w	r2, r3, #1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	7fffffc0 	.word	0x7fffffc0

08001904 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <LL_ADC_IsEnabled+0x18>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <LL_ADC_IsEnabled+0x1a>
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <LL_ADC_REG_StartConversion+0x24>)
 800193a:	4013      	ands	r3, r2
 800193c:	f043 0204 	orr.w	r2, r3, #4
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	7fffffc0 	.word	0x7fffffc0

08001954 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b04      	cmp	r3, #4
 8001966:	d101      	bne.n	800196c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b08      	cmp	r3, #8
 800198c:	d101      	bne.n	8001992 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1ee      	b.n	8001d98 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fa17 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff3f 	bl	8001864 <LL_ADC_IsDeepPowerDownEnabled>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff25 	bl	8001840 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff5a 	bl	80018b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d114      	bne.n	8001a30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff3e 	bl	800188c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a10:	4b8e      	ldr	r3, [pc, #568]	; (8001c4c <HAL_ADC_Init+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	4a8e      	ldr	r2, [pc, #568]	; (8001c50 <HAL_ADC_Init+0x2b0>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a22:	e002      	b.n	8001a2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff3d 	bl	80018b4 <LL_ADC_IsInternalRegulatorEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a44:	f043 0210 	orr.w	r2, r3, #16
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff77 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 8001a66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8188 	bne.w	8001d86 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 8184 	bne.w	8001d86 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff36 	bl	8001904 <LL_ADC_IsEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d136      	bne.n	8001b0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6c      	ldr	r2, [pc, #432]	; (8001c54 <HAL_ADC_Init+0x2b4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_ADC_Init+0x112>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_ADC_Init+0x2b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_ADC_Init+0x130>
 8001ab2:	4868      	ldr	r0, [pc, #416]	; (8001c54 <HAL_ADC_Init+0x2b4>)
 8001ab4:	f7ff ff26 	bl	8001904 <LL_ADC_IsEnabled>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	4867      	ldr	r0, [pc, #412]	; (8001c58 <HAL_ADC_Init+0x2b8>)
 8001abc:	f7ff ff22 	bl	8001904 <LL_ADC_IsEnabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4323      	orrs	r3, r4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e008      	b.n	8001ae2 <HAL_ADC_Init+0x142>
 8001ad0:	4862      	ldr	r0, [pc, #392]	; (8001c5c <HAL_ADC_Init+0x2bc>)
 8001ad2:	f7ff ff17 	bl	8001904 <LL_ADC_IsEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d012      	beq.n	8001b0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_ADC_Init+0x2b4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Init+0x15a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_ADC_Init+0x2b8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_Init+0x15e>
 8001afa:	4a59      	ldr	r2, [pc, #356]	; (8001c60 <HAL_ADC_Init+0x2c0>)
 8001afc:	e000      	b.n	8001b00 <HAL_ADC_Init+0x160>
 8001afe:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <HAL_ADC_Init+0x2c4>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff fc9a 	bl	8001440 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_ADC_Init+0x2bc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d129      	bne.n	8001b6a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e5b      	ldrb	r3, [r3, #25]
 8001b1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b20:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001b26:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d013      	beq.n	8001b58 <HAL_ADC_Init+0x1b8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d00d      	beq.n	8001b54 <HAL_ADC_Init+0x1b4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b1c      	cmp	r3, #28
 8001b3e:	d007      	beq.n	8001b50 <HAL_ADC_Init+0x1b0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b18      	cmp	r3, #24
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_Init+0x1ac>
 8001b48:	2318      	movs	r3, #24
 8001b4a:	e006      	b.n	8001b5a <HAL_ADC_Init+0x1ba>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e004      	b.n	8001b5a <HAL_ADC_Init+0x1ba>
 8001b50:	2310      	movs	r3, #16
 8001b52:	e002      	b.n	8001b5a <HAL_ADC_Init+0x1ba>
 8001b54:	2308      	movs	r3, #8
 8001b56:	e000      	b.n	8001b5a <HAL_ADC_Init+0x1ba>
 8001b58:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001b5a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	e00e      	b.n	8001b88 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e5b      	ldrb	r3, [r3, #25]
 8001b6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b82:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d106      	bne.n	8001ba0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	3b01      	subs	r3, #1
 8001b98:	045b      	lsls	r3, r3, #17
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a26      	ldr	r2, [pc, #152]	; (8001c5c <HAL_ADC_Init+0x2bc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d115      	bne.n	8001bf2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_ADC_Init+0x2c8>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	69b9      	ldr	r1, [r7, #24]
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	e009      	b.n	8001c06 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_ADC_Init+0x2cc>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	69b9      	ldr	r1, [r7, #24]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fea2 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 8001c10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff feaf 	bl	800197a <LL_ADC_INJ_IsConversionOngoing>
 8001c1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 808e 	bne.w	8001d42 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 808a 	bne.w	8001d42 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_ADC_Init+0x2bc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11b      	bne.n	8001c70 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
 8001c3c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c44:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e018      	b.n	8001c7e <HAL_ADC_Init+0x2de>
 8001c4c:	24000010 	.word	0x24000010
 8001c50:	053e2d63 	.word	0x053e2d63
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40022100 	.word	0x40022100
 8001c5c:	58026000 	.word	0x58026000
 8001c60:	40022300 	.word	0x40022300
 8001c64:	58026300 	.word	0x58026300
 8001c68:	fff04007 	.word	0xfff04007
 8001c6c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
 8001c74:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_ADC_Init+0x400>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d137      	bne.n	8001d0c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a3f      	ldr	r2, [pc, #252]	; (8001da4 <HAL_ADC_Init+0x404>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d116      	bne.n	8001cda <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_ADC_Init+0x408>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc4:	4311      	orrs	r1, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	e020      	b.n	8001d1c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_ADC_Init+0x40c>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	0411      	lsls	r1, r2, #16
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	e007      	b.n	8001d1c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_ADC_Init+0x404>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 fa11 	bl	8003164 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d10c      	bne.n	8001d64 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f023 010f 	bic.w	r1, r3, #15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
 8001d62:	e007      	b.n	8001d74 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020f 	bic.w	r2, r2, #15
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	f023 0303 	bic.w	r3, r3, #3
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3724      	adds	r7, #36	; 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	ffffbffc 	.word	0xffffbffc
 8001da4:	58026000 	.word	0x58026000
 8001da8:	fc00f81f 	.word	0xfc00f81f
 8001dac:	fc00f81e 	.word	0xfc00f81e

08001db0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_ADC_Start+0x180>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_Start+0x1c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	; (8001f34 <HAL_ADC_Start+0x184>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_Start+0x20>
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_ADC_Start+0x188>)
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_Start+0x22>
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_ADC_Start+0x18c>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fd18 	bl	8001808 <LL_ADC_GetMultimode>
 8001dd8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fdb8 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 809a 	bne.w	8001f20 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Start+0x4a>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e095      	b.n	8001f26 <HAL_ADC_Start+0x176>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 f924 	bl	8003050 <ADC_Enable>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 8081 	bne.w	8001f16 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_ADC_Start+0x190>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a42      	ldr	r2, [pc, #264]	; (8001f34 <HAL_ADC_Start+0x184>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d002      	beq.n	8001e34 <HAL_ADC_Start+0x84>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e000      	b.n	8001e36 <HAL_ADC_Start+0x86>
 8001e34:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_ADC_Start+0x180>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d002      	beq.n	8001e44 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e62:	f023 0206 	bic.w	r2, r3, #6
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	665a      	str	r2, [r3, #100]	; 0x64
 8001e6a:	e002      	b.n	8001e72 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	221c      	movs	r2, #28
 8001e78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_ADC_Start+0x184>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d002      	beq.n	8001e92 <HAL_ADC_Start+0xe2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_Start+0xe4>
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_ADC_Start+0x180>)
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d008      	beq.n	8001eae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d002      	beq.n	8001eae <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d114      	bne.n	8001ed8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fd2b 	bl	800192c <LL_ADC_REG_StartConversion>
 8001ed6:	e025      	b.n	8001f24 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_ADC_Start+0x184>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d002      	beq.n	8001ef4 <HAL_ADC_Start+0x144>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_Start+0x146>
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_ADC_Start+0x180>)
 8001ef6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
 8001f14:	e006      	b.n	8001f24 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f20:	2302      	movs	r3, #2
 8001f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40022100 	.word	0x40022100
 8001f38:	40022300 	.word	0x40022300
 8001f3c:	58026300 	.word	0x58026300
 8001f40:	fffff0fe 	.word	0xfffff0fe

08001f44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a72      	ldr	r2, [pc, #456]	; (800211c <HAL_ADC_PollForConversion+0x1d8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_ADC_PollForConversion+0x1e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a70      	ldr	r2, [pc, #448]	; (8002120 <HAL_ADC_PollForConversion+0x1dc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_PollForConversion+0x22>
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_ADC_PollForConversion+0x1e0>)
 8001f64:	e000      	b.n	8001f68 <HAL_ADC_PollForConversion+0x24>
 8001f66:	4b70      	ldr	r3, [pc, #448]	; (8002128 <HAL_ADC_PollForConversion+0x1e4>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fc4d 	bl	8001808 <LL_ADC_GetMultimode>
 8001f6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d102      	bne.n	8001f7e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	e037      	b.n	8001fee <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d002      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	d111      	bne.n	8001fb4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0b1      	b.n	8002112 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fae:	2304      	movs	r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001fb2:	e01c      	b.n	8001fee <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_ADC_PollForConversion+0x1d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_ADC_PollForConversion+0x84>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a57      	ldr	r2, [pc, #348]	; (8002120 <HAL_ADC_PollForConversion+0x1dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_PollForConversion+0x88>
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_ADC_PollForConversion+0x1e0>)
 8001fca:	e000      	b.n	8001fce <HAL_ADC_PollForConversion+0x8a>
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_ADC_PollForConversion+0x1e4>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc28 	bl	8001824 <LL_ADC_GetMultiDMATransfer>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e093      	b.n	8002112 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fea:	2304      	movs	r3, #4
 8001fec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fee:	f7ff fa05 	bl	80013fc <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ff4:	e021      	b.n	800203a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d01d      	beq.n	800203a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ffe:	f7ff f9fd 	bl	80013fc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <HAL_ADC_PollForConversion+0xd0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	f043 0204 	orr.w	r2, r3, #4
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e06b      	b.n	8002112 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0d6      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb17 	bl	800168c <LL_ADC_REG_IsTriggerSourceSWStart>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01c      	beq.n	800209e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7e5b      	ldrb	r3, [r3, #25]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d118      	bne.n	800209e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b08      	cmp	r3, #8
 8002078:	d111      	bne.n	800209e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <HAL_ADC_PollForConversion+0x1dc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d002      	beq.n	80020ae <HAL_ADC_PollForConversion+0x16a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e000      	b.n	80020b0 <HAL_ADC_PollForConversion+0x16c>
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_ADC_PollForConversion+0x1d8>)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d008      	beq.n	80020ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b09      	cmp	r3, #9
 80020c8:	d104      	bne.n	80020d4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e00c      	b.n	80020ee <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_ADC_PollForConversion+0x1dc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d002      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x1a0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_PollForConversion+0x1a2>
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_ADC_PollForConversion+0x1d8>)
 80020e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d104      	bne.n	80020fe <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e008      	b.n	8002110 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	220c      	movs	r2, #12
 800210e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3720      	adds	r7, #32
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40022100 	.word	0x40022100
 8002124:	40022300 	.word	0x40022300
 8002128:	58026300 	.word	0x58026300

0800212c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a87      	ldr	r2, [pc, #540]	; (8002388 <HAL_ADC_IRQHandler+0x240>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_ADC_IRQHandler+0x30>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a86      	ldr	r2, [pc, #536]	; (800238c <HAL_ADC_IRQHandler+0x244>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_ADC_IRQHandler+0x34>
 8002178:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_ADC_IRQHandler+0x248>)
 800217a:	e000      	b.n	800217e <HAL_ADC_IRQHandler+0x36>
 800217c:	4b85      	ldr	r3, [pc, #532]	; (8002394 <HAL_ADC_IRQHandler+0x24c>)
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fb42 	bl	8001808 <LL_ADC_GetMultimode>
 8002184:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d017      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x78>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d012      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f001 f8ea 	bl	800338c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_IRQHandler+0x8c>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8083 	beq.w	80022e6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07d      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa40 	bl	800168c <LL_ADC_REG_IsTriggerSourceSWStart>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d062      	beq.n	80022d8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <HAL_ADC_IRQHandler+0x244>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d002      	beq.n	8002222 <HAL_ADC_IRQHandler+0xda>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e000      	b.n	8002224 <HAL_ADC_IRQHandler+0xdc>
 8002222:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_ADC_IRQHandler+0x240>)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	4293      	cmp	r3, r2
 800222a:	d008      	beq.n	800223e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d002      	beq.n	800223e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b09      	cmp	r3, #9
 800223c:	d104      	bne.n	8002248 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	e00c      	b.n	8002262 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4f      	ldr	r2, [pc, #316]	; (800238c <HAL_ADC_IRQHandler+0x244>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d002      	beq.n	8002258 <HAL_ADC_IRQHandler+0x110>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e000      	b.n	800225a <HAL_ADC_IRQHandler+0x112>
 8002258:	4b4b      	ldr	r3, [pc, #300]	; (8002388 <HAL_ADC_IRQHandler+0x240>)
 800225a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d135      	bne.n	80022d8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b08      	cmp	r3, #8
 8002278:	d12e      	bne.n	80022d8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb68 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11a      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 020c 	bic.w	r2, r2, #12
 8002298:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d112      	bne.n	80022d8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	661a      	str	r2, [r3, #96]	; 0x60
 80022be:	e00b      	b.n	80022d8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c4:	f043 0210 	orr.w	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f96f 	bl	80025bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	220c      	movs	r2, #12
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_IRQHandler+0x1b2>
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a0 	beq.w	8002446 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 809a 	beq.w	8002446 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f9eb 	bl	800170a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002334:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f9a6 	bl	800168c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002340:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_ADC_IRQHandler+0x244>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d002      	beq.n	8002352 <HAL_ADC_IRQHandler+0x20a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	e000      	b.n	8002354 <HAL_ADC_IRQHandler+0x20c>
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_ADC_IRQHandler+0x240>)
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	4293      	cmp	r3, r2
 800235a:	d008      	beq.n	800236e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d002      	beq.n	800236e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b07      	cmp	r3, #7
 800236c:	d104      	bne.n	8002378 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e014      	b.n	80023a2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_ADC_IRQHandler+0x244>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00a      	beq.n	8002398 <HAL_ADC_IRQHandler+0x250>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	e008      	b.n	800239a <HAL_ADC_IRQHandler+0x252>
 8002388:	40022000 	.word	0x40022000
 800238c:	40022100 	.word	0x40022100
 8002390:	40022300 	.word	0x40022300
 8002394:	58026300 	.word	0x58026300
 8002398:	4b84      	ldr	r3, [pc, #528]	; (80025ac <HAL_ADC_IRQHandler+0x464>)
 800239a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10c      	bne.n	80023c2 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d142      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03f      	beq.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d13a      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d133      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12e      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff facb 	bl	800197a <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11a      	bne.n	8002420 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d112      	bne.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	661a      	str	r2, [r3, #96]	; 0x60
 800241e:	e00b      	b.n	8002438 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 ff7f 	bl	800333c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2260      	movs	r2, #96	; 0x60
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d011      	beq.n	8002474 <HAL_ADC_IRQHandler+0x32c>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8b2 	bl	80025d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2280      	movs	r2, #128	; 0x80
 8002472:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x35c>
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 ff65 	bl	8003364 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x38c>
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 ff57 	bl	8003378 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d043      	beq.n	8002566 <HAL_ADC_IRQHandler+0x41e>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03e      	beq.n	8002566 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80024f0:	2301      	movs	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	e021      	b.n	800253a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_ADC_IRQHandler+0x464>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_ADC_IRQHandler+0x3c8>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_ADC_IRQHandler+0x468>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_ADC_IRQHandler+0x3cc>
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_ADC_IRQHandler+0x46c>)
 8002512:	e000      	b.n	8002516 <HAL_ADC_IRQHandler+0x3ce>
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_ADC_IRQHandler+0x470>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f984 	bl	8001824 <LL_ADC_GetMultiDMATransfer>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002522:	2301      	movs	r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e008      	b.n	800253a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002536:	2301      	movs	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10e      	bne.n	800255e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002544:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002550:	f043 0202 	orr.w	r2, r3, #2
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f843 	bl	80025e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d018      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x45a>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d013      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800258a:	f043 0208 	orr.w	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fed7 	bl	8003350 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40022100 	.word	0x40022100
 80025b4:	40022300 	.word	0x40022300
 80025b8:	58026300 	.word	0x58026300

080025bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0b9      	sub	sp, #228	; 0xe4
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002612:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4ab3      	ldr	r2, [pc, #716]	; (80028e8 <HAL_ADC_ConfigChannel+0x2f0>)
 800261a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_ADC_ConfigChannel+0x34>
 8002626:	2302      	movs	r3, #2
 8002628:	f000 bcfa 	b.w	8003020 <HAL_ADC_ConfigChannel+0xa28>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f98b 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 84de 	bne.w	8003002 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4aa8      	ldr	r2, [pc, #672]	; (80028ec <HAL_ADC_ConfigChannel+0x2f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d033      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d108      	bne.n	800266e <HAL_ADC_ConfigChannel+0x76>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2201      	movs	r2, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	e01d      	b.n	80026aa <HAL_ADC_ConfigChannel+0xb2>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800268a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e004      	b.n	80026a0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2201      	movs	r2, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	69d1      	ldr	r1, [r2, #28]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7fe fff4 	bl	80016b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f940 	bl	8001954 <LL_ADC_REG_IsConversionOngoing>
 80026d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f94c 	bl	800197a <LL_ADC_INJ_IsConversionOngoing>
 80026e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8270 	bne.w	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 826b 	bne.w	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	461a      	mov	r2, r3
 8002708:	f7ff f812 	bl	8001730 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a76      	ldr	r2, [pc, #472]	; (80028ec <HAL_ADC_ConfigChannel+0x2f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d10d      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	08db      	lsrs	r3, r3, #3
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002730:	e032      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002732:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_ADC_ConfigChannel+0x2f8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800273a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273e:	d10b      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x160>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	e01d      	b.n	8002794 <HAL_ADC_ConfigChannel+0x19c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_ADC_ConfigChannel+0x186>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	e00a      	b.n	8002794 <HAL_ADC_ConfigChannel+0x19c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d048      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6919      	ldr	r1, [r3, #16]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027b0:	f7fe fe7a 	bl	80014a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4c      	ldr	r2, [pc, #304]	; (80028ec <HAL_ADC_ConfigChannel+0x2f4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d119      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7fe ff12 	bl	80015f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1f0>
 80027e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e6:	e000      	b.n	80027ea <HAL_ADC_ConfigChannel+0x1f2>
 80027e8:	2300      	movs	r3, #0
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7fe fee0 	bl	80015b0 <LL_ADC_SetOffsetSaturation>
 80027f0:	e1ee      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6919      	ldr	r1, [r3, #16]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002800:	2b01      	cmp	r3, #1
 8002802:	d102      	bne.n	800280a <HAL_ADC_ConfigChannel+0x212>
 8002804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002808:	e000      	b.n	800280c <HAL_ADC_ConfigChannel+0x214>
 800280a:	2300      	movs	r3, #0
 800280c:	461a      	mov	r2, r3
 800280e:	f7fe fead 	bl	800156c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7e1b      	ldrb	r3, [r3, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x230>
 8002822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002826:	e000      	b.n	800282a <HAL_ADC_ConfigChannel+0x232>
 8002828:	2300      	movs	r3, #0
 800282a:	461a      	mov	r2, r3
 800282c:	f7fe fe84 	bl	8001538 <LL_ADC_SetDataRightShift>
 8002830:	e1ce      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_ADC_ConfigChannel+0x2f4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	f040 8181 	bne.w	8002b40 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fe61 	bl	800150c <LL_ADC_GetOffsetChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10a      	bne.n	800286a <HAL_ADC_ConfigChannel+0x272>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fe56 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	0e9b      	lsrs	r3, r3, #26
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	e01e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x2b0>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fe4b 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800288c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002890:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e004      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800289c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x2c8>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 031f 	and.w	r3, r3, #31
 80028be:	e01e      	b.n	80028fe <HAL_ADC_ConfigChannel+0x306>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80028d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80028dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e00a      	b.n	80028fe <HAL_ADC_ConfigChannel+0x306>
 80028e8:	47ff0000 	.word	0x47ff0000
 80028ec:	58026000 	.word	0x58026000
 80028f0:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 80028f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	429a      	cmp	r2, r3
 8002900:	d106      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fe94 	bl	8001638 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fdf8 	bl	800150c <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x344>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fded 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x382>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fde2 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800295a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e004      	b.n	8002978 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800296e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x39a>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	e018      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x3cc>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80029a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80029ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fe31 	bl	8001638 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fd95 	bl	800150c <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x40a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fd8a 	bl	800150c <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x448>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fd7f 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x460>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e014      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x48a>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e004      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d106      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fdd2 	bl	8001638 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2103      	movs	r1, #3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fd36 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x4c8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2103      	movs	r1, #3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fd2b 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	f003 021f 	and.w	r2, r3, #31
 8002abe:	e017      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x4f8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fd20 	bl	800150c <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ada:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x510>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	e011      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x534>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d14f      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2103      	movs	r1, #3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fd7d 	bl	8001638 <LL_ADC_SetOffsetState>
 8002b3e:	e047      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b62:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b86:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002baa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d107      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fe95 	bl	8001904 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8219 	bne.w	8003014 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f7fe fdca 	bl	8001788 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4aa1      	ldr	r2, [pc, #644]	; (8002e80 <HAL_ADC_ConfigChannel+0x888>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f040 812e 	bne.w	8002e5c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x630>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	3301      	adds	r3, #1
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e019      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x664>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2b09      	cmp	r3, #9
 8002c54:	bf94      	ite	ls
 8002c56:	2301      	movls	r3, #1
 8002c58:	2300      	movhi	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d079      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x684>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	e015      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x6b0>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x6d0>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x700>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x726>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	051b      	lsls	r3, r3, #20
 8002d1c:	e018      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x758>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d50:	430b      	orrs	r3, r1
 8002d52:	e07e      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x778>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0e9b      	lsrs	r3, r3, #26
 8002d66:	3301      	adds	r3, #1
 8002d68:	069b      	lsls	r3, r3, #26
 8002d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6e:	e015      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x7a4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e003      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	069b      	lsls	r3, r3, #26
 8002d98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 031f 	and.w	r3, r3, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	e017      	b.n	8002dec <HAL_ADC_ConfigChannel+0x7f4>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	61bb      	str	r3, [r7, #24]
  return result;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10d      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x820>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b1e      	subs	r3, #30
 8002e10:	051b      	lsls	r3, r3, #20
 8002e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e16:	e01b      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x858>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	60fb      	str	r3, [r7, #12]
  return result;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	051b      	lsls	r3, r3, #20
 8002e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e50:	430b      	orrs	r3, r1
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7fe fc6a 	bl	8001730 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f280 80d7 	bge.w	8003014 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <HAL_ADC_ConfigChannel+0x88c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d004      	beq.n	8002e7a <HAL_ADC_ConfigChannel+0x882>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <HAL_ADC_ConfigChannel+0x890>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10a      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x898>
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <HAL_ADC_ConfigChannel+0x894>)
 8002e7c:	e009      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x89a>
 8002e7e:	bf00      	nop
 8002e80:	47ff0000 	.word	0x47ff0000
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40022100 	.word	0x40022100
 8002e8c:	40022300 	.word	0x40022300
 8002e90:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_ADC_ConfigChannel+0xa30>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fafa 	bl	800148c <LL_ADC_GetCommonPathInternalCh>
 8002e98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a62      	ldr	r2, [pc, #392]	; (800302c <HAL_ADC_ConfigChannel+0xa34>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x8b8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <HAL_ADC_ConfigChannel+0xa38>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d10e      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x8d6>
 8002eb0:	485e      	ldr	r0, [pc, #376]	; (800302c <HAL_ADC_ConfigChannel+0xa34>)
 8002eb2:	f7fe fd27 	bl	8001904 <LL_ADC_IsEnabled>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	485d      	ldr	r0, [pc, #372]	; (8003030 <HAL_ADC_ConfigChannel+0xa38>)
 8002eba:	f7fe fd23 	bl	8001904 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4323      	orrs	r3, r4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	e008      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x8e8>
 8002ece:	4859      	ldr	r0, [pc, #356]	; (8003034 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ed0:	f7fe fd18 	bl	8001904 <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8084 	beq.w	8002fee <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a53      	ldr	r2, [pc, #332]	; (8003038 <HAL_ADC_ConfigChannel+0xa40>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d132      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x95e>
 8002ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d12c      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	f040 8086 	bne.w	8003014 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_ADC_ConfigChannel+0xa34>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0x924>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a46      	ldr	r2, [pc, #280]	; (8003030 <HAL_ADC_ConfigChannel+0xa38>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x928>
 8002f1c:	4a47      	ldr	r2, [pc, #284]	; (800303c <HAL_ADC_ConfigChannel+0xa44>)
 8002f1e:	e000      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x92a>
 8002f20:	4a41      	ldr	r2, [pc, #260]	; (8003028 <HAL_ADC_ConfigChannel+0xa30>)
 8002f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f7fe fa9a 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_ADC_ConfigChannel+0xa48>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	4a42      	ldr	r2, [pc, #264]	; (8003044 <HAL_ADC_ConfigChannel+0xa4c>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	3301      	adds	r3, #1
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f46:	e002      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f9      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f54:	e05e      	b.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3b      	ldr	r2, [pc, #236]	; (8003048 <HAL_ADC_ConfigChannel+0xa50>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d120      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x9aa>
 8002f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a30      	ldr	r2, [pc, #192]	; (8003034 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d14e      	bne.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_ADC_ConfigChannel+0xa34>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_ConfigChannel+0x992>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2a      	ldr	r2, [pc, #168]	; (8003030 <HAL_ADC_ConfigChannel+0xa38>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x996>
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	; (800303c <HAL_ADC_ConfigChannel+0xa44>)
 8002f8c:	e000      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x998>
 8002f8e:	4a26      	ldr	r2, [pc, #152]	; (8003028 <HAL_ADC_ConfigChannel+0xa30>)
 8002f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f7fe fa63 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fa0:	e038      	b.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a29      	ldr	r2, [pc, #164]	; (800304c <HAL_ADC_ConfigChannel+0xa54>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d133      	bne.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
 8002fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12d      	bne.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <HAL_ADC_ConfigChannel+0xa3c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d128      	bne.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_ADC_ConfigChannel+0xa34>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x9de>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	; (8003030 <HAL_ADC_ConfigChannel+0xa38>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x9e2>
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_ADC_ConfigChannel+0xa44>)
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x9e4>
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_ADC_ConfigChannel+0xa30>)
 8002fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7fe fa3d 	bl	8001466 <LL_ADC_SetCommonPathInternalCh>
 8002fec:	e012      	b.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003000:	e008      	b.n	8003014 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800301c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003020:	4618      	mov	r0, r3
 8003022:	37e4      	adds	r7, #228	; 0xe4
 8003024:	46bd      	mov	sp, r7
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	58026300 	.word	0x58026300
 800302c:	40022000 	.word	0x40022000
 8003030:	40022100 	.word	0x40022100
 8003034:	58026000 	.word	0x58026000
 8003038:	c7520000 	.word	0xc7520000
 800303c:	40022300 	.word	0x40022300
 8003040:	24000010 	.word	0x24000010
 8003044:	053e2d63 	.word	0x053e2d63
 8003048:	c3210000 	.word	0xc3210000
 800304c:	cb840000 	.word	0xcb840000

08003050 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fc51 	bl	8001904 <LL_ADC_IsEnabled>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d16e      	bne.n	8003146 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <ADC_Enable+0x100>)
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e05a      	b.n	8003148 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fc20 	bl	80018dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800309c:	f7fe f9ae 	bl	80013fc <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <ADC_Enable+0x104>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <ADC_Enable+0x66>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a29      	ldr	r2, [pc, #164]	; (8003158 <ADC_Enable+0x108>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <ADC_Enable+0x6a>
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <ADC_Enable+0x10c>)
 80030b8:	e000      	b.n	80030bc <ADC_Enable+0x6c>
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <ADC_Enable+0x110>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fba3 	bl	8001808 <LL_ADC_GetMultimode>
 80030c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <ADC_Enable+0x108>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d002      	beq.n	80030d4 <ADC_Enable+0x84>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	e000      	b.n	80030d6 <ADC_Enable+0x86>
 80030d4:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <ADC_Enable+0x104>)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02c      	beq.n	8003138 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d130      	bne.n	8003146 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e4:	e028      	b.n	8003138 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fc0a 	bl	8001904 <LL_ADC_IsEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fbee 	bl	80018dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003100:	f7fe f97c 	bl	80013fc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d914      	bls.n	8003138 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d00d      	beq.n	8003138 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d1cf      	bne.n	80030e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	8000003f 	.word	0x8000003f
 8003154:	40022000 	.word	0x40022000
 8003158:	40022100 	.word	0x40022100
 800315c:	40022300 	.word	0x40022300
 8003160:	58026300 	.word	0x58026300

08003164 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6b      	ldr	r2, [pc, #428]	; (8003320 <ADC_ConfigureBoostMode+0x1bc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <ADC_ConfigureBoostMode+0x1c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <ADC_ConfigureBoostMode+0x1c0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <ADC_ConfigureBoostMode+0x30>
 8003180:	4b69      	ldr	r3, [pc, #420]	; (8003328 <ADC_ConfigureBoostMode+0x1c4>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e008      	b.n	80031a6 <ADC_ConfigureBoostMode+0x42>
 8003194:	4b65      	ldr	r3, [pc, #404]	; (800332c <ADC_ConfigureBoostMode+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01c      	beq.n	80031e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031aa:	f003 fce5 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 80031ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031b8:	d010      	beq.n	80031dc <ADC_ConfigureBoostMode+0x78>
 80031ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031be:	d871      	bhi.n	80032a4 <ADC_ConfigureBoostMode+0x140>
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d002      	beq.n	80031cc <ADC_ConfigureBoostMode+0x68>
 80031c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ca:	d16b      	bne.n	80032a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	60fb      	str	r3, [r7, #12]
        break;
 80031da:	e066      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	60fb      	str	r3, [r7, #12]
        break;
 80031e2:	e062      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031e8:	f004 fc1c 	bl	8007a24 <HAL_RCCEx_GetPeriphCLKFreq>
 80031ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031f6:	d051      	beq.n	800329c <ADC_ConfigureBoostMode+0x138>
 80031f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031fc:	d854      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 80031fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003202:	d047      	beq.n	8003294 <ADC_ConfigureBoostMode+0x130>
 8003204:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003208:	d84e      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 800320a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800320e:	d03d      	beq.n	800328c <ADC_ConfigureBoostMode+0x128>
 8003210:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003214:	d848      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321a:	d033      	beq.n	8003284 <ADC_ConfigureBoostMode+0x120>
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003220:	d842      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 8003222:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003226:	d029      	beq.n	800327c <ADC_ConfigureBoostMode+0x118>
 8003228:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800322c:	d83c      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 800322e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003232:	d01a      	beq.n	800326a <ADC_ConfigureBoostMode+0x106>
 8003234:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003238:	d836      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 800323a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800323e:	d014      	beq.n	800326a <ADC_ConfigureBoostMode+0x106>
 8003240:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003244:	d830      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324a:	d00e      	beq.n	800326a <ADC_ConfigureBoostMode+0x106>
 800324c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003250:	d82a      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 8003252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003256:	d008      	beq.n	800326a <ADC_ConfigureBoostMode+0x106>
 8003258:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800325c:	d824      	bhi.n	80032a8 <ADC_ConfigureBoostMode+0x144>
 800325e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003262:	d002      	beq.n	800326a <ADC_ConfigureBoostMode+0x106>
 8003264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003268:	d11e      	bne.n	80032a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	60fb      	str	r3, [r7, #12]
        break;
 800327a:	e016      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
        break;
 8003282:	e012      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	60fb      	str	r3, [r7, #12]
        break;
 800328a:	e00e      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	60fb      	str	r3, [r7, #12]
        break;
 8003292:	e00a      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	09db      	lsrs	r3, r3, #7
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	e006      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	60fb      	str	r3, [r7, #12]
        break;
 80032a2:	e002      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
        break;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80032a8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <ADC_ConfigureBoostMode+0x1cc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d808      	bhi.n	80032ca <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032c8:	e025      	b.n	8003316 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <ADC_ConfigureBoostMode+0x1d0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d80a      	bhi.n	80032e8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	609a      	str	r2, [r3, #8]
}
 80032e6:	e016      	b.n	8003316 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <ADC_ConfigureBoostMode+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d80a      	bhi.n	8003306 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	e007      	b.n	8003316 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003314:	609a      	str	r2, [r3, #8]
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000
 8003324:	40022100 	.word	0x40022100
 8003328:	40022300 	.word	0x40022300
 800332c:	58026300 	.word	0x58026300
 8003330:	005f5e10 	.word	0x005f5e10
 8003334:	00bebc20 	.word	0x00bebc20
 8003338:	017d7840 	.word	0x017d7840

0800333c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <__NVIC_SetPriorityGrouping>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <__NVIC_SetPriorityGrouping+0x40>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <__NVIC_SetPriorityGrouping+0x40>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00
 80033e4:	05fa0000 	.word	0x05fa0000

080033e8 <__NVIC_GetPriorityGrouping>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003564:	f7ff ff40 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 8003568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	6978      	ldr	r0, [r7, #20]
 8003570:	f7ff ff90 	bl	8003494 <NVIC_EncodePriority>
 8003574:	4602      	mov	r2, r0
 8003576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff5f 	bl	8003440 <__NVIC_SetPriority>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff33 	bl	8003404 <__NVIC_EnableIRQ>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff ffa4 	bl	80034fc <SysTick_Config>
 80035b4:	4603      	mov	r3, r0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7fd ff18 	bl	80013fc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e314      	b.n	8003c02 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a66      	ldr	r2, [pc, #408]	; (8003778 <HAL_DMA_Init+0x1b8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d04a      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_DMA_Init+0x1bc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d045      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a63      	ldr	r2, [pc, #396]	; (8003780 <HAL_DMA_Init+0x1c0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d040      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a62      	ldr	r2, [pc, #392]	; (8003784 <HAL_DMA_Init+0x1c4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d03b      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a60      	ldr	r2, [pc, #384]	; (8003788 <HAL_DMA_Init+0x1c8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d036      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5f      	ldr	r2, [pc, #380]	; (800378c <HAL_DMA_Init+0x1cc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d031      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5d      	ldr	r2, [pc, #372]	; (8003790 <HAL_DMA_Init+0x1d0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02c      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_DMA_Init+0x1d4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d027      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <HAL_DMA_Init+0x1d8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d022      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a59      	ldr	r2, [pc, #356]	; (800379c <HAL_DMA_Init+0x1dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d01d      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a57      	ldr	r2, [pc, #348]	; (80037a0 <HAL_DMA_Init+0x1e0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d018      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a56      	ldr	r2, [pc, #344]	; (80037a4 <HAL_DMA_Init+0x1e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a54      	ldr	r2, [pc, #336]	; (80037a8 <HAL_DMA_Init+0x1e8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00e      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a53      	ldr	r2, [pc, #332]	; (80037ac <HAL_DMA_Init+0x1ec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d009      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_DMA_Init+0x1f0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_DMA_Init+0xb8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_DMA_Init+0x1f4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_DMA_Init+0xbc>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_DMA_Init+0xbe>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 813c 	beq.w	80038fc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a37      	ldr	r2, [pc, #220]	; (8003778 <HAL_DMA_Init+0x1b8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_Init+0x174>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_DMA_Init+0x1bc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_DMA_Init+0x1c0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a33      	ldr	r2, [pc, #204]	; (8003784 <HAL_DMA_Init+0x1c4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_DMA_Init+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_DMA_Init+0x1cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_DMA_Init+0x1d0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_DMA_Init+0x1d4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <HAL_DMA_Init+0x1d8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2a      	ldr	r2, [pc, #168]	; (800379c <HAL_DMA_Init+0x1dc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_Init+0x174>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_DMA_Init+0x1e0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_Init+0x174>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <HAL_DMA_Init+0x1e4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_Init+0x174>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_DMA_Init+0x1e8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_Init+0x174>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a24      	ldr	r2, [pc, #144]	; (80037ac <HAL_DMA_Init+0x1ec>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_Init+0x174>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <HAL_DMA_Init+0x1f0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_Init+0x174>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <HAL_DMA_Init+0x1f4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <HAL_DMA_Init+0x186>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e007      	b.n	8003756 <HAL_DMA_Init+0x196>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003756:	e02f      	b.n	80037b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003758:	f7fd fe50 	bl	80013fc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b05      	cmp	r3, #5
 8003764:	d928      	bls.n	80037b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2203      	movs	r2, #3
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e244      	b.n	8003c02 <HAL_DMA_Init+0x642>
 8003778:	40020010 	.word	0x40020010
 800377c:	40020028 	.word	0x40020028
 8003780:	40020040 	.word	0x40020040
 8003784:	40020058 	.word	0x40020058
 8003788:	40020070 	.word	0x40020070
 800378c:	40020088 	.word	0x40020088
 8003790:	400200a0 	.word	0x400200a0
 8003794:	400200b8 	.word	0x400200b8
 8003798:	40020410 	.word	0x40020410
 800379c:	40020428 	.word	0x40020428
 80037a0:	40020440 	.word	0x40020440
 80037a4:	40020458 	.word	0x40020458
 80037a8:	40020470 	.word	0x40020470
 80037ac:	40020488 	.word	0x40020488
 80037b0:	400204a0 	.word	0x400204a0
 80037b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1c8      	bne.n	8003758 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <HAL_DMA_Init+0x424>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	4313      	orrs	r3, r2
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b28      	cmp	r3, #40	; 0x28
 8003822:	d903      	bls.n	800382c <HAL_DMA_Init+0x26c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b2e      	cmp	r3, #46	; 0x2e
 800382a:	d91f      	bls.n	800386c <HAL_DMA_Init+0x2ac>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b3e      	cmp	r3, #62	; 0x3e
 8003832:	d903      	bls.n	800383c <HAL_DMA_Init+0x27c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b42      	cmp	r3, #66	; 0x42
 800383a:	d917      	bls.n	800386c <HAL_DMA_Init+0x2ac>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b46      	cmp	r3, #70	; 0x46
 8003842:	d903      	bls.n	800384c <HAL_DMA_Init+0x28c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b48      	cmp	r3, #72	; 0x48
 800384a:	d90f      	bls.n	800386c <HAL_DMA_Init+0x2ac>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b4e      	cmp	r3, #78	; 0x4e
 8003852:	d903      	bls.n	800385c <HAL_DMA_Init+0x29c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b52      	cmp	r3, #82	; 0x52
 800385a:	d907      	bls.n	800386c <HAL_DMA_Init+0x2ac>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b73      	cmp	r3, #115	; 0x73
 8003862:	d905      	bls.n	8003870 <HAL_DMA_Init+0x2b0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b77      	cmp	r3, #119	; 0x77
 800386a:	d801      	bhi.n	8003870 <HAL_DMA_Init+0x2b0>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_DMA_Init+0x2b2>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800387c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f023 0307 	bic.w	r3, r3, #7
 8003894:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d117      	bne.n	80038d8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f001 ff18 	bl	80056f0 <DMA_CheckFifoParam>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2240      	movs	r2, #64	; 0x40
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e194      	b.n	8003c02 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 fe53 	bl	800558c <DMA_CalcBaseAndBitshift>
 80038e6:	4603      	mov	r3, r0
 80038e8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	e0ca      	b.n	8003a92 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a39      	ldr	r2, [pc, #228]	; (80039e8 <HAL_DMA_Init+0x428>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <HAL_DMA_Init+0x38c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a38      	ldr	r2, [pc, #224]	; (80039ec <HAL_DMA_Init+0x42c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <HAL_DMA_Init+0x38c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a36      	ldr	r2, [pc, #216]	; (80039f0 <HAL_DMA_Init+0x430>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_DMA_Init+0x38c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a35      	ldr	r2, [pc, #212]	; (80039f4 <HAL_DMA_Init+0x434>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_DMA_Init+0x38c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <HAL_DMA_Init+0x438>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_DMA_Init+0x38c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_DMA_Init+0x43c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_DMA_Init+0x38c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <HAL_DMA_Init+0x440>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_DMA_Init+0x38c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <HAL_DMA_Init+0x444>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_DMA_Init+0x390>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_DMA_Init+0x392>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8094 	beq.w	8003a80 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_DMA_Init+0x428>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d021      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_DMA_Init+0x42c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d01c      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <HAL_DMA_Init+0x430>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d017      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_DMA_Init+0x434>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d012      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_DMA_Init+0x438>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_DMA_Init+0x43c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d008      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_DMA_Init+0x440>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <HAL_DMA_Init+0x3e6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_DMA_Init+0x444>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_DMA_Init+0x448>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d01d      	beq.n	8003a0c <HAL_DMA_Init+0x44c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d102      	bne.n	80039de <HAL_DMA_Init+0x41e>
 80039d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039dc:	e017      	b.n	8003a0e <HAL_DMA_Init+0x44e>
 80039de:	2300      	movs	r3, #0
 80039e0:	e015      	b.n	8003a0e <HAL_DMA_Init+0x44e>
 80039e2:	bf00      	nop
 80039e4:	fe10803f 	.word	0xfe10803f
 80039e8:	58025408 	.word	0x58025408
 80039ec:	5802541c 	.word	0x5802541c
 80039f0:	58025430 	.word	0x58025430
 80039f4:	58025444 	.word	0x58025444
 80039f8:	58025458 	.word	0x58025458
 80039fc:	5802546c 	.word	0x5802546c
 8003a00:	58025480 	.word	0x58025480
 8003a04:	58025494 	.word	0x58025494
 8003a08:	fffe000f 	.word	0xfffe000f
 8003a0c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a3c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b6e      	ldr	r3, [pc, #440]	; (8003c0c <HAL_DMA_Init+0x64c>)
 8003a54:	4413      	add	r3, r2
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_DMA_Init+0x650>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	009a      	lsls	r2, r3, #2
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f001 fd91 	bl	800558c <DMA_CalcBaseAndBitshift>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	e008      	b.n	8003a92 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2240      	movs	r2, #64	; 0x40
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0b7      	b.n	8003c02 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_DMA_Init+0x654>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d072      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	; (8003c18 <HAL_DMA_Init+0x658>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d06d      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_DMA_Init+0x65c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d068      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_DMA_Init+0x660>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d063      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a59      	ldr	r2, [pc, #356]	; (8003c24 <HAL_DMA_Init+0x664>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d05e      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_DMA_Init+0x668>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d059      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a56      	ldr	r2, [pc, #344]	; (8003c2c <HAL_DMA_Init+0x66c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d054      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_DMA_Init+0x670>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04f      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_DMA_Init+0x674>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04a      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <HAL_DMA_Init+0x678>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d045      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a50      	ldr	r2, [pc, #320]	; (8003c3c <HAL_DMA_Init+0x67c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d040      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_DMA_Init+0x680>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d03b      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a4d      	ldr	r2, [pc, #308]	; (8003c44 <HAL_DMA_Init+0x684>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d036      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4b      	ldr	r2, [pc, #300]	; (8003c48 <HAL_DMA_Init+0x688>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d031      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a4a      	ldr	r2, [pc, #296]	; (8003c4c <HAL_DMA_Init+0x68c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d02c      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <HAL_DMA_Init+0x690>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d027      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a47      	ldr	r2, [pc, #284]	; (8003c54 <HAL_DMA_Init+0x694>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a45      	ldr	r2, [pc, #276]	; (8003c58 <HAL_DMA_Init+0x698>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <HAL_DMA_Init+0x69c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <HAL_DMA_Init+0x6a0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a41      	ldr	r2, [pc, #260]	; (8003c64 <HAL_DMA_Init+0x6a4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3f      	ldr	r2, [pc, #252]	; (8003c68 <HAL_DMA_Init+0x6a8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <HAL_DMA_Init+0x6ac>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_DMA_Init+0x5c2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <HAL_DMA_Init+0x6b0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d101      	bne.n	8003b86 <HAL_DMA_Init+0x5c6>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_DMA_Init+0x5c8>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d032      	beq.n	8003bf2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 fe2b 	bl	80057e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d102      	bne.n	8003ba0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bb4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <HAL_DMA_Init+0x620>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d80c      	bhi.n	8003be0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f001 fea8 	bl	800591c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	e008      	b.n	8003bf2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	a7fdabf8 	.word	0xa7fdabf8
 8003c10:	cccccccd 	.word	0xcccccccd
 8003c14:	40020010 	.word	0x40020010
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	40020040 	.word	0x40020040
 8003c20:	40020058 	.word	0x40020058
 8003c24:	40020070 	.word	0x40020070
 8003c28:	40020088 	.word	0x40020088
 8003c2c:	400200a0 	.word	0x400200a0
 8003c30:	400200b8 	.word	0x400200b8
 8003c34:	40020410 	.word	0x40020410
 8003c38:	40020428 	.word	0x40020428
 8003c3c:	40020440 	.word	0x40020440
 8003c40:	40020458 	.word	0x40020458
 8003c44:	40020470 	.word	0x40020470
 8003c48:	40020488 	.word	0x40020488
 8003c4c:	400204a0 	.word	0x400204a0
 8003c50:	400204b8 	.word	0x400204b8
 8003c54:	58025408 	.word	0x58025408
 8003c58:	5802541c 	.word	0x5802541c
 8003c5c:	58025430 	.word	0x58025430
 8003c60:	58025444 	.word	0x58025444
 8003c64:	58025458 	.word	0x58025458
 8003c68:	5802546c 	.word	0x5802546c
 8003c6c:	58025480 	.word	0x58025480
 8003c70:	58025494 	.word	0x58025494

08003c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003c7c:	f7fd fbbe 	bl	80013fc <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e2dc      	b.n	8004246 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d008      	beq.n	8003caa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e2cd      	b.n	8004246 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a76      	ldr	r2, [pc, #472]	; (8003e88 <HAL_DMA_Abort+0x214>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d04a      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a74      	ldr	r2, [pc, #464]	; (8003e8c <HAL_DMA_Abort+0x218>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d045      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a73      	ldr	r2, [pc, #460]	; (8003e90 <HAL_DMA_Abort+0x21c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d040      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a71      	ldr	r2, [pc, #452]	; (8003e94 <HAL_DMA_Abort+0x220>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d03b      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a70      	ldr	r2, [pc, #448]	; (8003e98 <HAL_DMA_Abort+0x224>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d036      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_DMA_Abort+0x228>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d031      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6d      	ldr	r2, [pc, #436]	; (8003ea0 <HAL_DMA_Abort+0x22c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d02c      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6b      	ldr	r2, [pc, #428]	; (8003ea4 <HAL_DMA_Abort+0x230>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d027      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6a      	ldr	r2, [pc, #424]	; (8003ea8 <HAL_DMA_Abort+0x234>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d022      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a68      	ldr	r2, [pc, #416]	; (8003eac <HAL_DMA_Abort+0x238>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d01d      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a67      	ldr	r2, [pc, #412]	; (8003eb0 <HAL_DMA_Abort+0x23c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d018      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a65      	ldr	r2, [pc, #404]	; (8003eb4 <HAL_DMA_Abort+0x240>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a64      	ldr	r2, [pc, #400]	; (8003eb8 <HAL_DMA_Abort+0x244>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a62      	ldr	r2, [pc, #392]	; (8003ebc <HAL_DMA_Abort+0x248>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a61      	ldr	r2, [pc, #388]	; (8003ec0 <HAL_DMA_Abort+0x24c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_DMA_Abort+0xd6>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5f      	ldr	r2, [pc, #380]	; (8003ec4 <HAL_DMA_Abort+0x250>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_DMA_Abort+0xda>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_DMA_Abort+0xdc>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 021e 	bic.w	r2, r2, #30
 8003d62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e00a      	b.n	8003d92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 020e 	bic.w	r2, r2, #14
 8003d8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <HAL_DMA_Abort+0x214>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d072      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_DMA_Abort+0x218>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d06d      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_DMA_Abort+0x21c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d068      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a37      	ldr	r2, [pc, #220]	; (8003e94 <HAL_DMA_Abort+0x220>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d063      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a36      	ldr	r2, [pc, #216]	; (8003e98 <HAL_DMA_Abort+0x224>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d05e      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_DMA_Abort+0x228>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d059      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <HAL_DMA_Abort+0x22c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d054      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_DMA_Abort+0x230>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04f      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <HAL_DMA_Abort+0x234>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <HAL_DMA_Abort+0x238>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2d      	ldr	r2, [pc, #180]	; (8003eb0 <HAL_DMA_Abort+0x23c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_DMA_Abort+0x240>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_DMA_Abort+0x244>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <HAL_DMA_Abort+0x248>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_DMA_Abort+0x24c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <HAL_DMA_Abort+0x250>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_DMA_Abort+0x254>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_DMA_Abort+0x258>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_DMA_Abort+0x25c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_DMA_Abort+0x260>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_DMA_Abort+0x264>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_DMA_Abort+0x268>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_DMA_Abort+0x26c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_Abort+0x20e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_DMA_Abort+0x270>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d132      	bne.n	8003ee8 <HAL_DMA_Abort+0x274>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e031      	b.n	8003eea <HAL_DMA_Abort+0x276>
 8003e86:	bf00      	nop
 8003e88:	40020010 	.word	0x40020010
 8003e8c:	40020028 	.word	0x40020028
 8003e90:	40020040 	.word	0x40020040
 8003e94:	40020058 	.word	0x40020058
 8003e98:	40020070 	.word	0x40020070
 8003e9c:	40020088 	.word	0x40020088
 8003ea0:	400200a0 	.word	0x400200a0
 8003ea4:	400200b8 	.word	0x400200b8
 8003ea8:	40020410 	.word	0x40020410
 8003eac:	40020428 	.word	0x40020428
 8003eb0:	40020440 	.word	0x40020440
 8003eb4:	40020458 	.word	0x40020458
 8003eb8:	40020470 	.word	0x40020470
 8003ebc:	40020488 	.word	0x40020488
 8003ec0:	400204a0 	.word	0x400204a0
 8003ec4:	400204b8 	.word	0x400204b8
 8003ec8:	58025408 	.word	0x58025408
 8003ecc:	5802541c 	.word	0x5802541c
 8003ed0:	58025430 	.word	0x58025430
 8003ed4:	58025444 	.word	0x58025444
 8003ed8:	58025458 	.word	0x58025458
 8003edc:	5802546c 	.word	0x5802546c
 8003ee0:	58025480 	.word	0x58025480
 8003ee4:	58025494 	.word	0x58025494
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a6d      	ldr	r2, [pc, #436]	; (80040b8 <HAL_DMA_Abort+0x444>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <HAL_DMA_Abort+0x448>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6a      	ldr	r2, [pc, #424]	; (80040c0 <HAL_DMA_Abort+0x44c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a68      	ldr	r2, [pc, #416]	; (80040c4 <HAL_DMA_Abort+0x450>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <HAL_DMA_Abort+0x454>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_DMA_Abort+0x458>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_DMA_Abort+0x45c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a62      	ldr	r2, [pc, #392]	; (80040d4 <HAL_DMA_Abort+0x460>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_DMA_Abort+0x464>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a5f      	ldr	r2, [pc, #380]	; (80040dc <HAL_DMA_Abort+0x468>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a5e      	ldr	r2, [pc, #376]	; (80040e0 <HAL_DMA_Abort+0x46c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_DMA_Abort+0x470>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_DMA_Abort+0x474>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a59      	ldr	r2, [pc, #356]	; (80040ec <HAL_DMA_Abort+0x478>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_DMA_Abort+0x47c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_Abort+0x32a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_DMA_Abort+0x480>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_Abort+0x33c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e007      	b.n	8003fc0 <HAL_DMA_Abort+0x34c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003fc0:	e013      	b.n	8003fea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc2:	f7fd fa1b 	bl	80013fc <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d90c      	bls.n	8003fea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e12d      	b.n	8004246 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <HAL_DMA_Abort+0x444>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04a      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <HAL_DMA_Abort+0x448>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d045      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <HAL_DMA_Abort+0x44c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d040      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <HAL_DMA_Abort+0x450>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d03b      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <HAL_DMA_Abort+0x454>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d036      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <HAL_DMA_Abort+0x458>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d031      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <HAL_DMA_Abort+0x45c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d02c      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <HAL_DMA_Abort+0x460>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d027      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <HAL_DMA_Abort+0x464>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a21      	ldr	r2, [pc, #132]	; (80040dc <HAL_DMA_Abort+0x468>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01d      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <HAL_DMA_Abort+0x46c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_DMA_Abort+0x470>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_DMA_Abort+0x474>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_DMA_Abort+0x478>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_DMA_Abort+0x47c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_DMA_Abort+0x422>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_DMA_Abort+0x480>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_DMA_Abort+0x426>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_DMA_Abort+0x428>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02b      	beq.n	80040f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	223f      	movs	r2, #63	; 0x3f
 80040b0:	409a      	lsls	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	e02a      	b.n	800410e <HAL_DMA_Abort+0x49a>
 80040b8:	40020010 	.word	0x40020010
 80040bc:	40020028 	.word	0x40020028
 80040c0:	40020040 	.word	0x40020040
 80040c4:	40020058 	.word	0x40020058
 80040c8:	40020070 	.word	0x40020070
 80040cc:	40020088 	.word	0x40020088
 80040d0:	400200a0 	.word	0x400200a0
 80040d4:	400200b8 	.word	0x400200b8
 80040d8:	40020410 	.word	0x40020410
 80040dc:	40020428 	.word	0x40020428
 80040e0:	40020440 	.word	0x40020440
 80040e4:	40020458 	.word	0x40020458
 80040e8:	40020470 	.word	0x40020470
 80040ec:	40020488 	.word	0x40020488
 80040f0:	400204a0 	.word	0x400204a0
 80040f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2201      	movs	r2, #1
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a4f      	ldr	r2, [pc, #316]	; (8004250 <HAL_DMA_Abort+0x5dc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d072      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a4d      	ldr	r2, [pc, #308]	; (8004254 <HAL_DMA_Abort+0x5e0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d06d      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a4c      	ldr	r2, [pc, #304]	; (8004258 <HAL_DMA_Abort+0x5e4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d068      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_DMA_Abort+0x5e8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d063      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a49      	ldr	r2, [pc, #292]	; (8004260 <HAL_DMA_Abort+0x5ec>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d05e      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a47      	ldr	r2, [pc, #284]	; (8004264 <HAL_DMA_Abort+0x5f0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d059      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_DMA_Abort+0x5f4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d054      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a44      	ldr	r2, [pc, #272]	; (800426c <HAL_DMA_Abort+0x5f8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d04f      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a43      	ldr	r2, [pc, #268]	; (8004270 <HAL_DMA_Abort+0x5fc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d04a      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a41      	ldr	r2, [pc, #260]	; (8004274 <HAL_DMA_Abort+0x600>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d045      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a40      	ldr	r2, [pc, #256]	; (8004278 <HAL_DMA_Abort+0x604>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3e      	ldr	r2, [pc, #248]	; (800427c <HAL_DMA_Abort+0x608>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d03b      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <HAL_DMA_Abort+0x60c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d036      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3b      	ldr	r2, [pc, #236]	; (8004284 <HAL_DMA_Abort+0x610>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d031      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3a      	ldr	r2, [pc, #232]	; (8004288 <HAL_DMA_Abort+0x614>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d02c      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a38      	ldr	r2, [pc, #224]	; (800428c <HAL_DMA_Abort+0x618>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d027      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_DMA_Abort+0x61c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a35      	ldr	r2, [pc, #212]	; (8004294 <HAL_DMA_Abort+0x620>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01d      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_DMA_Abort+0x624>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a32      	ldr	r2, [pc, #200]	; (800429c <HAL_DMA_Abort+0x628>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a31      	ldr	r2, [pc, #196]	; (80042a0 <HAL_DMA_Abort+0x62c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <HAL_DMA_Abort+0x630>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2e      	ldr	r2, [pc, #184]	; (80042a8 <HAL_DMA_Abort+0x634>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_DMA_Abort+0x58a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <HAL_DMA_Abort+0x638>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_Abort+0x58e>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_DMA_Abort+0x590>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004210:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004228:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004232:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40020010 	.word	0x40020010
 8004254:	40020028 	.word	0x40020028
 8004258:	40020040 	.word	0x40020040
 800425c:	40020058 	.word	0x40020058
 8004260:	40020070 	.word	0x40020070
 8004264:	40020088 	.word	0x40020088
 8004268:	400200a0 	.word	0x400200a0
 800426c:	400200b8 	.word	0x400200b8
 8004270:	40020410 	.word	0x40020410
 8004274:	40020428 	.word	0x40020428
 8004278:	40020440 	.word	0x40020440
 800427c:	40020458 	.word	0x40020458
 8004280:	40020470 	.word	0x40020470
 8004284:	40020488 	.word	0x40020488
 8004288:	400204a0 	.word	0x400204a0
 800428c:	400204b8 	.word	0x400204b8
 8004290:	58025408 	.word	0x58025408
 8004294:	5802541c 	.word	0x5802541c
 8004298:	58025430 	.word	0x58025430
 800429c:	58025444 	.word	0x58025444
 80042a0:	58025458 	.word	0x58025458
 80042a4:	5802546c 	.word	0x5802546c
 80042a8:	58025480 	.word	0x58025480
 80042ac:	58025494 	.word	0x58025494

080042b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e205      	b.n	80046ce <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e1fa      	b.n	80046ce <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a8c      	ldr	r2, [pc, #560]	; (8004510 <HAL_DMA_Abort_IT+0x260>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d04a      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a8b      	ldr	r2, [pc, #556]	; (8004514 <HAL_DMA_Abort_IT+0x264>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d045      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a89      	ldr	r2, [pc, #548]	; (8004518 <HAL_DMA_Abort_IT+0x268>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d040      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a88      	ldr	r2, [pc, #544]	; (800451c <HAL_DMA_Abort_IT+0x26c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d03b      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a86      	ldr	r2, [pc, #536]	; (8004520 <HAL_DMA_Abort_IT+0x270>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d036      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a85      	ldr	r2, [pc, #532]	; (8004524 <HAL_DMA_Abort_IT+0x274>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d031      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a83      	ldr	r2, [pc, #524]	; (8004528 <HAL_DMA_Abort_IT+0x278>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02c      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a82      	ldr	r2, [pc, #520]	; (800452c <HAL_DMA_Abort_IT+0x27c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d027      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_DMA_Abort_IT+0x280>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7f      	ldr	r2, [pc, #508]	; (8004534 <HAL_DMA_Abort_IT+0x284>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a7d      	ldr	r2, [pc, #500]	; (8004538 <HAL_DMA_Abort_IT+0x288>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7c      	ldr	r2, [pc, #496]	; (800453c <HAL_DMA_Abort_IT+0x28c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a7a      	ldr	r2, [pc, #488]	; (8004540 <HAL_DMA_Abort_IT+0x290>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a79      	ldr	r2, [pc, #484]	; (8004544 <HAL_DMA_Abort_IT+0x294>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a77      	ldr	r2, [pc, #476]	; (8004548 <HAL_DMA_Abort_IT+0x298>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_DMA_Abort_IT+0xc8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a76      	ldr	r2, [pc, #472]	; (800454c <HAL_DMA_Abort_IT+0x29c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <HAL_DMA_Abort_IT+0xcc>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_DMA_Abort_IT+0xce>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d065      	beq.n	800444e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a60      	ldr	r2, [pc, #384]	; (8004510 <HAL_DMA_Abort_IT+0x260>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <HAL_DMA_Abort_IT+0x264>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5d      	ldr	r2, [pc, #372]	; (8004518 <HAL_DMA_Abort_IT+0x268>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5b      	ldr	r2, [pc, #364]	; (800451c <HAL_DMA_Abort_IT+0x26c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_DMA_Abort_IT+0x270>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a58      	ldr	r2, [pc, #352]	; (8004524 <HAL_DMA_Abort_IT+0x274>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a57      	ldr	r2, [pc, #348]	; (8004528 <HAL_DMA_Abort_IT+0x278>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a55      	ldr	r2, [pc, #340]	; (800452c <HAL_DMA_Abort_IT+0x27c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a54      	ldr	r2, [pc, #336]	; (8004530 <HAL_DMA_Abort_IT+0x280>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_DMA_Abort_IT+0x284>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_DMA_Abort_IT+0x288>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a4f      	ldr	r2, [pc, #316]	; (800453c <HAL_DMA_Abort_IT+0x28c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4e      	ldr	r2, [pc, #312]	; (8004540 <HAL_DMA_Abort_IT+0x290>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <HAL_DMA_Abort_IT+0x294>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a4b      	ldr	r2, [pc, #300]	; (8004548 <HAL_DMA_Abort_IT+0x298>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_Abort_IT+0x17a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a49      	ldr	r2, [pc, #292]	; (800454c <HAL_DMA_Abort_IT+0x29c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <HAL_DMA_Abort_IT+0x18c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e147      	b.n	80046cc <HAL_DMA_Abort_IT+0x41c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e13e      	b.n	80046cc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 020e 	bic.w	r2, r2, #14
 800445c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2b      	ldr	r2, [pc, #172]	; (8004510 <HAL_DMA_Abort_IT+0x260>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d04a      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a29      	ldr	r2, [pc, #164]	; (8004514 <HAL_DMA_Abort_IT+0x264>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d045      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a28      	ldr	r2, [pc, #160]	; (8004518 <HAL_DMA_Abort_IT+0x268>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d040      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a26      	ldr	r2, [pc, #152]	; (800451c <HAL_DMA_Abort_IT+0x26c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d03b      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HAL_DMA_Abort_IT+0x270>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d036      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a23      	ldr	r2, [pc, #140]	; (8004524 <HAL_DMA_Abort_IT+0x274>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d031      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a22      	ldr	r2, [pc, #136]	; (8004528 <HAL_DMA_Abort_IT+0x278>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d02c      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <HAL_DMA_Abort_IT+0x27c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d027      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_DMA_Abort_IT+0x280>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <HAL_DMA_Abort_IT+0x284>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01d      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <HAL_DMA_Abort_IT+0x288>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d018      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_DMA_Abort_IT+0x28c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a19      	ldr	r2, [pc, #100]	; (8004540 <HAL_DMA_Abort_IT+0x290>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_DMA_Abort_IT+0x294>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_DMA_Abort_IT+0x298>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_DMA_Abort_IT+0x24e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <HAL_DMA_Abort_IT+0x29c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d128      	bne.n	8004550 <HAL_DMA_Abort_IT+0x2a0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e027      	b.n	8004560 <HAL_DMA_Abort_IT+0x2b0>
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <HAL_DMA_Abort_IT+0x428>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d072      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <HAL_DMA_Abort_IT+0x42c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d06d      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a59      	ldr	r2, [pc, #356]	; (80046e0 <HAL_DMA_Abort_IT+0x430>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d068      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_DMA_Abort_IT+0x434>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d063      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a56      	ldr	r2, [pc, #344]	; (80046e8 <HAL_DMA_Abort_IT+0x438>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d05e      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a55      	ldr	r2, [pc, #340]	; (80046ec <HAL_DMA_Abort_IT+0x43c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d059      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a53      	ldr	r2, [pc, #332]	; (80046f0 <HAL_DMA_Abort_IT+0x440>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d054      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_DMA_Abort_IT+0x444>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d04f      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <HAL_DMA_Abort_IT+0x448>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d04a      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a4f      	ldr	r2, [pc, #316]	; (80046fc <HAL_DMA_Abort_IT+0x44c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d045      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a4d      	ldr	r2, [pc, #308]	; (8004700 <HAL_DMA_Abort_IT+0x450>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d040      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4c      	ldr	r2, [pc, #304]	; (8004704 <HAL_DMA_Abort_IT+0x454>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d03b      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a4a      	ldr	r2, [pc, #296]	; (8004708 <HAL_DMA_Abort_IT+0x458>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d036      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a49      	ldr	r2, [pc, #292]	; (800470c <HAL_DMA_Abort_IT+0x45c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d031      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a47      	ldr	r2, [pc, #284]	; (8004710 <HAL_DMA_Abort_IT+0x460>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d02c      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a46      	ldr	r2, [pc, #280]	; (8004714 <HAL_DMA_Abort_IT+0x464>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d027      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a44      	ldr	r2, [pc, #272]	; (8004718 <HAL_DMA_Abort_IT+0x468>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a43      	ldr	r2, [pc, #268]	; (800471c <HAL_DMA_Abort_IT+0x46c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d01d      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a41      	ldr	r2, [pc, #260]	; (8004720 <HAL_DMA_Abort_IT+0x470>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a40      	ldr	r2, [pc, #256]	; (8004724 <HAL_DMA_Abort_IT+0x474>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3e      	ldr	r2, [pc, #248]	; (8004728 <HAL_DMA_Abort_IT+0x478>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3d      	ldr	r2, [pc, #244]	; (800472c <HAL_DMA_Abort_IT+0x47c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <HAL_DMA_Abort_IT+0x480>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_DMA_Abort_IT+0x3a0>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3a      	ldr	r2, [pc, #232]	; (8004734 <HAL_DMA_Abort_IT+0x484>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_DMA_Abort_IT+0x3a4>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_DMA_Abort_IT+0x3a6>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d028      	beq.n	80046ac <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004668:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2201      	movs	r2, #1
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004688:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40020010 	.word	0x40020010
 80046dc:	40020028 	.word	0x40020028
 80046e0:	40020040 	.word	0x40020040
 80046e4:	40020058 	.word	0x40020058
 80046e8:	40020070 	.word	0x40020070
 80046ec:	40020088 	.word	0x40020088
 80046f0:	400200a0 	.word	0x400200a0
 80046f4:	400200b8 	.word	0x400200b8
 80046f8:	40020410 	.word	0x40020410
 80046fc:	40020428 	.word	0x40020428
 8004700:	40020440 	.word	0x40020440
 8004704:	40020458 	.word	0x40020458
 8004708:	40020470 	.word	0x40020470
 800470c:	40020488 	.word	0x40020488
 8004710:	400204a0 	.word	0x400204a0
 8004714:	400204b8 	.word	0x400204b8
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494

08004738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004744:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <HAL_DMA_IRQHandler+0x1ac>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a67      	ldr	r2, [pc, #412]	; (80048e8 <HAL_DMA_IRQHandler+0x1b0>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5f      	ldr	r2, [pc, #380]	; (80048ec <HAL_DMA_IRQHandler+0x1b4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d04a      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5d      	ldr	r2, [pc, #372]	; (80048f0 <HAL_DMA_IRQHandler+0x1b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d045      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5c      	ldr	r2, [pc, #368]	; (80048f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d040      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a5a      	ldr	r2, [pc, #360]	; (80048f8 <HAL_DMA_IRQHandler+0x1c0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d03b      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a59      	ldr	r2, [pc, #356]	; (80048fc <HAL_DMA_IRQHandler+0x1c4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d036      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a57      	ldr	r2, [pc, #348]	; (8004900 <HAL_DMA_IRQHandler+0x1c8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d031      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a56      	ldr	r2, [pc, #344]	; (8004904 <HAL_DMA_IRQHandler+0x1cc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d02c      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a54      	ldr	r2, [pc, #336]	; (8004908 <HAL_DMA_IRQHandler+0x1d0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d027      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a53      	ldr	r2, [pc, #332]	; (800490c <HAL_DMA_IRQHandler+0x1d4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d022      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a51      	ldr	r2, [pc, #324]	; (8004910 <HAL_DMA_IRQHandler+0x1d8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01d      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a50      	ldr	r2, [pc, #320]	; (8004914 <HAL_DMA_IRQHandler+0x1dc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d018      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a4e      	ldr	r2, [pc, #312]	; (8004918 <HAL_DMA_IRQHandler+0x1e0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a4d      	ldr	r2, [pc, #308]	; (800491c <HAL_DMA_IRQHandler+0x1e4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a4b      	ldr	r2, [pc, #300]	; (8004920 <HAL_DMA_IRQHandler+0x1e8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4a      	ldr	r2, [pc, #296]	; (8004924 <HAL_DMA_IRQHandler+0x1ec>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_DMA_IRQHandler+0xd2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a48      	ldr	r2, [pc, #288]	; (8004928 <HAL_DMA_IRQHandler+0x1f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_DMA_IRQHandler+0xd6>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_DMA_IRQHandler+0xd8>
 800480e:	2300      	movs	r3, #0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 842b 	beq.w	800506c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2208      	movs	r2, #8
 8004820:	409a      	lsls	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80a2 	beq.w	8004970 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <HAL_DMA_IRQHandler+0x1b4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04a      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2d      	ldr	r2, [pc, #180]	; (80048f0 <HAL_DMA_IRQHandler+0x1b8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d045      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <HAL_DMA_IRQHandler+0x1bc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d040      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2a      	ldr	r2, [pc, #168]	; (80048f8 <HAL_DMA_IRQHandler+0x1c0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d03b      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a28      	ldr	r2, [pc, #160]	; (80048fc <HAL_DMA_IRQHandler+0x1c4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d036      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a27      	ldr	r2, [pc, #156]	; (8004900 <HAL_DMA_IRQHandler+0x1c8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d031      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a25      	ldr	r2, [pc, #148]	; (8004904 <HAL_DMA_IRQHandler+0x1cc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02c      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a24      	ldr	r2, [pc, #144]	; (8004908 <HAL_DMA_IRQHandler+0x1d0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d027      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_DMA_IRQHandler+0x1d4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <HAL_DMA_IRQHandler+0x1d8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_DMA_IRQHandler+0x1dc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_DMA_IRQHandler+0x1e0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_DMA_IRQHandler+0x1e4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_DMA_IRQHandler+0x1e8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_DMA_IRQHandler+0x1ec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_IRQHandler+0x194>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_DMA_IRQHandler+0x1f0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d12f      	bne.n	800492c <HAL_DMA_IRQHandler+0x1f4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e02e      	b.n	8004940 <HAL_DMA_IRQHandler+0x208>
 80048e2:	bf00      	nop
 80048e4:	24000010 	.word	0x24000010
 80048e8:	1b4e81b5 	.word	0x1b4e81b5
 80048ec:	40020010 	.word	0x40020010
 80048f0:	40020028 	.word	0x40020028
 80048f4:	40020040 	.word	0x40020040
 80048f8:	40020058 	.word	0x40020058
 80048fc:	40020070 	.word	0x40020070
 8004900:	40020088 	.word	0x40020088
 8004904:	400200a0 	.word	0x400200a0
 8004908:	400200b8 	.word	0x400200b8
 800490c:	40020410 	.word	0x40020410
 8004910:	40020428 	.word	0x40020428
 8004914:	40020440 	.word	0x40020440
 8004918:	40020458 	.word	0x40020458
 800491c:	40020470 	.word	0x40020470
 8004920:	40020488 	.word	0x40020488
 8004924:	400204a0 	.word	0x400204a0
 8004928:	400204b8 	.word	0x400204b8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	2208      	movs	r2, #8
 800495e:	409a      	lsls	r2, r3
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f043 0201 	orr.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d06e      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a69      	ldr	r2, [pc, #420]	; (8004b30 <HAL_DMA_IRQHandler+0x3f8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a67      	ldr	r2, [pc, #412]	; (8004b34 <HAL_DMA_IRQHandler+0x3fc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a66      	ldr	r2, [pc, #408]	; (8004b38 <HAL_DMA_IRQHandler+0x400>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a64      	ldr	r2, [pc, #400]	; (8004b3c <HAL_DMA_IRQHandler+0x404>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a63      	ldr	r2, [pc, #396]	; (8004b40 <HAL_DMA_IRQHandler+0x408>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a61      	ldr	r2, [pc, #388]	; (8004b44 <HAL_DMA_IRQHandler+0x40c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a60      	ldr	r2, [pc, #384]	; (8004b48 <HAL_DMA_IRQHandler+0x410>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5e      	ldr	r2, [pc, #376]	; (8004b4c <HAL_DMA_IRQHandler+0x414>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a5d      	ldr	r2, [pc, #372]	; (8004b50 <HAL_DMA_IRQHandler+0x418>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a5b      	ldr	r2, [pc, #364]	; (8004b54 <HAL_DMA_IRQHandler+0x41c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5a      	ldr	r2, [pc, #360]	; (8004b58 <HAL_DMA_IRQHandler+0x420>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a58      	ldr	r2, [pc, #352]	; (8004b5c <HAL_DMA_IRQHandler+0x424>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_DMA_IRQHandler+0x428>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a55      	ldr	r2, [pc, #340]	; (8004b64 <HAL_DMA_IRQHandler+0x42c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <HAL_DMA_IRQHandler+0x430>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x2ee>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_DMA_IRQHandler+0x434>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d10a      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x304>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e003      	b.n	8004a44 <HAL_DMA_IRQHandler+0x30c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2201      	movs	r2, #1
 8004a52:	409a      	lsls	r2, r3
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0202 	orr.w	r2, r3, #2
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 808f 	beq.w	8004b98 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <HAL_DMA_IRQHandler+0x3f8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d04a      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <HAL_DMA_IRQHandler+0x3fc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d045      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <HAL_DMA_IRQHandler+0x400>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d040      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_DMA_IRQHandler+0x404>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d03b      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_DMA_IRQHandler+0x408>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d036      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <HAL_DMA_IRQHandler+0x40c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d031      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <HAL_DMA_IRQHandler+0x410>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d02c      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <HAL_DMA_IRQHandler+0x414>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d027      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <HAL_DMA_IRQHandler+0x418>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d022      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_DMA_IRQHandler+0x41c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01d      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <HAL_DMA_IRQHandler+0x420>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d018      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_DMA_IRQHandler+0x424>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1a      	ldr	r2, [pc, #104]	; (8004b60 <HAL_DMA_IRQHandler+0x428>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00e      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <HAL_DMA_IRQHandler+0x42c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d009      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <HAL_DMA_IRQHandler+0x430>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x3e2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <HAL_DMA_IRQHandler+0x434>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d12a      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x438>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e023      	b.n	8004b78 <HAL_DMA_IRQHandler+0x440>
 8004b30:	40020010 	.word	0x40020010
 8004b34:	40020028 	.word	0x40020028
 8004b38:	40020040 	.word	0x40020040
 8004b3c:	40020058 	.word	0x40020058
 8004b40:	40020070 	.word	0x40020070
 8004b44:	40020088 	.word	0x40020088
 8004b48:	400200a0 	.word	0x400200a0
 8004b4c:	400200b8 	.word	0x400200b8
 8004b50:	40020410 	.word	0x40020410
 8004b54:	40020428 	.word	0x40020428
 8004b58:	40020440 	.word	0x40020440
 8004b5c:	40020458 	.word	0x40020458
 8004b60:	40020470 	.word	0x40020470
 8004b64:	40020488 	.word	0x40020488
 8004b68:	400204a0 	.word	0x400204a0
 8004b6c:	400204b8 	.word	0x400204b8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2204      	movs	r2, #4
 8004b86:	409a      	lsls	r2, r3
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a6 	beq.w	8004cfa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a85      	ldr	r2, [pc, #532]	; (8004dc8 <HAL_DMA_IRQHandler+0x690>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a83      	ldr	r2, [pc, #524]	; (8004dcc <HAL_DMA_IRQHandler+0x694>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a82      	ldr	r2, [pc, #520]	; (8004dd0 <HAL_DMA_IRQHandler+0x698>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a80      	ldr	r2, [pc, #512]	; (8004dd4 <HAL_DMA_IRQHandler+0x69c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7f      	ldr	r2, [pc, #508]	; (8004dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7d      	ldr	r2, [pc, #500]	; (8004ddc <HAL_DMA_IRQHandler+0x6a4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <HAL_DMA_IRQHandler+0x6a8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_DMA_IRQHandler+0x6ac>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a79      	ldr	r2, [pc, #484]	; (8004de8 <HAL_DMA_IRQHandler+0x6b0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a77      	ldr	r2, [pc, #476]	; (8004dec <HAL_DMA_IRQHandler+0x6b4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a76      	ldr	r2, [pc, #472]	; (8004df0 <HAL_DMA_IRQHandler+0x6b8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a74      	ldr	r2, [pc, #464]	; (8004df4 <HAL_DMA_IRQHandler+0x6bc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a73      	ldr	r2, [pc, #460]	; (8004df8 <HAL_DMA_IRQHandler+0x6c0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a71      	ldr	r2, [pc, #452]	; (8004dfc <HAL_DMA_IRQHandler+0x6c4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a70      	ldr	r2, [pc, #448]	; (8004e00 <HAL_DMA_IRQHandler+0x6c8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x516>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6e      	ldr	r2, [pc, #440]	; (8004e04 <HAL_DMA_IRQHandler+0x6cc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d10a      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x52c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e009      	b.n	8004c78 <HAL_DMA_IRQHandler+0x540>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d03e      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2210      	movs	r2, #16
 8004c86:	409a      	lsls	r2, r3
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d018      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d108      	bne.n	8004cba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d024      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4798      	blx	r3
 8004cb8:	e01f      	b.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01b      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
 8004cca:	e016      	b.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d107      	bne.n	8004cea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0208 	bic.w	r2, r2, #8
 8004ce8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2220      	movs	r2, #32
 8004d04:	409a      	lsls	r2, r3
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8110 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <HAL_DMA_IRQHandler+0x690>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d04a      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2b      	ldr	r2, [pc, #172]	; (8004dcc <HAL_DMA_IRQHandler+0x694>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d045      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <HAL_DMA_IRQHandler+0x698>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d040      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a28      	ldr	r2, [pc, #160]	; (8004dd4 <HAL_DMA_IRQHandler+0x69c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d03b      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a26      	ldr	r2, [pc, #152]	; (8004dd8 <HAL_DMA_IRQHandler+0x6a0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d036      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a25      	ldr	r2, [pc, #148]	; (8004ddc <HAL_DMA_IRQHandler+0x6a4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d031      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a23      	ldr	r2, [pc, #140]	; (8004de0 <HAL_DMA_IRQHandler+0x6a8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02c      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a22      	ldr	r2, [pc, #136]	; (8004de4 <HAL_DMA_IRQHandler+0x6ac>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d027      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a20      	ldr	r2, [pc, #128]	; (8004de8 <HAL_DMA_IRQHandler+0x6b0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <HAL_DMA_IRQHandler+0x6b4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_DMA_IRQHandler+0x6b8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <HAL_DMA_IRQHandler+0x6bc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <HAL_DMA_IRQHandler+0x6c0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_DMA_IRQHandler+0x6c4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_DMA_IRQHandler+0x6c8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x678>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <HAL_DMA_IRQHandler+0x6cc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d12b      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x6d0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e02a      	b.n	8004e1c <HAL_DMA_IRQHandler+0x6e4>
 8004dc6:	bf00      	nop
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bf14      	ite	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	2300      	moveq	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8087 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d139      	bne.n	8004eb2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0216 	bic.w	r2, r2, #22
 8004e4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <HAL_DMA_IRQHandler+0x736>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0208 	bic.w	r2, r2, #8
 8004e7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	223f      	movs	r2, #63	; 0x3f
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 834a 	beq.w	800553c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
          }
          return;
 8004eb0:	e344      	b.n	800553c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02c      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
 8004ede:	e027      	b.n	8004f30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e01e      	b.n	8004f30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0210 	bic.w	r2, r2, #16
 8004f0e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8306 	beq.w	8005546 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8088 	beq.w	8005058 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a7a      	ldr	r2, [pc, #488]	; (8005140 <HAL_DMA_IRQHandler+0xa08>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a79      	ldr	r2, [pc, #484]	; (8005144 <HAL_DMA_IRQHandler+0xa0c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a77      	ldr	r2, [pc, #476]	; (8005148 <HAL_DMA_IRQHandler+0xa10>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a76      	ldr	r2, [pc, #472]	; (800514c <HAL_DMA_IRQHandler+0xa14>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a74      	ldr	r2, [pc, #464]	; (8005150 <HAL_DMA_IRQHandler+0xa18>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	; (8005154 <HAL_DMA_IRQHandler+0xa1c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a71      	ldr	r2, [pc, #452]	; (8005158 <HAL_DMA_IRQHandler+0xa20>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a70      	ldr	r2, [pc, #448]	; (800515c <HAL_DMA_IRQHandler+0xa24>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6e      	ldr	r2, [pc, #440]	; (8005160 <HAL_DMA_IRQHandler+0xa28>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6d      	ldr	r2, [pc, #436]	; (8005164 <HAL_DMA_IRQHandler+0xa2c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a6b      	ldr	r2, [pc, #428]	; (8005168 <HAL_DMA_IRQHandler+0xa30>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6a      	ldr	r2, [pc, #424]	; (800516c <HAL_DMA_IRQHandler+0xa34>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a68      	ldr	r2, [pc, #416]	; (8005170 <HAL_DMA_IRQHandler+0xa38>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a67      	ldr	r2, [pc, #412]	; (8005174 <HAL_DMA_IRQHandler+0xa3c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a65      	ldr	r2, [pc, #404]	; (8005178 <HAL_DMA_IRQHandler+0xa40>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x8b8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a64      	ldr	r2, [pc, #400]	; (800517c <HAL_DMA_IRQHandler+0xa44>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <HAL_DMA_IRQHandler+0x8ca>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e007      	b.n	8005012 <HAL_DMA_IRQHandler+0x8da>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	d307      	bcc.n	800502e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f2      	bne.n	8005012 <HAL_DMA_IRQHandler+0x8da>
 800502c:	e000      	b.n	8005030 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800502e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2203      	movs	r2, #3
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800504e:	e003      	b.n	8005058 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8272 	beq.w	8005546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
 800506a:	e26c      	b.n	8005546 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a43      	ldr	r2, [pc, #268]	; (8005180 <HAL_DMA_IRQHandler+0xa48>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a42      	ldr	r2, [pc, #264]	; (8005184 <HAL_DMA_IRQHandler+0xa4c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a40      	ldr	r2, [pc, #256]	; (8005188 <HAL_DMA_IRQHandler+0xa50>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3f      	ldr	r2, [pc, #252]	; (800518c <HAL_DMA_IRQHandler+0xa54>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3d      	ldr	r2, [pc, #244]	; (8005190 <HAL_DMA_IRQHandler+0xa58>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <HAL_DMA_IRQHandler+0xa5c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a3a      	ldr	r2, [pc, #232]	; (8005198 <HAL_DMA_IRQHandler+0xa60>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_IRQHandler+0x984>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a39      	ldr	r2, [pc, #228]	; (800519c <HAL_DMA_IRQHandler+0xa64>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x988>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_DMA_IRQHandler+0x98a>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 823f 	beq.w	8005546 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	2204      	movs	r2, #4
 80050da:	409a      	lsls	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80cd 	beq.w	8005280 <HAL_DMA_IRQHandler+0xb48>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80c7 	beq.w	8005280 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2204      	movs	r2, #4
 80050fc:	409a      	lsls	r2, r3
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d049      	beq.n	80051a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8210 	beq.w	8005540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005128:	e20a      	b.n	8005540 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8206 	beq.w	8005540 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513c:	e200      	b.n	8005540 <HAL_DMA_IRQHandler+0xe08>
 800513e:	bf00      	nop
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	58025408 	.word	0x58025408
 8005184:	5802541c 	.word	0x5802541c
 8005188:	58025430 	.word	0x58025430
 800518c:	58025444 	.word	0x58025444
 8005190:	58025458 	.word	0x58025458
 8005194:	5802546c 	.word	0x5802546c
 8005198:	58025480 	.word	0x58025480
 800519c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d160      	bne.n	800526c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a8c      	ldr	r2, [pc, #560]	; (80053e0 <HAL_DMA_IRQHandler+0xca8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d04a      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a8a      	ldr	r2, [pc, #552]	; (80053e4 <HAL_DMA_IRQHandler+0xcac>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d045      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a89      	ldr	r2, [pc, #548]	; (80053e8 <HAL_DMA_IRQHandler+0xcb0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d040      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a87      	ldr	r2, [pc, #540]	; (80053ec <HAL_DMA_IRQHandler+0xcb4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d03b      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a86      	ldr	r2, [pc, #536]	; (80053f0 <HAL_DMA_IRQHandler+0xcb8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d036      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a84      	ldr	r2, [pc, #528]	; (80053f4 <HAL_DMA_IRQHandler+0xcbc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d031      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a83      	ldr	r2, [pc, #524]	; (80053f8 <HAL_DMA_IRQHandler+0xcc0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d02c      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a81      	ldr	r2, [pc, #516]	; (80053fc <HAL_DMA_IRQHandler+0xcc4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d027      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a80      	ldr	r2, [pc, #512]	; (8005400 <HAL_DMA_IRQHandler+0xcc8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7e      	ldr	r2, [pc, #504]	; (8005404 <HAL_DMA_IRQHandler+0xccc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01d      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7d      	ldr	r2, [pc, #500]	; (8005408 <HAL_DMA_IRQHandler+0xcd0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7b      	ldr	r2, [pc, #492]	; (800540c <HAL_DMA_IRQHandler+0xcd4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7a      	ldr	r2, [pc, #488]	; (8005410 <HAL_DMA_IRQHandler+0xcd8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a78      	ldr	r2, [pc, #480]	; (8005414 <HAL_DMA_IRQHandler+0xcdc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a77      	ldr	r2, [pc, #476]	; (8005418 <HAL_DMA_IRQHandler+0xce0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_DMA_IRQHandler+0xb12>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a75      	ldr	r2, [pc, #468]	; (800541c <HAL_DMA_IRQHandler+0xce4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d108      	bne.n	800525c <HAL_DMA_IRQHandler+0xb24>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0208 	bic.w	r2, r2, #8
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e007      	b.n	800526c <HAL_DMA_IRQHandler+0xb34>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0204 	bic.w	r2, r2, #4
 800526a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8165 	beq.w	8005540 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800527e:	e15f      	b.n	8005540 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2202      	movs	r2, #2
 800528a:	409a      	lsls	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80c5 	beq.w	8005420 <HAL_DMA_IRQHandler+0xce8>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80bf 	beq.w	8005420 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2202      	movs	r2, #2
 80052ac:	409a      	lsls	r2, r3
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d018      	beq.n	80052ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 813a 	beq.w	8005544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d8:	e134      	b.n	8005544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8130 	beq.w	8005544 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ec:	e12a      	b.n	8005544 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d168      	bne.n	80053ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a38      	ldr	r2, [pc, #224]	; (80053e0 <HAL_DMA_IRQHandler+0xca8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d04a      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a37      	ldr	r2, [pc, #220]	; (80053e4 <HAL_DMA_IRQHandler+0xcac>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d045      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a35      	ldr	r2, [pc, #212]	; (80053e8 <HAL_DMA_IRQHandler+0xcb0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d040      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a34      	ldr	r2, [pc, #208]	; (80053ec <HAL_DMA_IRQHandler+0xcb4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d03b      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a32      	ldr	r2, [pc, #200]	; (80053f0 <HAL_DMA_IRQHandler+0xcb8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d036      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <HAL_DMA_IRQHandler+0xcbc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d031      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <HAL_DMA_IRQHandler+0xcc0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02c      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2e      	ldr	r2, [pc, #184]	; (80053fc <HAL_DMA_IRQHandler+0xcc4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d027      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <HAL_DMA_IRQHandler+0xcc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d022      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <HAL_DMA_IRQHandler+0xccc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d01d      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_DMA_IRQHandler+0xcd0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d018      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a28      	ldr	r2, [pc, #160]	; (800540c <HAL_DMA_IRQHandler+0xcd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d013      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <HAL_DMA_IRQHandler+0xcd8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00e      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a25      	ldr	r2, [pc, #148]	; (8005414 <HAL_DMA_IRQHandler+0xcdc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d009      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a23      	ldr	r2, [pc, #140]	; (8005418 <HAL_DMA_IRQHandler+0xce0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_DMA_IRQHandler+0xc60>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a22      	ldr	r2, [pc, #136]	; (800541c <HAL_DMA_IRQHandler+0xce4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <HAL_DMA_IRQHandler+0xc72>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0214 	bic.w	r2, r2, #20
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e007      	b.n	80053ba <HAL_DMA_IRQHandler+0xc82>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 020a 	bic.w	r2, r2, #10
 80053b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80b8 	beq.w	8005544 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053dc:	e0b2      	b.n	8005544 <HAL_DMA_IRQHandler+0xe0c>
 80053de:	bf00      	nop
 80053e0:	40020010 	.word	0x40020010
 80053e4:	40020028 	.word	0x40020028
 80053e8:	40020040 	.word	0x40020040
 80053ec:	40020058 	.word	0x40020058
 80053f0:	40020070 	.word	0x40020070
 80053f4:	40020088 	.word	0x40020088
 80053f8:	400200a0 	.word	0x400200a0
 80053fc:	400200b8 	.word	0x400200b8
 8005400:	40020410 	.word	0x40020410
 8005404:	40020428 	.word	0x40020428
 8005408:	40020440 	.word	0x40020440
 800540c:	40020458 	.word	0x40020458
 8005410:	40020470 	.word	0x40020470
 8005414:	40020488 	.word	0x40020488
 8005418:	400204a0 	.word	0x400204a0
 800541c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2208      	movs	r2, #8
 800542a:	409a      	lsls	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8088 	beq.w	8005546 <HAL_DMA_IRQHandler+0xe0e>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8082 	beq.w	8005546 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a41      	ldr	r2, [pc, #260]	; (800554c <HAL_DMA_IRQHandler+0xe14>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d04a      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3f      	ldr	r2, [pc, #252]	; (8005550 <HAL_DMA_IRQHandler+0xe18>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d045      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3e      	ldr	r2, [pc, #248]	; (8005554 <HAL_DMA_IRQHandler+0xe1c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d040      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <HAL_DMA_IRQHandler+0xe20>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d03b      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3b      	ldr	r2, [pc, #236]	; (800555c <HAL_DMA_IRQHandler+0xe24>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d036      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a39      	ldr	r2, [pc, #228]	; (8005560 <HAL_DMA_IRQHandler+0xe28>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d031      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a38      	ldr	r2, [pc, #224]	; (8005564 <HAL_DMA_IRQHandler+0xe2c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d02c      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a36      	ldr	r2, [pc, #216]	; (8005568 <HAL_DMA_IRQHandler+0xe30>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d027      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a35      	ldr	r2, [pc, #212]	; (800556c <HAL_DMA_IRQHandler+0xe34>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a33      	ldr	r2, [pc, #204]	; (8005570 <HAL_DMA_IRQHandler+0xe38>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a32      	ldr	r2, [pc, #200]	; (8005574 <HAL_DMA_IRQHandler+0xe3c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_DMA_IRQHandler+0xe40>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2f      	ldr	r2, [pc, #188]	; (800557c <HAL_DMA_IRQHandler+0xe44>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_DMA_IRQHandler+0xe48>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <HAL_DMA_IRQHandler+0xe4c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xdaa>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_IRQHandler+0xe50>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <HAL_DMA_IRQHandler+0xdbc>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 021c 	bic.w	r2, r2, #28
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e007      	b.n	8005504 <HAL_DMA_IRQHandler+0xdcc>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 020e 	bic.w	r2, r2, #14
 8005502:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2201      	movs	r2, #1
 800550e:	409a      	lsls	r2, r3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
 800553a:	e004      	b.n	8005546 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800553c:	bf00      	nop
 800553e:	e002      	b.n	8005546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005540:	bf00      	nop
 8005542:	e000      	b.n	8005546 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005544:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005546:	3728      	adds	r7, #40	; 0x28
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40020010 	.word	0x40020010
 8005550:	40020028 	.word	0x40020028
 8005554:	40020040 	.word	0x40020040
 8005558:	40020058 	.word	0x40020058
 800555c:	40020070 	.word	0x40020070
 8005560:	40020088 	.word	0x40020088
 8005564:	400200a0 	.word	0x400200a0
 8005568:	400200b8 	.word	0x400200b8
 800556c:	40020410 	.word	0x40020410
 8005570:	40020428 	.word	0x40020428
 8005574:	40020440 	.word	0x40020440
 8005578:	40020458 	.word	0x40020458
 800557c:	40020470 	.word	0x40020470
 8005580:	40020488 	.word	0x40020488
 8005584:	400204a0 	.word	0x400204a0
 8005588:	400204b8 	.word	0x400204b8

0800558c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a42      	ldr	r2, [pc, #264]	; (80056a4 <DMA_CalcBaseAndBitshift+0x118>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d04a      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a41      	ldr	r2, [pc, #260]	; (80056a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d045      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3f      	ldr	r2, [pc, #252]	; (80056ac <DMA_CalcBaseAndBitshift+0x120>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d040      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3e      	ldr	r2, [pc, #248]	; (80056b0 <DMA_CalcBaseAndBitshift+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d03b      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3c      	ldr	r2, [pc, #240]	; (80056b4 <DMA_CalcBaseAndBitshift+0x128>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d036      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3b      	ldr	r2, [pc, #236]	; (80056b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d031      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a39      	ldr	r2, [pc, #228]	; (80056bc <DMA_CalcBaseAndBitshift+0x130>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d02c      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <DMA_CalcBaseAndBitshift+0x134>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d027      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a36      	ldr	r2, [pc, #216]	; (80056c4 <DMA_CalcBaseAndBitshift+0x138>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d01d      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a33      	ldr	r2, [pc, #204]	; (80056cc <DMA_CalcBaseAndBitshift+0x140>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a32      	ldr	r2, [pc, #200]	; (80056d0 <DMA_CalcBaseAndBitshift+0x144>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a30      	ldr	r2, [pc, #192]	; (80056d4 <DMA_CalcBaseAndBitshift+0x148>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2f      	ldr	r2, [pc, #188]	; (80056d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <DMA_CalcBaseAndBitshift+0x150>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <DMA_CalcBaseAndBitshift+0xa8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <DMA_CalcBaseAndBitshift+0x154>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <DMA_CalcBaseAndBitshift+0xac>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <DMA_CalcBaseAndBitshift+0xae>
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d024      	beq.n	8005688 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3b10      	subs	r3, #16
 8005646:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <DMA_CalcBaseAndBitshift+0x158>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005658:	5cd3      	ldrb	r3, [r2, r3]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d908      	bls.n	8005678 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <DMA_CalcBaseAndBitshift+0x160>)
 800566e:	4013      	ands	r3, r2
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	659a      	str	r2, [r3, #88]	; 0x58
 8005676:	e00d      	b.n	8005694 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <DMA_CalcBaseAndBitshift+0x160>)
 8005680:	4013      	ands	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6593      	str	r3, [r2, #88]	; 0x58
 8005686:	e005      	b.n	8005694 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40020010 	.word	0x40020010
 80056a8:	40020028 	.word	0x40020028
 80056ac:	40020040 	.word	0x40020040
 80056b0:	40020058 	.word	0x40020058
 80056b4:	40020070 	.word	0x40020070
 80056b8:	40020088 	.word	0x40020088
 80056bc:	400200a0 	.word	0x400200a0
 80056c0:	400200b8 	.word	0x400200b8
 80056c4:	40020410 	.word	0x40020410
 80056c8:	40020428 	.word	0x40020428
 80056cc:	40020440 	.word	0x40020440
 80056d0:	40020458 	.word	0x40020458
 80056d4:	40020470 	.word	0x40020470
 80056d8:	40020488 	.word	0x40020488
 80056dc:	400204a0 	.word	0x400204a0
 80056e0:	400204b8 	.word	0x400204b8
 80056e4:	aaaaaaab 	.word	0xaaaaaaab
 80056e8:	0800b928 	.word	0x0800b928
 80056ec:	fffffc00 	.word	0xfffffc00

080056f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d120      	bne.n	8005746 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	2b03      	cmp	r3, #3
 800570a:	d858      	bhi.n	80057be <DMA_CheckFifoParam+0xce>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <DMA_CheckFifoParam+0x24>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005725 	.word	0x08005725
 8005718:	08005737 	.word	0x08005737
 800571c:	08005725 	.word	0x08005725
 8005720:	080057bf 	.word	0x080057bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d048      	beq.n	80057c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005734:	e045      	b.n	80057c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800573e:	d142      	bne.n	80057c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005744:	e03f      	b.n	80057c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574e:	d123      	bne.n	8005798 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	2b03      	cmp	r3, #3
 8005756:	d838      	bhi.n	80057ca <DMA_CheckFifoParam+0xda>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <DMA_CheckFifoParam+0x70>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005771 	.word	0x08005771
 8005764:	08005777 	.word	0x08005777
 8005768:	08005771 	.word	0x08005771
 800576c:	08005789 	.word	0x08005789
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	73fb      	strb	r3, [r7, #15]
        break;
 8005774:	e030      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d025      	beq.n	80057ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005786:	e022      	b.n	80057ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005790:	d11f      	bne.n	80057d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005796:	e01c      	b.n	80057d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579c:	2b02      	cmp	r3, #2
 800579e:	d902      	bls.n	80057a6 <DMA_CheckFifoParam+0xb6>
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d003      	beq.n	80057ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80057a4:	e018      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
        break;
 80057aa:	e015      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
    break;
 80057bc:	e00b      	b.n	80057d6 <DMA_CheckFifoParam+0xe6>
        break;
 80057be:	bf00      	nop
 80057c0:	e00a      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        break;
 80057c2:	bf00      	nop
 80057c4:	e008      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        break;
 80057c6:	bf00      	nop
 80057c8:	e006      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        break;
 80057ca:	bf00      	nop
 80057cc:	e004      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <DMA_CheckFifoParam+0xe8>
    break;
 80057d6:	bf00      	nop
    }
  }

  return status;
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop

080057e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a38      	ldr	r2, [pc, #224]	; (80058dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d022      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a36      	ldr	r2, [pc, #216]	; (80058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01d      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a35      	ldr	r2, [pc, #212]	; (80058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d018      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a32      	ldr	r2, [pc, #200]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00e      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a30      	ldr	r2, [pc, #192]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d009      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2f      	ldr	r2, [pc, #188]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d004      	beq.n	8005846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01a      	beq.n	8005886 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3b08      	subs	r3, #8
 8005858:	4a28      	ldr	r2, [pc, #160]	; (80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4b26      	ldr	r3, [pc, #152]	; (8005900 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	461a      	mov	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a24      	ldr	r2, [pc, #144]	; (8005904 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005874:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005884:	e024      	b.n	80058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	3b10      	subs	r3, #16
 800588e:	4a1e      	ldr	r2, [pc, #120]	; (8005908 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a1c      	ldr	r2, [pc, #112]	; (800590c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d806      	bhi.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d902      	bls.n	80058ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3308      	adds	r3, #8
 80058ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	461a      	mov	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a16      	ldr	r2, [pc, #88]	; (8005918 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80058c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	58025408 	.word	0x58025408
 80058e0:	5802541c 	.word	0x5802541c
 80058e4:	58025430 	.word	0x58025430
 80058e8:	58025444 	.word	0x58025444
 80058ec:	58025458 	.word	0x58025458
 80058f0:	5802546c 	.word	0x5802546c
 80058f4:	58025480 	.word	0x58025480
 80058f8:	58025494 	.word	0x58025494
 80058fc:	cccccccd 	.word	0xcccccccd
 8005900:	16009600 	.word	0x16009600
 8005904:	58025880 	.word	0x58025880
 8005908:	aaaaaaab 	.word	0xaaaaaaab
 800590c:	400204b8 	.word	0x400204b8
 8005910:	4002040f 	.word	0x4002040f
 8005914:	10008200 	.word	0x10008200
 8005918:	40020880 	.word	0x40020880

0800591c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04a      	beq.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d847      	bhi.n	80059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a22      	ldr	r2, [pc, #136]	; (80059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a21      	ldr	r2, [pc, #132]	; (80059e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	; (80059e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	; (80059e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	; (80059f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80059a4:	671a      	str	r2, [r3, #112]	; 0x70
 80059a6:	e009      	b.n	80059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4b14      	ldr	r3, [pc, #80]	; (80059fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a11      	ldr	r2, [pc, #68]	; (8005a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80059ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3b01      	subs	r3, #1
 80059c0:	2201      	movs	r2, #1
 80059c2:	409a      	lsls	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	58025408 	.word	0x58025408
 80059d8:	5802541c 	.word	0x5802541c
 80059dc:	58025430 	.word	0x58025430
 80059e0:	58025444 	.word	0x58025444
 80059e4:	58025458 	.word	0x58025458
 80059e8:	5802546c 	.word	0x5802546c
 80059ec:	58025480 	.word	0x58025480
 80059f0:	58025494 	.word	0x58025494
 80059f4:	1600963f 	.word	0x1600963f
 80059f8:	58025940 	.word	0x58025940
 80059fc:	1000823f 	.word	0x1000823f
 8005a00:	40020940 	.word	0x40020940

08005a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	; 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a12:	4b86      	ldr	r3, [pc, #536]	; (8005c2c <HAL_GPIO_Init+0x228>)
 8005a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a16:	e18c      	b.n	8005d32 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 817e 	beq.w	8005d2c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d00b      	beq.n	8005a50 <HAL_GPIO_Init+0x4c>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d007      	beq.n	8005a50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a44:	2b11      	cmp	r3, #17
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b12      	cmp	r3, #18
 8005a4e:	d130      	bne.n	8005ab2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a86:	2201      	movs	r2, #1
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	091b      	lsrs	r3, r3, #4
 8005a9c:	f003 0201 	and.w	r2, r3, #1
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	2203      	movs	r2, #3
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d003      	beq.n	8005af2 <HAL_GPIO_Init+0xee>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b12      	cmp	r3, #18
 8005af0:	d123      	bne.n	8005b3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80d8 	beq.w	8005d2c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <HAL_GPIO_Init+0x22c>)
 8005b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b82:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <HAL_GPIO_Init+0x22c>)
 8005b84:	f043 0302 	orr.w	r3, r3, #2
 8005b88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <HAL_GPIO_Init+0x22c>)
 8005b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b9a:	4a26      	ldr	r2, [pc, #152]	; (8005c34 <HAL_GPIO_Init+0x230>)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <HAL_GPIO_Init+0x234>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d04a      	beq.n	8005c5c <HAL_GPIO_Init+0x258>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <HAL_GPIO_Init+0x238>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <HAL_GPIO_Init+0x222>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_GPIO_Init+0x23c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d025      	beq.n	8005c22 <HAL_GPIO_Init+0x21e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_GPIO_Init+0x240>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <HAL_GPIO_Init+0x21a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <HAL_GPIO_Init+0x244>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d019      	beq.n	8005c1a <HAL_GPIO_Init+0x216>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_GPIO_Init+0x248>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <HAL_GPIO_Init+0x212>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <HAL_GPIO_Init+0x24c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00d      	beq.n	8005c12 <HAL_GPIO_Init+0x20e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <HAL_GPIO_Init+0x250>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <HAL_GPIO_Init+0x20a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <HAL_GPIO_Init+0x254>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_GPIO_Init+0x206>
 8005c06:	2309      	movs	r3, #9
 8005c08:	e029      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e027      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c0e:	2307      	movs	r3, #7
 8005c10:	e025      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c12:	2306      	movs	r3, #6
 8005c14:	e023      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c16:	2305      	movs	r3, #5
 8005c18:	e021      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	e01f      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e01d      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e01b      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e019      	b.n	8005c5e <HAL_GPIO_Init+0x25a>
 8005c2a:	bf00      	nop
 8005c2c:	58000080 	.word	0x58000080
 8005c30:	58024400 	.word	0x58024400
 8005c34:	58000400 	.word	0x58000400
 8005c38:	58020000 	.word	0x58020000
 8005c3c:	58020400 	.word	0x58020400
 8005c40:	58020800 	.word	0x58020800
 8005c44:	58020c00 	.word	0x58020c00
 8005c48:	58021000 	.word	0x58021000
 8005c4c:	58021400 	.word	0x58021400
 8005c50:	58021800 	.word	0x58021800
 8005c54:	58021c00 	.word	0x58021c00
 8005c58:	58022400 	.word	0x58022400
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	f002 0203 	and.w	r2, r2, #3
 8005c64:	0092      	lsls	r2, r2, #2
 8005c66:	4093      	lsls	r3, r2
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c6e:	4938      	ldr	r1, [pc, #224]	; (8005d50 <HAL_GPIO_Init+0x34c>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	43db      	mvns	r3, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f ae6b 	bne.w	8005a18 <HAL_GPIO_Init+0x14>
  }
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	58000400 	.word	0x58000400

08005d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
 8005d60:	4613      	mov	r3, r2
 8005d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d64:	787b      	ldrb	r3, [r7, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6a:	887a      	ldrh	r2, [r7, #2]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d70:	e003      	b.n	8005d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d72:	887b      	ldrh	r3, [r7, #2]
 8005d74:	041a      	lsls	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d90:	4b19      	ldr	r3, [pc, #100]	; (8005df8 <HAL_PWREx_ConfigSupply+0x70>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d00a      	beq.n	8005db2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d9c:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <HAL_PWREx_ConfigSupply+0x70>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d001      	beq.n	8005dae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e01f      	b.n	8005dee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e01d      	b.n	8005dee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <HAL_PWREx_ConfigSupply+0x70>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f023 0207 	bic.w	r2, r3, #7
 8005dba:	490f      	ldr	r1, [pc, #60]	; (8005df8 <HAL_PWREx_ConfigSupply+0x70>)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dc2:	f7fb fb1b 	bl	80013fc <HAL_GetTick>
 8005dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dc8:	e009      	b.n	8005dde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dca:	f7fb fb17 	bl	80013fc <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd8:	d901      	bls.n	8005dde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e007      	b.n	8005dee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_PWREx_ConfigSupply+0x70>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dea:	d1ee      	bne.n	8005dca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	58024800 	.word	0x58024800

08005dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08c      	sub	sp, #48	; 0x30
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e37a      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8087 	beq.w	8005f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1c:	4ba0      	ldr	r3, [pc, #640]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e26:	4b9e      	ldr	r3, [pc, #632]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d007      	beq.n	8005e42 <HAL_RCC_OscConfig+0x46>
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b18      	cmp	r3, #24
 8005e36:	d110      	bne.n	8005e5a <HAL_RCC_OscConfig+0x5e>
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d10b      	bne.n	8005e5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e42:	4b97      	ldr	r3, [pc, #604]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d06c      	beq.n	8005f28 <HAL_RCC_OscConfig+0x12c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d168      	bne.n	8005f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e354      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e62:	d106      	bne.n	8005e72 <HAL_RCC_OscConfig+0x76>
 8005e64:	4b8e      	ldr	r3, [pc, #568]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a8d      	ldr	r2, [pc, #564]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e02e      	b.n	8005ed0 <HAL_RCC_OscConfig+0xd4>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10c      	bne.n	8005e94 <HAL_RCC_OscConfig+0x98>
 8005e7a:	4b89      	ldr	r3, [pc, #548]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a88      	ldr	r2, [pc, #544]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4b86      	ldr	r3, [pc, #536]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a85      	ldr	r2, [pc, #532]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	e01d      	b.n	8005ed0 <HAL_RCC_OscConfig+0xd4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0xbc>
 8005e9e:	4b80      	ldr	r3, [pc, #512]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a7f      	ldr	r2, [pc, #508]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	4b7d      	ldr	r3, [pc, #500]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7c      	ldr	r2, [pc, #496]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e00b      	b.n	8005ed0 <HAL_RCC_OscConfig+0xd4>
 8005eb8:	4b79      	ldr	r3, [pc, #484]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a78      	ldr	r2, [pc, #480]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	4b76      	ldr	r3, [pc, #472]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a75      	ldr	r2, [pc, #468]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d013      	beq.n	8005f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fb fa90 	bl	80013fc <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee0:	f7fb fa8c 	bl	80013fc <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	; 0x64
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e308      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ef2:	4b6b      	ldr	r3, [pc, #428]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xe4>
 8005efe:	e014      	b.n	8005f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fb fa7c 	bl	80013fc <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fb fa78 	bl	80013fc <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	; 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e2f4      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005f1a:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x10c>
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d06d      	beq.n	8006012 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f36:	4b5a      	ldr	r3, [pc, #360]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f3e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f40:	4b57      	ldr	r3, [pc, #348]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_RCC_OscConfig+0x160>
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	2b18      	cmp	r3, #24
 8005f50:	d11b      	bne.n	8005f8a <HAL_RCC_OscConfig+0x18e>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_OscConfig+0x178>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e2c7      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b4a      	ldr	r3, [pc, #296]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	061b      	lsls	r3, r3, #24
 8005f82:	4947      	ldr	r1, [pc, #284]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f88:	e043      	b.n	8006012 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d026      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f92:	4b43      	ldr	r3, [pc, #268]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 0219 	bic.w	r2, r3, #25
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	4940      	ldr	r1, [pc, #256]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fb fa2a 	bl	80013fc <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fac:	f7fb fa26 	bl	80013fc <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e2a2      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fbe:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fca:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	061b      	lsls	r3, r3, #24
 8005fd8:	4931      	ldr	r1, [pc, #196]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	604b      	str	r3, [r1, #4]
 8005fde:	e018      	b.n	8006012 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe0:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a2e      	ldr	r2, [pc, #184]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005fe6:	f023 0301 	bic.w	r3, r3, #1
 8005fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fec:	f7fb fa06 	bl	80013fc <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff4:	f7fb fa02 	bl	80013fc <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e27e      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	d06c      	beq.n	80060f8 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800601e:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006026:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006028:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d007      	beq.n	8006044 <HAL_RCC_OscConfig+0x248>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b18      	cmp	r3, #24
 8006038:	d11b      	bne.n	8006072 <HAL_RCC_OscConfig+0x276>
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d116      	bne.n	8006072 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006044:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCC_OscConfig+0x260>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d001      	beq.n	800605c <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e253      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	061b      	lsls	r3, r3, #24
 800606a:	490d      	ldr	r1, [pc, #52]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006070:	e042      	b.n	80060f8 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d025      	beq.n	80060c6 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006086:	f7fb f9b9 	bl	80013fc <HAL_GetTick>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800608c:	e00a      	b.n	80060a4 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800608e:	f7fb f9b5 	bl	80013fc <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d903      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e231      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
 80060a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a4:	4ba3      	ldr	r3, [pc, #652]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ee      	beq.n	800608e <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b0:	4ba0      	ldr	r3, [pc, #640]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	499d      	ldr	r1, [pc, #628]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60cb      	str	r3, [r1, #12]
 80060c4:	e018      	b.n	80060f8 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060c6:	4b9b      	ldr	r3, [pc, #620]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a9a      	ldr	r2, [pc, #616]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb f993 	bl	80013fc <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060da:	f7fb f98f 	bl	80013fc <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e20b      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060ec:	4b91      	ldr	r3, [pc, #580]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b00      	cmp	r3, #0
 8006102:	d036      	beq.n	8006172 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610c:	4b89      	ldr	r3, [pc, #548]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800610e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006110:	4a88      	ldr	r2, [pc, #544]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fb f970 	bl	80013fc <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006120:	f7fb f96c 	bl	80013fc <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e1e8      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006132:	4b80      	ldr	r3, [pc, #512]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0x324>
 800613e:	e018      	b.n	8006172 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006140:	4b7c      	ldr	r3, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006144:	4a7b      	ldr	r2, [pc, #492]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fb f956 	bl	80013fc <HAL_GetTick>
 8006150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006154:	f7fb f952 	bl	80013fc <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e1ce      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006166:	4b73      	ldr	r3, [pc, #460]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d036      	beq.n	80061ec <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d019      	beq.n	80061ba <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006186:	4b6b      	ldr	r3, [pc, #428]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800618c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006190:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006192:	f7fb f933 	bl	80013fc <HAL_GetTick>
 8006196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800619a:	f7fb f92f 	bl	80013fc <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e1ab      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061ac:	4b61      	ldr	r3, [pc, #388]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x39e>
 80061b8:	e018      	b.n	80061ec <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061ba:	4b5e      	ldr	r3, [pc, #376]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a5d      	ldr	r2, [pc, #372]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80061c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061c6:	f7fb f919 	bl	80013fc <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061ce:	f7fb f915 	bl	80013fc <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e191      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061e0:	4b54      	ldr	r3, [pc, #336]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1f0      	bne.n	80061ce <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8081 	beq.w	80062fc <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061fa:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <HAL_RCC_OscConfig+0x53c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4e      	ldr	r2, [pc, #312]	; (8006338 <HAL_RCC_OscConfig+0x53c>)
 8006200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006206:	f7fb f8f9 	bl	80013fc <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800620e:	f7fb f8f5 	bl	80013fc <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b64      	cmp	r3, #100	; 0x64
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e171      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006220:	4b45      	ldr	r3, [pc, #276]	; (8006338 <HAL_RCC_OscConfig+0x53c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d106      	bne.n	8006242 <HAL_RCC_OscConfig+0x446>
 8006234:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	4a3e      	ldr	r2, [pc, #248]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6713      	str	r3, [r2, #112]	; 0x70
 8006240:	e02d      	b.n	800629e <HAL_RCC_OscConfig+0x4a2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0x468>
 800624a:	4b3a      	ldr	r3, [pc, #232]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4a39      	ldr	r2, [pc, #228]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
 8006256:	4b37      	ldr	r3, [pc, #220]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625a:	4a36      	ldr	r2, [pc, #216]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800625c:	f023 0304 	bic.w	r3, r3, #4
 8006260:	6713      	str	r3, [r2, #112]	; 0x70
 8006262:	e01c      	b.n	800629e <HAL_RCC_OscConfig+0x4a2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b05      	cmp	r3, #5
 800626a:	d10c      	bne.n	8006286 <HAL_RCC_OscConfig+0x48a>
 800626c:	4b31      	ldr	r3, [pc, #196]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a30      	ldr	r2, [pc, #192]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006272:	f043 0304 	orr.w	r3, r3, #4
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
 8006278:	4b2e      	ldr	r3, [pc, #184]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627c:	4a2d      	ldr	r2, [pc, #180]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6713      	str	r3, [r2, #112]	; 0x70
 8006284:	e00b      	b.n	800629e <HAL_RCC_OscConfig+0x4a2>
 8006286:	4b2b      	ldr	r3, [pc, #172]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	4a2a      	ldr	r2, [pc, #168]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	6713      	str	r3, [r2, #112]	; 0x70
 8006292:	4b28      	ldr	r3, [pc, #160]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a27      	ldr	r2, [pc, #156]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006298:	f023 0304 	bic.w	r3, r3, #4
 800629c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d015      	beq.n	80062d2 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a6:	f7fb f8a9 	bl	80013fc <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ac:	e00a      	b.n	80062c4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ae:	f7fb f8a5 	bl	80013fc <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e11f      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c4:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0ee      	beq.n	80062ae <HAL_RCC_OscConfig+0x4b2>
 80062d0:	e014      	b.n	80062fc <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d2:	f7fb f893 	bl	80013fc <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062d8:	e00a      	b.n	80062f0 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fb f88f 	bl	80013fc <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e109      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1ee      	bne.n	80062da <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80fe 	beq.w	8006502 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630e:	2b18      	cmp	r3, #24
 8006310:	f000 80b9 	beq.w	8006486 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b02      	cmp	r3, #2
 800631a:	f040 809a 	bne.w	8006452 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a04      	ldr	r2, [pc, #16]	; (8006334 <HAL_RCC_OscConfig+0x538>)
 8006324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fb f867 	bl	80013fc <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006330:	e00d      	b.n	800634e <HAL_RCC_OscConfig+0x552>
 8006332:	bf00      	nop
 8006334:	58024400 	.word	0x58024400
 8006338:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633c:	f7fb f85e 	bl	80013fc <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e0da      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800634e:	4b6f      	ldr	r3, [pc, #444]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800635a:	4b6c      	ldr	r3, [pc, #432]	; (800650c <HAL_RCC_OscConfig+0x710>)
 800635c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635e:	4b6c      	ldr	r3, [pc, #432]	; (8006510 <HAL_RCC_OscConfig+0x714>)
 8006360:	4013      	ands	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800636a:	0112      	lsls	r2, r2, #4
 800636c:	430a      	orrs	r2, r1
 800636e:	4967      	ldr	r1, [pc, #412]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006370:	4313      	orrs	r3, r2
 8006372:	628b      	str	r3, [r1, #40]	; 0x28
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006378:	3b01      	subs	r3, #1
 800637a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	3b01      	subs	r3, #1
 8006384:	025b      	lsls	r3, r3, #9
 8006386:	b29b      	uxth	r3, r3
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	3b01      	subs	r3, #1
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	3b01      	subs	r3, #1
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063a4:	4959      	ldr	r1, [pc, #356]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063aa:	4b58      	ldr	r3, [pc, #352]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a57      	ldr	r2, [pc, #348]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063b6:	4b55      	ldr	r3, [pc, #340]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ba:	4b56      	ldr	r3, [pc, #344]	; (8006514 <HAL_RCC_OscConfig+0x718>)
 80063bc:	4013      	ands	r3, r2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063c2:	00d2      	lsls	r2, r2, #3
 80063c4:	4951      	ldr	r1, [pc, #324]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063ca:	4b50      	ldr	r3, [pc, #320]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	f023 020c 	bic.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	494d      	ldr	r1, [pc, #308]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063dc:	4b4b      	ldr	r3, [pc, #300]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f023 0202 	bic.w	r2, r3, #2
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	4948      	ldr	r1, [pc, #288]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063ee:	4b47      	ldr	r3, [pc, #284]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	4a46      	ldr	r2, [pc, #280]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fa:	4b44      	ldr	r3, [pc, #272]	; (800650c <HAL_RCC_OscConfig+0x710>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a43      	ldr	r2, [pc, #268]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4a40      	ldr	r2, [pc, #256]	; (800650c <HAL_RCC_OscConfig+0x710>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006412:	4b3e      	ldr	r3, [pc, #248]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a3d      	ldr	r2, [pc, #244]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3a      	ldr	r2, [pc, #232]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fa ffe7 	bl	80013fc <HAL_GetTick>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fa ffe3 	bl	80013fc <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e05f      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006444:	4b31      	ldr	r3, [pc, #196]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x636>
 8006450:	e057      	b.n	8006502 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b2e      	ldr	r3, [pc, #184]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2d      	ldr	r2, [pc, #180]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fa ffcd 	bl	80013fc <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006466:	f7fa ffc9 	bl	80013fc <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e045      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <HAL_RCC_OscConfig+0x710>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x66a>
 8006484:	e03d      	b.n	8006502 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006486:	4b21      	ldr	r3, [pc, #132]	; (800650c <HAL_RCC_OscConfig+0x710>)
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800648c:	4b1f      	ldr	r3, [pc, #124]	; (800650c <HAL_RCC_OscConfig+0x710>)
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	2b01      	cmp	r3, #1
 8006498:	d031      	beq.n	80064fe <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0203 	and.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d12a      	bne.n	80064fe <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	091b      	lsrs	r3, r3, #4
 80064ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d122      	bne.n	80064fe <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d11a      	bne.n	80064fe <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	0a5b      	lsrs	r3, r3, #9
 80064cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d111      	bne.n	80064fe <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d108      	bne.n	80064fe <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	0e1b      	lsrs	r3, r3, #24
 80064f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d001      	beq.n	8006502 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3730      	adds	r7, #48	; 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	58024400 	.word	0x58024400
 8006510:	fffffc0c 	.word	0xfffffc0c
 8006514:	ffff0007 	.word	0xffff0007

08006518 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e19c      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800652c:	4b8a      	ldr	r3, [pc, #552]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d910      	bls.n	800655c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653a:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 020f 	bic.w	r2, r3, #15
 8006542:	4985      	ldr	r1, [pc, #532]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800654a:	4b83      	ldr	r3, [pc, #524]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d001      	beq.n	800655c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e184      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	4b7b      	ldr	r3, [pc, #492]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006574:	429a      	cmp	r2, r3
 8006576:	d908      	bls.n	800658a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006578:	4b78      	ldr	r3, [pc, #480]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	4975      	ldr	r1, [pc, #468]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006586:	4313      	orrs	r3, r2
 8006588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	4b70      	ldr	r3, [pc, #448]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d908      	bls.n	80065b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065a6:	4b6d      	ldr	r3, [pc, #436]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	496a      	ldr	r1, [pc, #424]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	4b64      	ldr	r3, [pc, #400]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d908      	bls.n	80065e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d4:	4b61      	ldr	r3, [pc, #388]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	495e      	ldr	r1, [pc, #376]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d010      	beq.n	8006614 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	4b59      	ldr	r3, [pc, #356]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065fe:	429a      	cmp	r2, r3
 8006600:	d908      	bls.n	8006614 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006602:	4b56      	ldr	r3, [pc, #344]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4953      	ldr	r1, [pc, #332]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006610:	4313      	orrs	r3, r2
 8006612:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d010      	beq.n	8006642 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	4b4d      	ldr	r3, [pc, #308]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	429a      	cmp	r2, r3
 800662e:	d908      	bls.n	8006642 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f023 020f 	bic.w	r2, r3, #15
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	4947      	ldr	r1, [pc, #284]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800663e:	4313      	orrs	r3, r2
 8006640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d055      	beq.n	80066fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800664e:	4b43      	ldr	r3, [pc, #268]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	4940      	ldr	r1, [pc, #256]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800665c:	4313      	orrs	r3, r2
 800665e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d107      	bne.n	8006678 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006668:	4b3c      	ldr	r3, [pc, #240]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d121      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0f6      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b03      	cmp	r3, #3
 800667e:	d107      	bne.n	8006690 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006680:	4b36      	ldr	r3, [pc, #216]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d115      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0ea      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d107      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0de      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066a8:	4b2c      	ldr	r3, [pc, #176]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0d6      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b8:	4b28      	ldr	r3, [pc, #160]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	f023 0207 	bic.w	r2, r3, #7
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4925      	ldr	r1, [pc, #148]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7fa fe97 	bl	80013fc <HAL_GetTick>
 80066ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d2:	f7fa fe93 	bl	80013fc <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0be      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e8:	4b1c      	ldr	r3, [pc, #112]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d1eb      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	429a      	cmp	r2, r3
 8006714:	d208      	bcs.n	8006728 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	490e      	ldr	r1, [pc, #56]	; (800675c <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d214      	bcs.n	8006760 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b08      	ldr	r3, [pc, #32]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 020f 	bic.w	r2, r3, #15
 800673e:	4906      	ldr	r1, [pc, #24]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	4b04      	ldr	r3, [pc, #16]	; (8006758 <HAL_RCC_ClockConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e086      	b.n	8006866 <HAL_RCC_ClockConfig+0x34e>
 8006758:	52002000 	.word	0x52002000
 800675c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	4b3f      	ldr	r3, [pc, #252]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006778:	429a      	cmp	r2, r3
 800677a:	d208      	bcs.n	800678e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800677c:	4b3c      	ldr	r3, [pc, #240]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	4939      	ldr	r1, [pc, #228]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 800678a:	4313      	orrs	r3, r2
 800678c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d208      	bcs.n	80067bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	492e      	ldr	r1, [pc, #184]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699a      	ldr	r2, [r3, #24]
 80067cc:	4b28      	ldr	r3, [pc, #160]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d208      	bcs.n	80067ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	4922      	ldr	r1, [pc, #136]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006802:	429a      	cmp	r2, r3
 8006804:	d208      	bcs.n	8006818 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	4917      	ldr	r1, [pc, #92]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006814:	4313      	orrs	r3, r2
 8006816:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006818:	f000 f834 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 800681c:	4602      	mov	r2, r0
 800681e:	4b14      	ldr	r3, [pc, #80]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	4912      	ldr	r1, [pc, #72]	; (8006874 <HAL_RCC_ClockConfig+0x35c>)
 800682a:	5ccb      	ldrb	r3, [r1, r3]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <HAL_RCC_ClockConfig+0x358>)
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <HAL_RCC_ClockConfig+0x35c>)
 8006840:	5cd3      	ldrb	r3, [r2, r3]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_RCC_ClockConfig+0x360>)
 800684e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006850:	4a0a      	ldr	r2, [pc, #40]	; (800687c <HAL_RCC_ClockConfig+0x364>)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <HAL_RCC_ClockConfig+0x368>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fa fd84 	bl	8001368 <HAL_InitTick>
 8006860:	4603      	mov	r3, r0
 8006862:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	58024400 	.word	0x58024400
 8006874:	0800b918 	.word	0x0800b918
 8006878:	24000014 	.word	0x24000014
 800687c:	24000010 	.word	0x24000010
 8006880:	24000018 	.word	0x24000018

08006884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006884:	b480      	push	{r7}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800688a:	4bb3      	ldr	r3, [pc, #716]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006892:	2b18      	cmp	r3, #24
 8006894:	f200 8155 	bhi.w	8006b42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	08006905 	.word	0x08006905
 80068a4:	08006b43 	.word	0x08006b43
 80068a8:	08006b43 	.word	0x08006b43
 80068ac:	08006b43 	.word	0x08006b43
 80068b0:	08006b43 	.word	0x08006b43
 80068b4:	08006b43 	.word	0x08006b43
 80068b8:	08006b43 	.word	0x08006b43
 80068bc:	08006b43 	.word	0x08006b43
 80068c0:	0800692b 	.word	0x0800692b
 80068c4:	08006b43 	.word	0x08006b43
 80068c8:	08006b43 	.word	0x08006b43
 80068cc:	08006b43 	.word	0x08006b43
 80068d0:	08006b43 	.word	0x08006b43
 80068d4:	08006b43 	.word	0x08006b43
 80068d8:	08006b43 	.word	0x08006b43
 80068dc:	08006b43 	.word	0x08006b43
 80068e0:	08006931 	.word	0x08006931
 80068e4:	08006b43 	.word	0x08006b43
 80068e8:	08006b43 	.word	0x08006b43
 80068ec:	08006b43 	.word	0x08006b43
 80068f0:	08006b43 	.word	0x08006b43
 80068f4:	08006b43 	.word	0x08006b43
 80068f8:	08006b43 	.word	0x08006b43
 80068fc:	08006b43 	.word	0x08006b43
 8006900:	08006937 	.word	0x08006937
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006904:	4b94      	ldr	r3, [pc, #592]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006910:	4b91      	ldr	r3, [pc, #580]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a90      	ldr	r2, [pc, #576]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006922:	e111      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006924:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006926:	61bb      	str	r3, [r7, #24]
    break;
 8006928:	e10e      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800692a:	4b8d      	ldr	r3, [pc, #564]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800692c:	61bb      	str	r3, [r7, #24]
    break;
 800692e:	e10b      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006930:	4b8c      	ldr	r3, [pc, #560]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006932:	61bb      	str	r3, [r7, #24]
    break;
 8006934:	e108      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006936:	4b88      	ldr	r3, [pc, #544]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006940:	4b85      	ldr	r3, [pc, #532]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800694a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800694c:	4b82      	ldr	r3, [pc, #520]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006956:	4b80      	ldr	r3, [pc, #512]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	08db      	lsrs	r3, r3, #3
 800695c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80e1 	beq.w	8006b3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b02      	cmp	r3, #2
 800697e:	f000 8083 	beq.w	8006a88 <HAL_RCC_GetSysClockFreq+0x204>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b02      	cmp	r3, #2
 8006986:	f200 80a1 	bhi.w	8006acc <HAL_RCC_GetSysClockFreq+0x248>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x114>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d056      	beq.n	8006a44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006996:	e099      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006998:	4b6f      	ldr	r3, [pc, #444]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02d      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069a4:	4b6c      	ldr	r3, [pc, #432]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	08db      	lsrs	r3, r3, #3
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	4a6b      	ldr	r2, [pc, #428]	; (8006b5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	ee07 3a90 	vmov	s15, r3
 80069c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ce:	4b62      	ldr	r3, [pc, #392]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069de:	ed97 6a02 	vldr	s12, [r7, #8]
 80069e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069fe:	e087      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	4b51      	ldr	r3, [pc, #324]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a26:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a42:	e065      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b40      	ldr	r3, [pc, #256]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a86:	e043      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b2f      	ldr	r3, [pc, #188]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aca:	e021      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b14:	0a5b      	lsrs	r3, r3, #9
 8006b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b34:	ee17 3a90 	vmov	r3, s15
 8006b38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b3a:	e005      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
    break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b44:	61bb      	str	r3, [r7, #24]
    break;
 8006b46:	bf00      	nop
  }

  return sysclockfreq;
 8006b48:	69bb      	ldr	r3, [r7, #24]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3724      	adds	r7, #36	; 0x24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	58024400 	.word	0x58024400
 8006b5c:	03d09000 	.word	0x03d09000
 8006b60:	003d0900 	.word	0x003d0900
 8006b64:	007a1200 	.word	0x007a1200
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	4c742400 	.word	0x4c742400
 8006b70:	4a742400 	.word	0x4a742400
 8006b74:	4af42400 	.word	0x4af42400

08006b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b7e:	f7ff fe81 	bl	8006884 <HAL_RCC_GetSysClockFreq>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	490f      	ldr	r1, [pc, #60]	; (8006bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006b90:	5ccb      	ldrb	r3, [r1, r3]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <HAL_RCC_GetHCLKFreq+0x54>)
 8006ba6:	5cd3      	ldrb	r3, [r2, r3]
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb2:	4a07      	ldr	r2, [pc, #28]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bb6:	4a07      	ldr	r2, [pc, #28]	; (8006bd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bbc:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	58024400 	.word	0x58024400
 8006bcc:	0800b918 	.word	0x0800b918
 8006bd0:	24000014 	.word	0x24000014
 8006bd4:	24000010 	.word	0x24000010

08006bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bdc:	f7ff ffcc 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	091b      	lsrs	r3, r3, #4
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4904      	ldr	r1, [pc, #16]	; (8006c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bee:	5ccb      	ldrb	r3, [r1, r3]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	0800b918 	.word	0x0800b918

08006c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c08:	f7ff ffb6 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	4904      	ldr	r1, [pc, #16]	; (8006c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c1a:	5ccb      	ldrb	r3, [r1, r3]
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	0800b918 	.word	0x0800b918

08006c30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03f      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c54:	d02a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c5a:	d824      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c60:	d018      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c66:	d81e      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c70:	d007      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c72:	e018      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c74:	4bab      	ldr	r3, [pc, #684]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	4aaa      	ldr	r2, [pc, #680]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c80:	e015      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	2102      	movs	r1, #2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 feff 	bl	8008a8c <RCCEx_PLL2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c92:	e00c      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 ffa8 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8006caa:	e000      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cb4:	4b9b      	ldr	r3, [pc, #620]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc0:	4998      	ldr	r1, [pc, #608]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	650b      	str	r3, [r1, #80]	; 0x50
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03d      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d826      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006cfd 	.word	0x08006cfd
 8006cec:	08006d0b 	.word	0x08006d0b
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d35 	.word	0x08006d35
 8006cf8:	08006d35 	.word	0x08006d35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b89      	ldr	r3, [pc, #548]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a88      	ldr	r2, [pc, #544]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d08:	e015      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 febb 	bl	8008a8c <RCCEx_PLL2_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d1a:	e00c      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3324      	adds	r3, #36	; 0x24
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 ff64 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d2c:	e003      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	e000      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d3c:	4b79      	ldr	r3, [pc, #484]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	f023 0207 	bic.w	r2, r3, #7
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	4976      	ldr	r1, [pc, #472]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	650b      	str	r3, [r1, #80]	; 0x50
 8006d4e:	e001      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d051      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d66:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006d6a:	d036      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d6c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006d70:	d830      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d76:	d032      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d7c:	d82a      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006d7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d82:	d02e      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006d84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d88:	d824      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d8e:	d018      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d94:	d81e      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d9e:	d007      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006da0:	e018      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da2:	4b60      	ldr	r3, [pc, #384]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	4a5f      	ldr	r2, [pc, #380]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dae:	e019      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 fe68 	bl	8008a8c <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006dc0:	e010      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 ff11 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dd2:	e007      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006dea:	4b4e      	ldr	r3, [pc, #312]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006df8:	494a      	ldr	r1, [pc, #296]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8006dfe:	e001      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d051      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e16:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e1a:	d036      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006e1c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e20:	d830      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e26:	d032      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e2c:	d82a      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e32:	d02e      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006e34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e38:	d824      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e3e:	d018      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e44:	d81e      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e4e:	d007      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e50:	e018      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e52:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	4a33      	ldr	r2, [pc, #204]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e5e:	e019      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fe10 	bl	8008a8c <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e70:	e010      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	2100      	movs	r1, #0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 feb9 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e82:	e007      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	e004      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006e8a:	bf00      	nop
 8006e8c:	e002      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006e8e:	bf00      	nop
 8006e90:	e000      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006e9a:	4b22      	ldr	r3, [pc, #136]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ea8:	491e      	ldr	r1, [pc, #120]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	658b      	str	r3, [r1, #88]	; 0x58
 8006eae:	e001      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d035      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec4:	2b30      	cmp	r3, #48	; 0x30
 8006ec6:	d01c      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ec8:	2b30      	cmp	r3, #48	; 0x30
 8006eca:	d817      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d00c      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d813      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d016      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d10f      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006ee8:	e00e      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	2102      	movs	r1, #2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 fdcb 	bl	8008a8c <RCCEx_PLL2_Config>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006efa:	e005      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
      break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8006f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	4902      	ldr	r1, [pc, #8]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f20:	e004      	b.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d047      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f40:	d030      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f46:	d82a      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f4c:	d02c      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006f4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f52:	d824      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f58:	d018      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5e:	d81e      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f68:	d007      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f6a:	e018      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4bac      	ldr	r3, [pc, #688]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4aab      	ldr	r2, [pc, #684]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f78:	e017      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f001 fd83 	bl	8008a8c <RCCEx_PLL2_Config>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f8a:	e00e      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f001 fe2c 	bl	8008bf0 <RCCEx_PLL3_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f9c:	e005      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa2:	e002      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fb0:	4b9b      	ldr	r3, [pc, #620]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbc:	4998      	ldr	r1, [pc, #608]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	650b      	str	r3, [r1, #80]	; 0x50
 8006fc2:	e001      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d049      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fdc:	d02e      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fe2:	d828      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fe8:	d02a      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006fea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fee:	d822      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ff4:	d026      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8006ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ffa:	d81c      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007000:	d010      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007006:	d816      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01d      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800700c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007010:	d111      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	2101      	movs	r1, #1
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fd37 	bl	8008a8c <RCCEx_PLL2_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007022:	e012      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	2101      	movs	r1, #1
 800702a:	4618      	mov	r0, r3
 800702c:	f001 fde0 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007034:	e009      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
      break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800703c:	bf00      	nop
 800703e:	e004      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007040:	bf00      	nop
 8007042:	e002      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007044:	bf00      	nop
 8007046:	e000      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007050:	4b73      	ldr	r3, [pc, #460]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007054:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705c:	4970      	ldr	r1, [pc, #448]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800705e:	4313      	orrs	r3, r2
 8007060:	650b      	str	r3, [r1, #80]	; 0x50
 8007062:	e001      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d04b      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800707a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800707e:	d02e      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007084:	d828      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d02a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800708c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007090:	d822      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007096:	d026      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800709c:	d81c      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800709e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a2:	d010      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a8:	d816      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01d      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80070ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070b2:	d111      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	2101      	movs	r1, #1
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 fce6 	bl	8008a8c <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070c4:	e012      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3324      	adds	r3, #36	; 0x24
 80070ca:	2101      	movs	r1, #1
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 fd8f 	bl	8008bf0 <RCCEx_PLL3_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
      break;
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80070ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070f2:	4b4b      	ldr	r3, [pc, #300]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007100:	4947      	ldr	r1, [pc, #284]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	658b      	str	r3, [r1, #88]	; 0x58
 8007106:	e001      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02f      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007120:	d00e      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007126:	d814      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d015      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800712c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007130:	d10f      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	4a3a      	ldr	r2, [pc, #232]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800713e:	e00c      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	2101      	movs	r1, #1
 8007146:	4618      	mov	r0, r3
 8007148:	f001 fca0 	bl	8008a8c <RCCEx_PLL2_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007150:	e003      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
      break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007160:	4b2f      	ldr	r3, [pc, #188]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007164:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716c:	492c      	ldr	r1, [pc, #176]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800716e:	4313      	orrs	r3, r2
 8007170:	650b      	str	r3, [r1, #80]	; 0x50
 8007172:	e001      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d032      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	2b03      	cmp	r3, #3
 800718a:	d81b      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071cb 	.word	0x080071cb
 8007198:	080071a5 	.word	0x080071a5
 800719c:	080071b3 	.word	0x080071b3
 80071a0:	080071cb 	.word	0x080071cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a4:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071b0:	e00c      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	2102      	movs	r1, #2
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 fc67 	bl	8008a8c <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	75fb      	strb	r3, [r7, #23]
      break;
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80071ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071d2:	4b13      	ldr	r3, [pc, #76]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d6:	f023 0203 	bic.w	r2, r3, #3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	4910      	ldr	r1, [pc, #64]	; (8007220 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071e4:	e001      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 808a 	beq.w	800730c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a09      	ldr	r2, [pc, #36]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80071fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007204:	f7fa f8fa 	bl	80013fc <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800720a:	e00d      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720c:	f7fa f8f6 	bl	80013fc <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b64      	cmp	r3, #100	; 0x64
 8007218:	d906      	bls.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	75fb      	strb	r3, [r7, #23]
        break;
 800721e:	e009      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007220:	58024400 	.word	0x58024400
 8007224:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007228:	4bb9      	ldr	r3, [pc, #740]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0eb      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d166      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800723a:	4bb6      	ldr	r3, [pc, #728]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800723c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007244:	4053      	eors	r3, r2
 8007246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724a:	2b00      	cmp	r3, #0
 800724c:	d013      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800724e:	4bb1      	ldr	r3, [pc, #708]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007258:	4bae      	ldr	r3, [pc, #696]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	4aad      	ldr	r2, [pc, #692]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800725e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007262:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007264:	4bab      	ldr	r3, [pc, #684]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4aaa      	ldr	r2, [pc, #680]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800726a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007270:	4aa8      	ldr	r2, [pc, #672]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800727c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007280:	d115      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007282:	f7fa f8bb 	bl	80013fc <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007288:	e00b      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fa f8b7 	bl	80013fc <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d902      	bls.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	75fb      	strb	r3, [r7, #23]
            break;
 80072a0:	e005      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a2:	4b9c      	ldr	r3, [pc, #624]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ed      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d126      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c2:	d10d      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80072c4:	4b93      	ldr	r3, [pc, #588]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072d2:	0919      	lsrs	r1, r3, #4
 80072d4:	4b90      	ldr	r3, [pc, #576]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80072d6:	400b      	ands	r3, r1
 80072d8:	498e      	ldr	r1, [pc, #568]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]
 80072de:	e005      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80072e0:	4b8c      	ldr	r3, [pc, #560]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4a8b      	ldr	r2, [pc, #556]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072ea:	6113      	str	r3, [r2, #16]
 80072ec:	4b89      	ldr	r3, [pc, #548]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072fa:	4986      	ldr	r1, [pc, #536]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	670b      	str	r3, [r1, #112]	; 0x70
 8007300:	e004      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	75bb      	strb	r3, [r7, #22]
 8007306:	e001      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d07e      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731c:	2b28      	cmp	r3, #40	; 0x28
 800731e:	d867      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	080073f7 	.word	0x080073f7
 800732c:	080073f1 	.word	0x080073f1
 8007330:	080073f1 	.word	0x080073f1
 8007334:	080073f1 	.word	0x080073f1
 8007338:	080073f1 	.word	0x080073f1
 800733c:	080073f1 	.word	0x080073f1
 8007340:	080073f1 	.word	0x080073f1
 8007344:	080073f1 	.word	0x080073f1
 8007348:	080073cd 	.word	0x080073cd
 800734c:	080073f1 	.word	0x080073f1
 8007350:	080073f1 	.word	0x080073f1
 8007354:	080073f1 	.word	0x080073f1
 8007358:	080073f1 	.word	0x080073f1
 800735c:	080073f1 	.word	0x080073f1
 8007360:	080073f1 	.word	0x080073f1
 8007364:	080073f1 	.word	0x080073f1
 8007368:	080073df 	.word	0x080073df
 800736c:	080073f1 	.word	0x080073f1
 8007370:	080073f1 	.word	0x080073f1
 8007374:	080073f1 	.word	0x080073f1
 8007378:	080073f1 	.word	0x080073f1
 800737c:	080073f1 	.word	0x080073f1
 8007380:	080073f1 	.word	0x080073f1
 8007384:	080073f1 	.word	0x080073f1
 8007388:	080073f7 	.word	0x080073f7
 800738c:	080073f1 	.word	0x080073f1
 8007390:	080073f1 	.word	0x080073f1
 8007394:	080073f1 	.word	0x080073f1
 8007398:	080073f1 	.word	0x080073f1
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	080073f1 	.word	0x080073f1
 80073a4:	080073f1 	.word	0x080073f1
 80073a8:	080073f7 	.word	0x080073f7
 80073ac:	080073f1 	.word	0x080073f1
 80073b0:	080073f1 	.word	0x080073f1
 80073b4:	080073f1 	.word	0x080073f1
 80073b8:	080073f1 	.word	0x080073f1
 80073bc:	080073f1 	.word	0x080073f1
 80073c0:	080073f1 	.word	0x080073f1
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	080073f7 	.word	0x080073f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3304      	adds	r3, #4
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fb5a 	bl	8008a8c <RCCEx_PLL2_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073dc:	e00c      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3324      	adds	r3, #36	; 0x24
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fc03 	bl	8008bf0 <RCCEx_PLL3_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073ee:	e003      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	75fb      	strb	r3, [r7, #23]
      break;
 80073f4:	e000      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80073f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073fe:	4b45      	ldr	r3, [pc, #276]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	4942      	ldr	r1, [pc, #264]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800740c:	4313      	orrs	r3, r2
 800740e:	654b      	str	r3, [r1, #84]	; 0x54
 8007410:	e001      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d037      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007426:	2b05      	cmp	r3, #5
 8007428:	d820      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800742a:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	08007473 	.word	0x08007473
 8007434:	08007449 	.word	0x08007449
 8007438:	0800745b 	.word	0x0800745b
 800743c:	08007473 	.word	0x08007473
 8007440:	08007473 	.word	0x08007473
 8007444:	08007473 	.word	0x08007473
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fb1c 	bl	8008a8c <RCCEx_PLL2_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007458:	e00c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3324      	adds	r3, #36	; 0x24
 800745e:	2101      	movs	r1, #1
 8007460:	4618      	mov	r0, r3
 8007462:	f001 fbc5 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
      break;
 8007470:	e000      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800747a:	4b26      	ldr	r3, [pc, #152]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f023 0207 	bic.w	r2, r3, #7
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	4923      	ldr	r1, [pc, #140]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007488:	4313      	orrs	r3, r2
 800748a:	654b      	str	r3, [r1, #84]	; 0x54
 800748c:	e001      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d040      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a4:	2b05      	cmp	r3, #5
 80074a6:	d821      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074f3 	.word	0x080074f3
 80074b4:	080074c9 	.word	0x080074c9
 80074b8:	080074db 	.word	0x080074db
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074f3 	.word	0x080074f3
 80074c4:	080074f3 	.word	0x080074f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	2101      	movs	r1, #1
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fadc 	bl	8008a8c <RCCEx_PLL2_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074d8:	e00c      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3324      	adds	r3, #36	; 0x24
 80074de:	2101      	movs	r1, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fb85 	bl	8008bf0 <RCCEx_PLL3_Config>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074ea:	e003      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	75fb      	strb	r3, [r7, #23]
      break;
 80074f0:	e000      	b.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80074f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d110      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	f023 0207 	bic.w	r2, r3, #7
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007508:	4902      	ldr	r1, [pc, #8]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800750a:	4313      	orrs	r3, r2
 800750c:	658b      	str	r3, [r1, #88]	; 0x58
 800750e:	e007      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007510:	58024800 	.word	0x58024800
 8007514:	58024400 	.word	0x58024400
 8007518:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d04b      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007536:	d02e      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800753c:	d828      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d02a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d822      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800754a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800754e:	d026      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007550:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007554:	d81c      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800755a:	d010      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800755c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007560:	d816      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01d      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800756a:	d111      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2100      	movs	r1, #0
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fa8a 	bl	8008a8c <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800757c:	e012      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3324      	adds	r3, #36	; 0x24
 8007582:	2102      	movs	r1, #2
 8007584:	4618      	mov	r0, r3
 8007586:	f001 fb33 	bl	8008bf0 <RCCEx_PLL3_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800758e:	e009      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
      break;
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80075a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075aa:	4bb2      	ldr	r3, [pc, #712]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b8:	49ae      	ldr	r1, [pc, #696]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	654b      	str	r3, [r1, #84]	; 0x54
 80075be:	e001      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d04b      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075da:	d02e      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80075dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075e0:	d828      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e6:	d02a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d822      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80075ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f2:	d026      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80075f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f8:	d81c      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80075fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fe:	d010      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007604:	d816      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d01d      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760e:	d111      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3304      	adds	r3, #4
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fa38 	bl	8008a8c <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007620:	e012      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3324      	adds	r3, #36	; 0x24
 8007626:	2102      	movs	r1, #2
 8007628:	4618      	mov	r0, r3
 800762a:	f001 fae1 	bl	8008bf0 <RCCEx_PLL3_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007632:	e009      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	75fb      	strb	r3, [r7, #23]
      break;
 8007638:	e006      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800763a:	bf00      	nop
 800763c:	e004      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800763e:	bf00      	nop
 8007640:	e002      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800764e:	4b89      	ldr	r3, [pc, #548]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007652:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800765c:	4985      	ldr	r1, [pc, #532]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800765e:	4313      	orrs	r3, r2
 8007660:	658b      	str	r3, [r1, #88]	; 0x58
 8007662:	e001      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b00      	cmp	r3, #0
 8007672:	d04b      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800767a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800767e:	d02e      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007680:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007684:	d828      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768a:	d02a      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800768c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007690:	d822      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007692:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007696:	d026      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007698:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800769c:	d81c      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800769e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a2:	d010      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80076a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076a8:	d816      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01d      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80076ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b2:	d111      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 f9e6 	bl	8008a8c <RCCEx_PLL2_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076c4:	e012      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3324      	adds	r3, #36	; 0x24
 80076ca:	2102      	movs	r1, #2
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fa8f 	bl	8008bf0 <RCCEx_PLL3_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076d6:	e009      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
      break;
 80076dc:	e006      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80076de:	bf00      	nop
 80076e0:	e004      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80076e2:	bf00      	nop
 80076e4:	e002      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80076ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076f2:	4b60      	ldr	r3, [pc, #384]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80076f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007700:	495c      	ldr	r1, [pc, #368]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007702:	4313      	orrs	r3, r2
 8007704:	658b      	str	r3, [r1, #88]	; 0x58
 8007706:	e001      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d018      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007720:	d10a      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3324      	adds	r3, #36	; 0x24
 8007726:	2102      	movs	r1, #2
 8007728:	4618      	mov	r0, r3
 800772a:	f001 fa61 	bl	8008bf0 <RCCEx_PLL3_Config>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007738:	4b4e      	ldr	r3, [pc, #312]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007744:	494b      	ldr	r1, [pc, #300]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007746:	4313      	orrs	r3, r2
 8007748:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01a      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007760:	d10a      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3324      	adds	r3, #36	; 0x24
 8007766:	2102      	movs	r1, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f001 fa41 	bl	8008bf0 <RCCEx_PLL3_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007778:	4b3e      	ldr	r3, [pc, #248]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800777a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007786:	493b      	ldr	r1, [pc, #236]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007788:	4313      	orrs	r3, r2
 800778a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d034      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a2:	d01d      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80077a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a8:	d817      	bhi.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b2:	d009      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80077b4:	e011      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	3304      	adds	r3, #4
 80077ba:	2100      	movs	r1, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f965 	bl	8008a8c <RCCEx_PLL2_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077c6:	e00c      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3324      	adds	r3, #36	; 0x24
 80077cc:	2102      	movs	r1, #2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f001 fa0e 	bl	8008bf0 <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	75fb      	strb	r3, [r7, #23]
      break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80077e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077e8:	4b22      	ldr	r3, [pc, #136]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077f6:	491f      	ldr	r1, [pc, #124]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	658b      	str	r3, [r1, #88]	; 0x58
 80077fc:	e001      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d036      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007818:	d01c      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800781a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800781e:	d816      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007820:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007824:	d003      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782a:	d007      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800782c:	e00f      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	4a10      	ldr	r2, [pc, #64]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007838:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800783a:	e00c      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3324      	adds	r3, #36	; 0x24
 8007840:	2101      	movs	r1, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f001 f9d4 	bl	8008bf0 <RCCEx_PLL3_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800784c:	e003      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
      break;
 8007852:	e000      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10d      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800785e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786a:	4902      	ldr	r1, [pc, #8]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800786c:	4313      	orrs	r3, r2
 800786e:	654b      	str	r3, [r1, #84]	; 0x54
 8007870:	e004      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007872:	bf00      	nop
 8007874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d029      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007894:	d007      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007896:	e00f      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007898:	4b61      	ldr	r3, [pc, #388]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	4a60      	ldr	r2, [pc, #384]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800789e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078a4:	e00b      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2102      	movs	r1, #2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f001 f8ed 	bl	8008a8c <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80078b6:	e002      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078c4:	4b56      	ldr	r3, [pc, #344]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d0:	4953      	ldr	r1, [pc, #332]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078d6:	e001      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3324      	adds	r3, #36	; 0x24
 80078ec:	2102      	movs	r1, #2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f97e 	bl	8008bf0 <RCCEx_PLL3_Config>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d030      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007912:	d017      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007918:	d811      	bhi.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800791a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800791e:	d013      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007924:	d80b      	bhi.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d010      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800792a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792e:	d106      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007930:	4b3b      	ldr	r3, [pc, #236]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4a3a      	ldr	r2, [pc, #232]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800793c:	e007      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
      break;
 8007942:	e004      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007954:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007960:	492f      	ldr	r1, [pc, #188]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007962:	4313      	orrs	r3, r2
 8007964:	654b      	str	r3, [r1, #84]	; 0x54
 8007966:	e001      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007978:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007984:	4926      	ldr	r1, [pc, #152]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a2:	491f      	ldr	r1, [pc, #124]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00d      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079be:	6113      	str	r3, [r2, #16]
 80079c0:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079ca:	4915      	ldr	r1, [pc, #84]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	da08      	bge.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	490e      	ldr	r1, [pc, #56]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a04:	4906      	ldr	r1, [pc, #24]	; (8007a20 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007a0a:	7dbb      	ldrb	r3, [r7, #22]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	58024400 	.word	0x58024400

08007a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b090      	sub	sp, #64	; 0x40
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a32:	f040 8089 	bne.w	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a36:	4b95      	ldr	r3, [pc, #596]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d87d      	bhi.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a61 	.word	0x08007a61
 8007a50:	08007a85 	.word	0x08007a85
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007b3d 	.word	0x08007b3d
 8007a5c:	08007acd 	.word	0x08007acd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a60:	4b8a      	ldr	r3, [pc, #552]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 feb8 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a7c:	e3ed      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a82:	e3ea      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a84:	4b81      	ldr	r3, [pc, #516]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a92:	f107 0318 	add.w	r3, r7, #24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fbfe 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aa0:	e3db      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa6:	e3d8      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007aa8:	4b78      	ldr	r3, [pc, #480]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ab4:	d107      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fd40 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ac4:	e3c9      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aca:	e3c6      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007acc:	4b6f      	ldr	r3, [pc, #444]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ad6:	4b6d      	ldr	r3, [pc, #436]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	d10c      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae8:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	08db      	lsrs	r3, r3, #3
 8007aee:	f003 0303 	and.w	r3, r3, #3
 8007af2:	4a67      	ldr	r2, [pc, #412]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007af4:	fa22 f303 	lsr.w	r3, r2, r3
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007afa:	e01e      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007afc:	4b63      	ldr	r3, [pc, #396]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b08:	d106      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b10:	d102      	bne.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b12:	4b60      	ldr	r3, [pc, #384]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b16:	e010      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b18:	4b5c      	ldr	r3, [pc, #368]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b24:	d106      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2c:	d102      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b2e:	4b5a      	ldr	r3, [pc, #360]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b32:	e002      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b38:	e38f      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007b3a:	e38e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b40:	e38b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b46:	e388      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4e:	f040 80a7 	bne.w	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b52:	4b4e      	ldr	r3, [pc, #312]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b62:	d054      	beq.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b6a:	f200 808b 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b74:	f000 8083 	beq.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b7e:	f200 8081 	bhi.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b88:	d02f      	beq.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b90:	d878      	bhi.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d004      	beq.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b9e:	d012      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007ba0:	e070      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ba2:	4b3a      	ldr	r3, [pc, #232]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fe17 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bbe:	e34c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc4:	e349      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc6:	4b31      	ldr	r3, [pc, #196]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bd2:	d107      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd4:	f107 0318 	add.w	r3, r7, #24
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fb5d 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007be2:	e33a      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be8:	e337      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf6:	d107      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf8:	f107 030c 	add.w	r3, r7, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fc9f 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c06:	e328      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c0c:	e325      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c18:	4b1c      	ldr	r3, [pc, #112]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d10c      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d109      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c2a:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	08db      	lsrs	r3, r3, #3
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e01e      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d106      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c52:	d102      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c54:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c58:	e010      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c66:	d106      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c6e:	d102      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c74:	e002      	b.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c7a:	e2ee      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c7c:	e2ed      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c82:	e2ea      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007c84:	2300      	movs	r3, #0
 8007c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c88:	e2e7      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400
 8007c90:	03d09000 	.word	0x03d09000
 8007c94:	003d0900 	.word	0x003d0900
 8007c98:	007a1200 	.word	0x007a1200
 8007c9c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca6:	f040 809c 	bne.w	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007caa:	4b9e      	ldr	r3, [pc, #632]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007cb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cba:	d054      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cc2:	f200 808b 	bhi.w	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ccc:	f000 8083 	beq.w	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cd6:	f200 8081 	bhi.w	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce0:	d02f      	beq.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce8:	d878      	bhi.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cf6:	d012      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007cf8:	e070      	b.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cfa:	4b8a      	ldr	r3, [pc, #552]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d06:	d107      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fd6b 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d16:	e2a0      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1c:	e29d      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d1e:	4b81      	ldr	r3, [pc, #516]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d2a:	d107      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d2c:	f107 0318 	add.w	r3, r7, #24
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fab1 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007d3a:	e28e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d40:	e28b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d42:	4b78      	ldr	r3, [pc, #480]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4e:	d107      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d50:	f107 030c 	add.w	r3, r7, #12
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fbf3 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d5e:	e27c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d64:	e279      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d66:	4b6f      	ldr	r3, [pc, #444]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d70:	4b6c      	ldr	r3, [pc, #432]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d10c      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d82:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	08db      	lsrs	r3, r3, #3
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	4a66      	ldr	r2, [pc, #408]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d94:	e01e      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d96:	4b63      	ldr	r3, [pc, #396]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da2:	d106      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007daa:	d102      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007dac:	4b5f      	ldr	r3, [pc, #380]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db0:	e010      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007db2:	4b5c      	ldr	r3, [pc, #368]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dbe:	d106      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc6:	d102      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007dc8:	4b59      	ldr	r3, [pc, #356]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dcc:	e002      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007dd2:	e242      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007dd4:	e241      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dd6:	4b57      	ldr	r3, [pc, #348]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dda:	e23e      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de0:	e23b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de8:	f040 80a6 	bne.w	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007dec:	4b4d      	ldr	r3, [pc, #308]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007df4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfc:	d054      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e04:	f200 808b 	bhi.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e0e:	f000 8083 	beq.w	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e18:	f200 8081 	bhi.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e22:	d02f      	beq.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e2a:	d878      	bhi.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e38:	d012      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8007e3a:	e070      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e3c:	4b39      	ldr	r3, [pc, #228]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e48:	d107      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fcca 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e58:	e1ff      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5e:	e1fc      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e60:	4b30      	ldr	r3, [pc, #192]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6c:	d107      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e6e:	f107 0318 	add.w	r3, r7, #24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fa10 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e7c:	e1ed      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e82:	e1ea      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 030c 	add.w	r3, r7, #12
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fb52 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ea0:	e1db      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea6:	e1d8      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ea8:	4b1e      	ldr	r3, [pc, #120]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007eb2:	4b1c      	ldr	r3, [pc, #112]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec4:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed6:	e01e      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ed8:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee4:	d106      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eec:	d102      	bne.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007eee:	4b0f      	ldr	r3, [pc, #60]	; (8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef2:	e010      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ef4:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f00:	d106      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f08:	d102      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f0a:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0e:	e002      	b.n	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f14:	e1a1      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f16:	e1a0      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1c:	e19d      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f22:	e19a      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007f24:	58024400 	.word	0x58024400
 8007f28:	03d09000 	.word	0x03d09000
 8007f2c:	003d0900 	.word	0x003d0900
 8007f30:	007a1200 	.word	0x007a1200
 8007f34:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f3e:	d173      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f40:	4b9a      	ldr	r3, [pc, #616]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f50:	d02f      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f58:	d863      	bhi.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d004      	beq.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f66:	d012      	beq.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007f68:	e05b      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f6a:	4b90      	ldr	r3, [pc, #576]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f76:	d107      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f78:	f107 0318 	add.w	r3, r7, #24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f98b 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f86:	e168      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8c:	e165      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f8e:	4b87      	ldr	r3, [pc, #540]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f9c:	f107 030c 	add.w	r3, r7, #12
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 facd 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007faa:	e156      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fb0:	e153      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fb2:	4b7e      	ldr	r3, [pc, #504]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fbc:	4b7b      	ldr	r3, [pc, #492]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d10c      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fce:	4b77      	ldr	r3, [pc, #476]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	4a75      	ldr	r2, [pc, #468]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007fda:	fa22 f303 	lsr.w	r3, r2, r3
 8007fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe0:	e01e      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fe2:	4b72      	ldr	r3, [pc, #456]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fee:	d106      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ff6:	d102      	bne.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ff8:	4b6e      	ldr	r3, [pc, #440]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ffc:	e010      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ffe:	4b6b      	ldr	r3, [pc, #428]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800800a:	d106      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008012:	d102      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008014:	4b68      	ldr	r3, [pc, #416]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008018:	e002      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800801e:	e11c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008020:	e11b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008026:	e118      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800802e:	d133      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008030:	4b5e      	ldr	r3, [pc, #376]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008046:	d012      	beq.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8008048:	e023      	b.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800804a:	4b58      	ldr	r3, [pc, #352]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008056:	d107      	bne.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fbc3 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008066:	e0f8      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806c:	e0f5      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800806e:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800807a:	d107      	bne.n	800808c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807c:	f107 0318 	add.w	r3, r7, #24
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f909 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800808a:	e0e6      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008090:	e0e3      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008096:	e0e0      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800809e:	f040 808d 	bne.w	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80080a2:	4b42      	ldr	r3, [pc, #264]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80080a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080b2:	d06b      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ba:	d874      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c2:	d056      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ca:	d86c      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080d2:	d03b      	beq.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080da:	d864      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e2:	d021      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ea:	d85c      	bhi.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080f8:	d004      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80080fa:	e054      	b.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080fc:	f000 f8b6 	bl	800826c <HAL_RCCEx_GetD3PCLK1Freq>
 8008100:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008102:	e0aa      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008104:	4b29      	ldr	r3, [pc, #164]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008110:	d107      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008112:	f107 0318 	add.w	r3, r7, #24
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f8be 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008120:	e09b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008126:	e098      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008128:	4b20      	ldr	r3, [pc, #128]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008134:	d107      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fa00 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008144:	e089      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800814a:	e086      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800814c:	4b17      	ldr	r3, [pc, #92]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d109      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008158:	4b14      	ldr	r3, [pc, #80]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	08db      	lsrs	r3, r3, #3
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008164:	fa22 f303 	lsr.w	r3, r2, r3
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800816a:	e076      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008170:	e073      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008172:	4b0e      	ldr	r3, [pc, #56]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817e:	d102      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008180:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008184:	e069      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818a:	e066      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800818c:	4b07      	ldr	r3, [pc, #28]	; (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800819a:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800819e:	e05c      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a4:	e059      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081aa:	e056      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80081ac:	58024400 	.word	0x58024400
 80081b0:	03d09000 	.word	0x03d09000
 80081b4:	003d0900 	.word	0x003d0900
 80081b8:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c2:	d148      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80081c4:	4b27      	ldr	r3, [pc, #156]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d02a      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081dc:	d838      	bhi.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ea:	d00d      	beq.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80081ec:	e030      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081fa:	d102      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008200:	e02b      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008206:	e028      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008208:	4b16      	ldr	r3, [pc, #88]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008214:	d107      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fae4 	bl	80087e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008224:	e019      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800822a:	e016      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822c:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008238:	d107      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800823a:	f107 0318 	add.w	r3, r7, #24
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f82a 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008248:	e007      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824e:	e004      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008254:	e001      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800825c:	4618      	mov	r0, r3
 800825e:	3740      	adds	r7, #64	; 0x40
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	58024400 	.word	0x58024400
 8008268:	007a1200 	.word	0x007a1200

0800826c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008270:	f7fe fc82 	bl	8006b78 <HAL_RCC_GetHCLKFreq>
 8008274:	4602      	mov	r2, r0
 8008276:	4b06      	ldr	r3, [pc, #24]	; (8008290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	091b      	lsrs	r3, r3, #4
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	4904      	ldr	r1, [pc, #16]	; (8008294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008282:	5ccb      	ldrb	r3, [r1, r3]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800828c:	4618      	mov	r0, r3
 800828e:	bd80      	pop	{r7, pc}
 8008290:	58024400 	.word	0x58024400
 8008294:	0800b918 	.word	0x0800b918

08008298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008298:	b480      	push	{r7}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082a0:	4ba1      	ldr	r3, [pc, #644]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80082aa:	4b9f      	ldr	r3, [pc, #636]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	0b1b      	lsrs	r3, r3, #12
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082b6:	4b9c      	ldr	r3, [pc, #624]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	091b      	lsrs	r3, r3, #4
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80082c2:	4b99      	ldr	r3, [pc, #612]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	08db      	lsrs	r3, r3, #3
 80082c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8111 	beq.w	8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f000 8083 	beq.w	80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	f200 80a1 	bhi.w	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d056      	beq.n	80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008302:	e099      	b.n	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008304:	4b88      	ldr	r3, [pc, #544]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02d      	beq.n	800836c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008310:	4b85      	ldr	r3, [pc, #532]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a84      	ldr	r2, [pc, #528]	; (800852c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833a:	4b7b      	ldr	r3, [pc, #492]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834a:	ed97 6a03 	vldr	s12, [r7, #12]
 800834e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800836a:	e087      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b6a      	ldr	r3, [pc, #424]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ae:	e065      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b59      	ldr	r3, [pc, #356]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f2:	e043      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b48      	ldr	r3, [pc, #288]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008436:	e021      	b.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800847a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800847c:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	0a5b      	lsrs	r3, r3, #9
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d0:	ee17 2a90 	vmov	r2, s15
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084d8:	4b13      	ldr	r3, [pc, #76]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fe:	ee17 2a90 	vmov	r2, s15
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008506:	e008      	b.n	800851a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	bf00      	nop
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	58024400 	.word	0x58024400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	46000000 	.word	0x46000000
 8008534:	4c742400 	.word	0x4c742400
 8008538:	4a742400 	.word	0x4a742400
 800853c:	4af42400 	.word	0x4af42400

08008540 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008540:	b480      	push	{r7}
 8008542:	b089      	sub	sp, #36	; 0x24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008548:	4ba1      	ldr	r3, [pc, #644]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008552:	4b9f      	ldr	r3, [pc, #636]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	0d1b      	lsrs	r3, r3, #20
 8008558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800855c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800855e:	4b9c      	ldr	r3, [pc, #624]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	0a1b      	lsrs	r3, r3, #8
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800856a:	4b99      	ldr	r3, [pc, #612]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	08db      	lsrs	r3, r3, #3
 8008570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8111 	beq.w	80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	2b02      	cmp	r3, #2
 8008592:	f000 8083 	beq.w	800869c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b02      	cmp	r3, #2
 800859a:	f200 80a1 	bhi.w	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d056      	beq.n	8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085aa:	e099      	b.n	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ac:	4b88      	ldr	r3, [pc, #544]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02d      	beq.n	8008614 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085b8:	4b85      	ldr	r3, [pc, #532]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	08db      	lsrs	r3, r3, #3
 80085be:	f003 0303 	and.w	r3, r3, #3
 80085c2:	4a84      	ldr	r2, [pc, #528]	; (80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085c4:	fa22 f303 	lsr.w	r3, r2, r3
 80085c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e2:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008612:	e087      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008626:	4b6a      	ldr	r3, [pc, #424]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008636:	ed97 6a03 	vldr	s12, [r7, #12]
 800863a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800863e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008656:	e065      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866a:	4b59      	ldr	r3, [pc, #356]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867a:	ed97 6a03 	vldr	s12, [r7, #12]
 800867e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800869a:	e043      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ae:	4b48      	ldr	r3, [pc, #288]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086be:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086de:	e021      	b.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f2:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008702:	ed97 6a03 	vldr	s12, [r7, #12]
 8008706:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800870a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008722:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008724:	4b2a      	ldr	r3, [pc, #168]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	0a5b      	lsrs	r3, r3, #9
 800872a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800873a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800874a:	ee17 2a90 	vmov	r2, s15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008752:	4b1f      	ldr	r3, [pc, #124]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 2a90 	vmov	r2, s15
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008780:	4b13      	ldr	r3, [pc, #76]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ae:	e008      	b.n	80087c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
}
 80087c2:	bf00      	nop
 80087c4:	3724      	adds	r7, #36	; 0x24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	58024400 	.word	0x58024400
 80087d4:	03d09000 	.word	0x03d09000
 80087d8:	46000000 	.word	0x46000000
 80087dc:	4c742400 	.word	0x4c742400
 80087e0:	4a742400 	.word	0x4a742400
 80087e4:	4af42400 	.word	0x4af42400

080087e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087f0:	4ba0      	ldr	r3, [pc, #640]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80087fa:	4b9e      	ldr	r3, [pc, #632]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008804:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008806:	4b9b      	ldr	r3, [pc, #620]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008810:	4b98      	ldr	r3, [pc, #608]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	fb02 f303 	mul.w	r3, r2, r3
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008828:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8111 	beq.w	8008a56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b02      	cmp	r3, #2
 8008838:	f000 8083 	beq.w	8008942 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	2b02      	cmp	r3, #2
 8008840:	f200 80a1 	bhi.w	8008986 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d056      	beq.n	80088fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008850:	e099      	b.n	8008986 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008852:	4b88      	ldr	r3, [pc, #544]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02d      	beq.n	80088ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800885e:	4b85      	ldr	r3, [pc, #532]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	08db      	lsrs	r3, r3, #3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	4a83      	ldr	r2, [pc, #524]	; (8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008888:	4b7a      	ldr	r3, [pc, #488]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008898:	ed97 6a03 	vldr	s12, [r7, #12]
 800889c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088b8:	e087      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	ee07 3a90 	vmov	s15, r3
 80088c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088cc:	4b69      	ldr	r3, [pc, #420]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088fc:	e065      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008908:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800890c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008910:	4b58      	ldr	r3, [pc, #352]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008920:	ed97 6a03 	vldr	s12, [r7, #12]
 8008924:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008940:	e043      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	ee07 3a90 	vmov	s15, r3
 8008948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008954:	4b47      	ldr	r3, [pc, #284]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	ed97 6a03 	vldr	s12, [r7, #12]
 8008968:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800896c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008984:	e021      	b.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008990:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008998:	4b36      	ldr	r3, [pc, #216]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80089ca:	4b2a      	ldr	r3, [pc, #168]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	0a5b      	lsrs	r3, r3, #9
 80089d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	ee17 2a90 	vmov	r2, s15
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80089f8:	4b1e      	ldr	r3, [pc, #120]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	0c1b      	lsrs	r3, r3, #16
 80089fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1e:	ee17 2a90 	vmov	r2, s15
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008a26:	4b13      	ldr	r3, [pc, #76]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a30:	ee07 3a90 	vmov	s15, r3
 8008a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a4c:	ee17 2a90 	vmov	r2, s15
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a54:	e008      	b.n	8008a68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	609a      	str	r2, [r3, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	3724      	adds	r7, #36	; 0x24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	58024400 	.word	0x58024400
 8008a78:	03d09000 	.word	0x03d09000
 8008a7c:	46000000 	.word	0x46000000
 8008a80:	4c742400 	.word	0x4c742400
 8008a84:	4a742400 	.word	0x4a742400
 8008a88:	4af42400 	.word	0x4af42400

08008a8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a9a:	4b53      	ldr	r3, [pc, #332]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	f003 0303 	and.w	r3, r3, #3
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d101      	bne.n	8008aaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e099      	b.n	8008bde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aaa:	4b4f      	ldr	r3, [pc, #316]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a4e      	ldr	r2, [pc, #312]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ab0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab6:	f7f8 fca1 	bl	80013fc <HAL_GetTick>
 8008aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008abc:	e008      	b.n	8008ad0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008abe:	f7f8 fc9d 	bl	80013fc <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e086      	b.n	8008bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ad0:	4b45      	ldr	r3, [pc, #276]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f0      	bne.n	8008abe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008adc:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	031b      	lsls	r3, r3, #12
 8008aea:	493f      	ldr	r1, [pc, #252]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	628b      	str	r3, [r1, #40]	; 0x28
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	025b      	lsls	r3, r3, #9
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	061b      	lsls	r3, r3, #24
 8008b1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b20:	4931      	ldr	r1, [pc, #196]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b26:	4b30      	ldr	r3, [pc, #192]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	492d      	ldr	r1, [pc, #180]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b38:	4b2b      	ldr	r3, [pc, #172]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	f023 0220 	bic.w	r2, r3, #32
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	4928      	ldr	r1, [pc, #160]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b4a:	4b27      	ldr	r3, [pc, #156]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4e:	4a26      	ldr	r2, [pc, #152]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b50:	f023 0310 	bic.w	r3, r3, #16
 8008b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <RCCEx_PLL2_Config+0x160>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	69d2      	ldr	r2, [r2, #28]
 8008b62:	00d2      	lsls	r2, r2, #3
 8008b64:	4920      	ldr	r1, [pc, #128]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b6a:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6e:	4a1e      	ldr	r2, [pc, #120]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	f043 0310 	orr.w	r3, r3, #16
 8008b74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a19      	ldr	r2, [pc, #100]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b88:	e00f      	b.n	8008baa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d106      	bne.n	8008b9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b90:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b9c:	e005      	b.n	8008baa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba2:	4a11      	ldr	r2, [pc, #68]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a0e      	ldr	r2, [pc, #56]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb6:	f7f8 fc21 	bl	80013fc <HAL_GetTick>
 8008bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bbc:	e008      	b.n	8008bd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bbe:	f7f8 fc1d 	bl	80013fc <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d901      	bls.n	8008bd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e006      	b.n	8008bde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0f0      	beq.n	8008bbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	58024400 	.word	0x58024400
 8008bec:	ffff0007 	.word	0xffff0007

08008bf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bfe:	4b53      	ldr	r3, [pc, #332]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d101      	bne.n	8008c0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e099      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c0e:	4b4f      	ldr	r3, [pc, #316]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c1a:	f7f8 fbef 	bl	80013fc <HAL_GetTick>
 8008c1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c22:	f7f8 fbeb 	bl	80013fc <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e086      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c34:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f0      	bne.n	8008c22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c40:	4b42      	ldr	r3, [pc, #264]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	493f      	ldr	r1, [pc, #252]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c50:	4313      	orrs	r3, r2
 8008c52:	628b      	str	r3, [r1, #40]	; 0x28
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	025b      	lsls	r3, r3, #9
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	061b      	lsls	r3, r3, #24
 8008c80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c84:	4931      	ldr	r1, [pc, #196]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c8a:	4b30      	ldr	r3, [pc, #192]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	492d      	ldr	r1, [pc, #180]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c9c:	4b2b      	ldr	r3, [pc, #172]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	4928      	ldr	r1, [pc, #160]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cae:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a26      	ldr	r2, [pc, #152]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cba:	4b24      	ldr	r3, [pc, #144]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <RCCEx_PLL3_Config+0x160>)
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	69d2      	ldr	r2, [r2, #28]
 8008cc6:	00d2      	lsls	r2, r2, #3
 8008cc8:	4920      	ldr	r1, [pc, #128]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cce:	4b1f      	ldr	r3, [pc, #124]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a19      	ldr	r2, [pc, #100]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cec:	e00f      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d106      	bne.n	8008d02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cf4:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d00:	e005      	b.n	8008d0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a0e      	ldr	r2, [pc, #56]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1a:	f7f8 fb6f 	bl	80013fc <HAL_GetTick>
 8008d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d20:	e008      	b.n	8008d34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d22:	f7f8 fb6b 	bl	80013fc <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <RCCEx_PLL3_Config+0x15c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0f0      	beq.n	8008d22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	58024400 	.word	0x58024400
 8008d50:	ffff0007 	.word	0xffff0007

08008d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e049      	b.n	8008dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7f8 f8cc 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4610      	mov	r0, r2
 8008d94:	f000 fbec 	bl	8009570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d001      	beq.n	8008e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e05e      	b.n	8008eda <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2b      	ldr	r2, [pc, #172]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d02c      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e46:	d027      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a27      	ldr	r2, [pc, #156]	; (8008eec <HAL_TIM_Base_Start_IT+0xe8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d022      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a26      	ldr	r2, [pc, #152]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d01d      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xf0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a23      	ldr	r2, [pc, #140]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xf4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a21      	ldr	r2, [pc, #132]	; (8008efc <HAL_TIM_Base_Start_IT+0xf8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00e      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a20      	ldr	r2, [pc, #128]	; (8008f00 <HAL_TIM_Base_Start_IT+0xfc>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d009      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1e      	ldr	r2, [pc, #120]	; (8008f04 <HAL_TIM_Base_Start_IT+0x100>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x94>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1d      	ldr	r2, [pc, #116]	; (8008f08 <HAL_TIM_Base_Start_IT+0x104>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d115      	bne.n	8008ec4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <HAL_TIM_Base_Start_IT+0x108>)
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d015      	beq.n	8008ed6 <HAL_TIM_Base_Start_IT+0xd2>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb0:	d011      	beq.n	8008ed6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0201 	orr.w	r2, r2, #1
 8008ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec2:	e008      	b.n	8008ed6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0201 	orr.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e000      	b.n	8008ed8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40000400 	.word	0x40000400
 8008ef0:	40000800 	.word	0x40000800
 8008ef4:	40000c00 	.word	0x40000c00
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40001800 	.word	0x40001800
 8008f00:	40014000 	.word	0x40014000
 8008f04:	4000e000 	.word	0x4000e000
 8008f08:	4000e400 	.word	0x4000e400
 8008f0c:	00010007 	.word	0x00010007

08008f10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e049      	b.n	8008fb6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f841 	bl	8008fbe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f000 fb0e 	bl	8009570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d122      	bne.n	800902e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d11b      	bne.n	800902e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f06f 0202 	mvn.w	r2, #2
 8008ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa8d 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 800901a:	e005      	b.n	8009028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa7f 	bl	8009520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa90 	bl	8009548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d122      	bne.n	8009082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d11b      	bne.n	8009082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0204 	mvn.w	r2, #4
 8009052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa63 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 800906e:	e005      	b.n	800907c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa55 	bl	8009520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa66 	bl	8009548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b08      	cmp	r3, #8
 800908e:	d122      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	2b08      	cmp	r3, #8
 800909c:	d11b      	bne.n	80090d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f06f 0208 	mvn.w	r2, #8
 80090a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2204      	movs	r2, #4
 80090ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa39 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 80090c2:	e005      	b.n	80090d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa2b 	bl	8009520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa3c 	bl	8009548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d122      	bne.n	800912a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f003 0310 	and.w	r3, r3, #16
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d11b      	bne.n	800912a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f06f 0210 	mvn.w	r2, #16
 80090fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2208      	movs	r2, #8
 8009100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa0f 	bl	8009534 <HAL_TIM_IC_CaptureCallback>
 8009116:	e005      	b.n	8009124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa01 	bl	8009520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fa12 	bl	8009548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d10e      	bne.n	8009156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b01      	cmp	r3, #1
 8009144:	d107      	bne.n	8009156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f06f 0201 	mvn.w	r2, #1
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7f7 fa5f 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d10e      	bne.n	8009182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d107      	bne.n	8009182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800917a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fd17 	bl	8009bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800919c:	2b80      	cmp	r3, #128	; 0x80
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fd0a 	bl	8009bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ba:	2b40      	cmp	r3, #64	; 0x40
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c8:	2b40      	cmp	r3, #64	; 0x40
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f9c0 	bl	800955c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d10e      	bne.n	8009208 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d107      	bne.n	8009208 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0220 	mvn.w	r2, #32
 8009200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fcca 	bl	8009b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_TIM_IC_ConfigChannel+0x1a>
 8009226:	2302      	movs	r3, #2
 8009228:	e082      	b.n	8009330 <HAL_TIM_IC_ConfigChannel+0x120>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11b      	bne.n	8009270 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f000 fa38 	bl	80096bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f022 020c 	bic.w	r2, r2, #12
 800925a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6999      	ldr	r1, [r3, #24]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	619a      	str	r2, [r3, #24]
 800926e:	e05a      	b.n	8009326 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b04      	cmp	r3, #4
 8009274:	d11c      	bne.n	80092b0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6819      	ldr	r1, [r3, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f000 fac8 	bl	800981a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699a      	ldr	r2, [r3, #24]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	6999      	ldr	r1, [r3, #24]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	021a      	lsls	r2, r3, #8
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	619a      	str	r2, [r3, #24]
 80092ae:	e03a      	b.n	8009326 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d11b      	bne.n	80092ee <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f000 fb15 	bl	80098f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 020c 	bic.w	r2, r2, #12
 80092d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69d9      	ldr	r1, [r3, #28]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	61da      	str	r2, [r3, #28]
 80092ec:	e01b      	b.n	8009326 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f000 fb35 	bl	800996c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69da      	ldr	r2, [r3, #28]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009310:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69d9      	ldr	r1, [r3, #28]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	021a      	lsls	r2, r3, #8
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_TIM_ConfigClockSource+0x18>
 800934c:	2302      	movs	r3, #2
 800934e:	e0db      	b.n	8009508 <HAL_TIM_ConfigClockSource+0x1d0>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4b69      	ldr	r3, [pc, #420]	; (8009510 <HAL_TIM_ConfigClockSource+0x1d8>)
 800936c:	4013      	ands	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a63      	ldr	r2, [pc, #396]	; (8009514 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009386:	4293      	cmp	r3, r2
 8009388:	f000 80a9 	beq.w	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 800938c:	4a61      	ldr	r2, [pc, #388]	; (8009514 <HAL_TIM_ConfigClockSource+0x1dc>)
 800938e:	4293      	cmp	r3, r2
 8009390:	f200 80ae 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009394:	4a60      	ldr	r2, [pc, #384]	; (8009518 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	f000 80a1 	beq.w	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 800939c:	4a5e      	ldr	r2, [pc, #376]	; (8009518 <HAL_TIM_ConfigClockSource+0x1e0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	f200 80a6 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093a4:	4a5d      	ldr	r2, [pc, #372]	; (800951c <HAL_TIM_ConfigClockSource+0x1e4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	f000 8099 	beq.w	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 80093ac:	4a5b      	ldr	r2, [pc, #364]	; (800951c <HAL_TIM_ConfigClockSource+0x1e4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	f200 809e 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093b8:	f000 8091 	beq.w	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 80093bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80093c0:	f200 8096 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093c8:	f000 8089 	beq.w	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 80093cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d0:	f200 808e 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d8:	d03e      	beq.n	8009458 <HAL_TIM_ConfigClockSource+0x120>
 80093da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093de:	f200 8087 	bhi.w	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e6:	f000 8085 	beq.w	80094f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ee:	d87f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093f0:	2b70      	cmp	r3, #112	; 0x70
 80093f2:	d01a      	beq.n	800942a <HAL_TIM_ConfigClockSource+0xf2>
 80093f4:	2b70      	cmp	r3, #112	; 0x70
 80093f6:	d87b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 80093f8:	2b60      	cmp	r3, #96	; 0x60
 80093fa:	d050      	beq.n	800949e <HAL_TIM_ConfigClockSource+0x166>
 80093fc:	2b60      	cmp	r3, #96	; 0x60
 80093fe:	d877      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009400:	2b50      	cmp	r3, #80	; 0x50
 8009402:	d03c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x146>
 8009404:	2b50      	cmp	r3, #80	; 0x50
 8009406:	d873      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009408:	2b40      	cmp	r3, #64	; 0x40
 800940a:	d058      	beq.n	80094be <HAL_TIM_ConfigClockSource+0x186>
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d86f      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009410:	2b30      	cmp	r3, #48	; 0x30
 8009412:	d064      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 8009414:	2b30      	cmp	r3, #48	; 0x30
 8009416:	d86b      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009418:	2b20      	cmp	r3, #32
 800941a:	d060      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 800941c:	2b20      	cmp	r3, #32
 800941e:	d867      	bhi.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
 8009420:	2b00      	cmp	r3, #0
 8009422:	d05c      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x1a6>
 8009424:	2b10      	cmp	r3, #16
 8009426:	d05a      	beq.n	80094de <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009428:	e062      	b.n	80094f0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f000 faf3 	bl	8009a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800944c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	609a      	str	r2, [r3, #8]
      break;
 8009456:	e04e      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6818      	ldr	r0, [r3, #0]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	6899      	ldr	r1, [r3, #8]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f000 fadc 	bl	8009a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689a      	ldr	r2, [r3, #8]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800947a:	609a      	str	r2, [r3, #8]
      break;
 800947c:	e03b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	6859      	ldr	r1, [r3, #4]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	f000 f996 	bl	80097bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2150      	movs	r1, #80	; 0x50
 8009496:	4618      	mov	r0, r3
 8009498:	f000 faa6 	bl	80099e8 <TIM_ITRx_SetConfig>
      break;
 800949c:	e02b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f000 f9f2 	bl	8009894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2160      	movs	r1, #96	; 0x60
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fa96 	bl	80099e8 <TIM_ITRx_SetConfig>
      break;
 80094bc:	e01b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	6859      	ldr	r1, [r3, #4]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f000 f976 	bl	80097bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2140      	movs	r1, #64	; 0x40
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fa86 	bl	80099e8 <TIM_ITRx_SetConfig>
      break;
 80094dc:	e00b      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f000 fa7d 	bl	80099e8 <TIM_ITRx_SetConfig>
        break;
 80094ee:	e002      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80094f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	ffceff88 	.word	0xffceff88
 8009514:	00100040 	.word	0x00100040
 8009518:	00100030 	.word	0x00100030
 800951c:	00100020 	.word	0x00100020

08009520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a44      	ldr	r2, [pc, #272]	; (8009694 <TIM_Base_SetConfig+0x124>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800958e:	d00f      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a41      	ldr	r2, [pc, #260]	; (8009698 <TIM_Base_SetConfig+0x128>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00b      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a40      	ldr	r2, [pc, #256]	; (800969c <TIM_Base_SetConfig+0x12c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d007      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a3f      	ldr	r2, [pc, #252]	; (80096a0 <TIM_Base_SetConfig+0x130>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a3e      	ldr	r2, [pc, #248]	; (80096a4 <TIM_Base_SetConfig+0x134>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d108      	bne.n	80095c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a33      	ldr	r2, [pc, #204]	; (8009694 <TIM_Base_SetConfig+0x124>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d027      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d0:	d023      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a30      	ldr	r2, [pc, #192]	; (8009698 <TIM_Base_SetConfig+0x128>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d01f      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a2f      	ldr	r2, [pc, #188]	; (800969c <TIM_Base_SetConfig+0x12c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d01b      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a2e      	ldr	r2, [pc, #184]	; (80096a0 <TIM_Base_SetConfig+0x130>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d017      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2d      	ldr	r2, [pc, #180]	; (80096a4 <TIM_Base_SetConfig+0x134>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d013      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2c      	ldr	r2, [pc, #176]	; (80096a8 <TIM_Base_SetConfig+0x138>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00f      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2b      	ldr	r2, [pc, #172]	; (80096ac <TIM_Base_SetConfig+0x13c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00b      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a2a      	ldr	r2, [pc, #168]	; (80096b0 <TIM_Base_SetConfig+0x140>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d007      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <TIM_Base_SetConfig+0x144>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d003      	beq.n	800961a <TIM_Base_SetConfig+0xaa>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a28      	ldr	r2, [pc, #160]	; (80096b8 <TIM_Base_SetConfig+0x148>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d108      	bne.n	800962c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <TIM_Base_SetConfig+0x124>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0x108>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a12      	ldr	r2, [pc, #72]	; (80096a4 <TIM_Base_SetConfig+0x134>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0x108>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a11      	ldr	r2, [pc, #68]	; (80096a8 <TIM_Base_SetConfig+0x138>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0x108>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a10      	ldr	r2, [pc, #64]	; (80096ac <TIM_Base_SetConfig+0x13c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0x108>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a0f      	ldr	r2, [pc, #60]	; (80096b0 <TIM_Base_SetConfig+0x140>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d103      	bne.n	8009680 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	615a      	str	r2, [r3, #20]
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40014400 	.word	0x40014400
 80096b0:	40014800 	.word	0x40014800
 80096b4:	4000e000 	.word	0x4000e000
 80096b8:	4000e400 	.word	0x4000e400

080096bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0201 	bic.w	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4a2c      	ldr	r2, [pc, #176]	; (8009798 <TIM_TI1_SetConfig+0xdc>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d023      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d01f      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4a29      	ldr	r2, [pc, #164]	; (800979c <TIM_TI1_SetConfig+0xe0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d01b      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4a28      	ldr	r2, [pc, #160]	; (80097a0 <TIM_TI1_SetConfig+0xe4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d017      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4a27      	ldr	r2, [pc, #156]	; (80097a4 <TIM_TI1_SetConfig+0xe8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a26      	ldr	r2, [pc, #152]	; (80097a8 <TIM_TI1_SetConfig+0xec>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d00f      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a25      	ldr	r2, [pc, #148]	; (80097ac <TIM_TI1_SetConfig+0xf0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00b      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4a24      	ldr	r2, [pc, #144]	; (80097b0 <TIM_TI1_SetConfig+0xf4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d007      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4a23      	ldr	r2, [pc, #140]	; (80097b4 <TIM_TI1_SetConfig+0xf8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d003      	beq.n	8009732 <TIM_TI1_SetConfig+0x76>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4a22      	ldr	r2, [pc, #136]	; (80097b8 <TIM_TI1_SetConfig+0xfc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d101      	bne.n	8009736 <TIM_TI1_SetConfig+0x7a>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <TIM_TI1_SetConfig+0x7c>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4313      	orrs	r3, r2
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	e003      	b.n	8009756 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800975c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	b2db      	uxtb	r3, r3
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f023 030a 	bic.w	r3, r3, #10
 8009770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f003 030a 	and.w	r3, r3, #10
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	621a      	str	r2, [r3, #32]
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40010000 	.word	0x40010000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40000c00 	.word	0x40000c00
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40001800 	.word	0x40001800
 80097b0:	40014000 	.word	0x40014000
 80097b4:	4000e000 	.word	0x4000e000
 80097b8:	4000e400 	.word	0x4000e400

080097bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f023 0201 	bic.w	r2, r3, #1
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	011b      	lsls	r3, r3, #4
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f023 030a 	bic.w	r3, r3, #10
 80097f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	f023 0210 	bic.w	r2, r3, #16
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	031b      	lsls	r3, r3, #12
 800985e:	b29b      	uxth	r3, r3
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	4313      	orrs	r3, r2
 8009864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800986c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	621a      	str	r2, [r3, #32]
}
 8009888:	bf00      	nop
 800988a:	371c      	adds	r7, #28
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	f023 0210 	bic.w	r2, r3, #16
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	031b      	lsls	r3, r3, #12
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	621a      	str	r2, [r3, #32]
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	b2db      	uxtb	r3, r3
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009944:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	621a      	str	r2, [r3, #32]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009998:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	031b      	lsls	r3, r3, #12
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	031b      	lsls	r3, r3, #12
 80099c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	621a      	str	r2, [r3, #32]
}
 80099da:	bf00      	nop
 80099dc:	371c      	adds	r7, #28
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <TIM_ITRx_SetConfig+0x38>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	f043 0307 	orr.w	r3, r3, #7
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	609a      	str	r2, [r3, #8]
}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	ffcfff8f 	.word	0xffcfff8f

08009a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	021a      	lsls	r2, r3, #8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	609a      	str	r2, [r3, #8]
}
 8009a58:	bf00      	nop
 8009a5a:	371c      	adds	r7, #28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e077      	b.n	8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a35      	ldr	r2, [pc, #212]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a34      	ldr	r2, [pc, #208]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d108      	bne.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a25      	ldr	r2, [pc, #148]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d02c      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aee:	d027      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a22      	ldr	r2, [pc, #136]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d022      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a21      	ldr	r2, [pc, #132]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d01d      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1f      	ldr	r2, [pc, #124]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d018      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1a      	ldr	r2, [pc, #104]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1b      	ldr	r2, [pc, #108]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d00e      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a1a      	ldr	r2, [pc, #104]	; (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a18      	ldr	r2, [pc, #96]	; (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a17      	ldr	r2, [pc, #92]	; (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10c      	bne.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40010400 	.word	0x40010400
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40001800 	.word	0x40001800
 8009b90:	40014000 	.word	0x40014000
 8009b94:	4000e000 	.word	0x4000e000
 8009b98:	4000e400 	.word	0x4000e400

08009b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e042      	b.n	8009c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d106      	bne.n	8009c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7f7 f9dd 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2224      	movs	r2, #36	; 0x24
 8009c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0201 	bic.w	r2, r2, #1
 8009c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fb80 	bl	800a320 <UART_SetConfig>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e022      	b.n	8009c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 f9d2 	bl	800afdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0201 	orr.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 fa59 	bl	800b120 <UART_CheckIdleState>
 8009c6e:	4603      	mov	r3, r0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d168      	bne.n	8009d62 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_UART_Transmit_IT+0x24>
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e061      	b.n	8009d64 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <HAL_UART_Transmit_IT+0x36>
 8009caa:	2302      	movs	r3, #2
 8009cac:	e05a      	b.n	8009d64 <HAL_UART_Transmit_IT+0xec>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2221      	movs	r2, #33	; 0x21
 8009cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cea:	d11c      	bne.n	8009d26 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf4:	d107      	bne.n	8009d06 <HAL_UART_Transmit_IT+0x8e>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d103      	bne.n	8009d06 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <HAL_UART_Transmit_IT+0xf8>)
 8009d02:	675a      	str	r2, [r3, #116]	; 0x74
 8009d04:	e002      	b.n	8009d0c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4a1a      	ldr	r2, [pc, #104]	; (8009d74 <HAL_UART_Transmit_IT+0xfc>)
 8009d0a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009d22:	609a      	str	r2, [r3, #8]
 8009d24:	e01b      	b.n	8009d5e <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d107      	bne.n	8009d40 <HAL_UART_Transmit_IT+0xc8>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a0f      	ldr	r2, [pc, #60]	; (8009d78 <HAL_UART_Transmit_IT+0x100>)
 8009d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8009d3e:	e002      	b.n	8009d46 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a0e      	ldr	r2, [pc, #56]	; (8009d7c <HAL_UART_Transmit_IT+0x104>)
 8009d44:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d5c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e000      	b.n	8009d64 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8009d62:	2302      	movs	r3, #2
  }
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	0800b4d5 	.word	0x0800b4d5
 8009d74:	0800b43b 	.word	0x0800b43b
 8009d78:	0800b3bd 	.word	0x0800b3bd
 8009d7c:	0800b349 	.word	0x0800b349

08009d80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009da6:	4013      	ands	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d118      	bne.n	8009de2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d013      	beq.n	8009de2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 8282 	beq.w	800a2dc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	4798      	blx	r3
      }
      return;
 8009de0:	e27c      	b.n	800a2dc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 80ef 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4b73      	ldr	r3, [pc, #460]	; (8009fbc <HAL_UART_IRQHandler+0x23c>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d105      	bne.n	8009e00 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009df4:	69ba      	ldr	r2, [r7, #24]
 8009df6:	4b72      	ldr	r3, [pc, #456]	; (8009fc0 <HAL_UART_IRQHandler+0x240>)
 8009df8:	4013      	ands	r3, r2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 80e4 	beq.w	8009fc8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d010      	beq.n	8009e2c <HAL_UART_IRQHandler+0xac>
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e22:	f043 0201 	orr.w	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d010      	beq.n	8009e58 <HAL_UART_IRQHandler+0xd8>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2202      	movs	r2, #2
 8009e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e4e:	f043 0204 	orr.w	r2, r3, #4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d010      	beq.n	8009e84 <HAL_UART_IRQHandler+0x104>
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00b      	beq.n	8009e84 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2204      	movs	r2, #4
 8009e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e7a:	f043 0202 	orr.w	r2, r3, #2
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d015      	beq.n	8009eba <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	4b48      	ldr	r3, [pc, #288]	; (8009fbc <HAL_UART_IRQHandler+0x23c>)
 8009e9c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2208      	movs	r2, #8
 8009ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eb0:	f043 0208 	orr.w	r2, r3, #8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d011      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x168>
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 81f6 	beq.w	800a2e0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	f003 0320 	and.w	r3, r3, #32
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d011      	beq.n	8009f22 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	f003 0320 	and.w	r3, r3, #32
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d007      	beq.n	8009f22 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f28:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d004      	beq.n	8009f42 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d031      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 f9b8 	bl	800b2b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f52:	2b40      	cmp	r3, #64	; 0x40
 8009f54:	d123      	bne.n	8009f9e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f64:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d013      	beq.n	8009f96 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f72:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <HAL_UART_IRQHandler+0x244>)
 8009f74:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fa f998 	bl	80042b0 <HAL_DMA_Abort_IT>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d017      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f94:	e00f      	b.n	8009fb6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f9ac 	bl	800a2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f9c:	e00b      	b.n	8009fb6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9a8 	bl	800a2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa4:	e007      	b.n	8009fb6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9a4 	bl	800a2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009fb4:	e194      	b.n	800a2e0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb6:	bf00      	nop
    return;
 8009fb8:	e192      	b.n	800a2e0 <HAL_UART_IRQHandler+0x560>
 8009fba:	bf00      	nop
 8009fbc:	10000001 	.word	0x10000001
 8009fc0:	04000120 	.word	0x04000120
 8009fc4:	0800b31d 	.word	0x0800b31d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f040 810f 	bne.w	800a1f0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8109 	beq.w	800a1f0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	f003 0310 	and.w	r3, r3, #16
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8103 	beq.w	800a1f0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2210      	movs	r2, #16
 8009ff0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffc:	2b40      	cmp	r3, #64	; 0x40
 8009ffe:	f040 80bb 	bne.w	800a178 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a96      	ldr	r2, [pc, #600]	; (800a264 <HAL_UART_IRQHandler+0x4e4>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d059      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a94      	ldr	r2, [pc, #592]	; (800a268 <HAL_UART_IRQHandler+0x4e8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d053      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a92      	ldr	r2, [pc, #584]	; (800a26c <HAL_UART_IRQHandler+0x4ec>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d04d      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a90      	ldr	r2, [pc, #576]	; (800a270 <HAL_UART_IRQHandler+0x4f0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d047      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a8e      	ldr	r2, [pc, #568]	; (800a274 <HAL_UART_IRQHandler+0x4f4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d041      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a8c      	ldr	r2, [pc, #560]	; (800a278 <HAL_UART_IRQHandler+0x4f8>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d03b      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a8a      	ldr	r2, [pc, #552]	; (800a27c <HAL_UART_IRQHandler+0x4fc>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d035      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a88      	ldr	r2, [pc, #544]	; (800a280 <HAL_UART_IRQHandler+0x500>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d02f      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a86      	ldr	r2, [pc, #536]	; (800a284 <HAL_UART_IRQHandler+0x504>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d029      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a84      	ldr	r2, [pc, #528]	; (800a288 <HAL_UART_IRQHandler+0x508>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d023      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a82      	ldr	r2, [pc, #520]	; (800a28c <HAL_UART_IRQHandler+0x50c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d01d      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a80      	ldr	r2, [pc, #512]	; (800a290 <HAL_UART_IRQHandler+0x510>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d017      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a7e      	ldr	r2, [pc, #504]	; (800a294 <HAL_UART_IRQHandler+0x514>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d011      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a7c      	ldr	r2, [pc, #496]	; (800a298 <HAL_UART_IRQHandler+0x518>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00b      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a7a      	ldr	r2, [pc, #488]	; (800a29c <HAL_UART_IRQHandler+0x51c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d005      	beq.n	800a0c2 <HAL_UART_IRQHandler+0x342>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a78      	ldr	r2, [pc, #480]	; (800a2a0 <HAL_UART_IRQHandler+0x520>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d105      	bne.n	800a0ce <HAL_UART_IRQHandler+0x34e>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	e004      	b.n	800a0d8 <HAL_UART_IRQHandler+0x358>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a0da:	893b      	ldrh	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 8101 	beq.w	800a2e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a0e8:	893a      	ldrh	r2, [r7, #8]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	f080 80fa 	bcs.w	800a2e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	893a      	ldrh	r2, [r7, #8]
 800a0f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a102:	d02b      	beq.n	800a15c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a112:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f022 0201 	bic.w	r2, r2, #1
 800a122:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a132:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0210 	bic.w	r2, r2, #16
 800a150:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a156:	4618      	mov	r0, r3
 800a158:	f7f9 fd8c 	bl	8003c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a168:	b29b      	uxth	r3, r3
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f8c9 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a176:	e0b5      	b.n	800a2e4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a184:	b29b      	uxth	r3, r3
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80a8 	beq.w	800a2e8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800a198:	897b      	ldrh	r3, [r7, #10]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80a4 	beq.w	800a2e8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a1ae:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6899      	ldr	r1, [r3, #8]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4b3a      	ldr	r3, [pc, #232]	; (800a2a4 <HAL_UART_IRQHandler+0x524>)
 800a1bc:	400b      	ands	r3, r1
 800a1be:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f022 0210 	bic.w	r2, r2, #16
 800a1e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1e4:	897b      	ldrh	r3, [r7, #10]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f88d 	bl	800a308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1ee:	e07b      	b.n	800a2e8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <HAL_UART_IRQHandler+0x496>
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a20c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f9cc 	bl	800b5ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a214:	e06b      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d012      	beq.n	800a246 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a226:	2b00      	cmp	r3, #0
 800a228:	d104      	bne.n	800a234 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d008      	beq.n	800a246 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d057      	beq.n	800a2ec <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
    }
    return;
 800a244:	e052      	b.n	800a2ec <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d02b      	beq.n	800a2a8 <HAL_UART_IRQHandler+0x528>
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	d026      	beq.n	800a2a8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f001 f98c 	bl	800b578 <UART_EndTransmit_IT>
    return;
 800a260:	e045      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
 800a262:	bf00      	nop
 800a264:	40020010 	.word	0x40020010
 800a268:	40020028 	.word	0x40020028
 800a26c:	40020040 	.word	0x40020040
 800a270:	40020058 	.word	0x40020058
 800a274:	40020070 	.word	0x40020070
 800a278:	40020088 	.word	0x40020088
 800a27c:	400200a0 	.word	0x400200a0
 800a280:	400200b8 	.word	0x400200b8
 800a284:	40020410 	.word	0x40020410
 800a288:	40020428 	.word	0x40020428
 800a28c:	40020440 	.word	0x40020440
 800a290:	40020458 	.word	0x40020458
 800a294:	40020470 	.word	0x40020470
 800a298:	40020488 	.word	0x40020488
 800a29c:	400204a0 	.word	0x400204a0
 800a2a0:	400204b8 	.word	0x400204b8
 800a2a4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x544>
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 f989 	bl	800b5d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2c2:	e014      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00f      	beq.n	800a2ee <HAL_UART_IRQHandler+0x56e>
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da0c      	bge.n	800a2ee <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 f973 	bl	800b5c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2da:	e008      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
      return;
 800a2dc:	bf00      	nop
 800a2de:	e006      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
    return;
 800a2e0:	bf00      	nop
 800a2e2:	e004      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
      return;
 800a2e4:	bf00      	nop
 800a2e6:	e002      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
      return;
 800a2e8:	bf00      	nop
 800a2ea:	e000      	b.n	800a2ee <HAL_UART_IRQHandler+0x56e>
    return;
 800a2ec:	bf00      	nop
  }
}
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a320:	b5b0      	push	{r4, r5, r7, lr}
 800a322:	b08e      	sub	sp, #56	; 0x38
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689a      	ldr	r2, [r3, #8]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	431a      	orrs	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	431a      	orrs	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	4313      	orrs	r3, r2
 800a344:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	4bbf      	ldr	r3, [pc, #764]	; (800a64c <UART_SetConfig+0x32c>)
 800a34e:	4013      	ands	r3, r2
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6812      	ldr	r2, [r2, #0]
 800a354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a356:	430b      	orrs	r3, r1
 800a358:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68da      	ldr	r2, [r3, #12]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4ab5      	ldr	r2, [pc, #724]	; (800a650 <UART_SetConfig+0x330>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d004      	beq.n	800a38a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a386:	4313      	orrs	r3, r2
 800a388:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	4bb0      	ldr	r3, [pc, #704]	; (800a654 <UART_SetConfig+0x334>)
 800a392:	4013      	ands	r3, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a39a:	430b      	orrs	r3, r1
 800a39c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	f023 010f 	bic.w	r1, r3, #15
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4aa7      	ldr	r2, [pc, #668]	; (800a658 <UART_SetConfig+0x338>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d176      	bne.n	800a4ac <UART_SetConfig+0x18c>
 800a3be:	4ba7      	ldr	r3, [pc, #668]	; (800a65c <UART_SetConfig+0x33c>)
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3c6:	2b28      	cmp	r3, #40	; 0x28
 800a3c8:	d86c      	bhi.n	800a4a4 <UART_SetConfig+0x184>
 800a3ca:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <UART_SetConfig+0xb0>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a475 	.word	0x0800a475
 800a3d4:	0800a4a5 	.word	0x0800a4a5
 800a3d8:	0800a4a5 	.word	0x0800a4a5
 800a3dc:	0800a4a5 	.word	0x0800a4a5
 800a3e0:	0800a4a5 	.word	0x0800a4a5
 800a3e4:	0800a4a5 	.word	0x0800a4a5
 800a3e8:	0800a4a5 	.word	0x0800a4a5
 800a3ec:	0800a4a5 	.word	0x0800a4a5
 800a3f0:	0800a47d 	.word	0x0800a47d
 800a3f4:	0800a4a5 	.word	0x0800a4a5
 800a3f8:	0800a4a5 	.word	0x0800a4a5
 800a3fc:	0800a4a5 	.word	0x0800a4a5
 800a400:	0800a4a5 	.word	0x0800a4a5
 800a404:	0800a4a5 	.word	0x0800a4a5
 800a408:	0800a4a5 	.word	0x0800a4a5
 800a40c:	0800a4a5 	.word	0x0800a4a5
 800a410:	0800a485 	.word	0x0800a485
 800a414:	0800a4a5 	.word	0x0800a4a5
 800a418:	0800a4a5 	.word	0x0800a4a5
 800a41c:	0800a4a5 	.word	0x0800a4a5
 800a420:	0800a4a5 	.word	0x0800a4a5
 800a424:	0800a4a5 	.word	0x0800a4a5
 800a428:	0800a4a5 	.word	0x0800a4a5
 800a42c:	0800a4a5 	.word	0x0800a4a5
 800a430:	0800a48d 	.word	0x0800a48d
 800a434:	0800a4a5 	.word	0x0800a4a5
 800a438:	0800a4a5 	.word	0x0800a4a5
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a4a5 	.word	0x0800a4a5
 800a444:	0800a4a5 	.word	0x0800a4a5
 800a448:	0800a4a5 	.word	0x0800a4a5
 800a44c:	0800a4a5 	.word	0x0800a4a5
 800a450:	0800a495 	.word	0x0800a495
 800a454:	0800a4a5 	.word	0x0800a4a5
 800a458:	0800a4a5 	.word	0x0800a4a5
 800a45c:	0800a4a5 	.word	0x0800a4a5
 800a460:	0800a4a5 	.word	0x0800a4a5
 800a464:	0800a4a5 	.word	0x0800a4a5
 800a468:	0800a4a5 	.word	0x0800a4a5
 800a46c:	0800a4a5 	.word	0x0800a4a5
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a47a:	e326      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e322      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e31e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e31a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a494:	2320      	movs	r3, #32
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e316      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e312      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a4a4:	2380      	movs	r3, #128	; 0x80
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e30e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a6b      	ldr	r2, [pc, #428]	; (800a660 <UART_SetConfig+0x340>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d130      	bne.n	800a518 <UART_SetConfig+0x1f8>
 800a4b6:	4b69      	ldr	r3, [pc, #420]	; (800a65c <UART_SetConfig+0x33c>)
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d826      	bhi.n	800a510 <UART_SetConfig+0x1f0>
 800a4c2:	a201      	add	r2, pc, #4	; (adr r2, 800a4c8 <UART_SetConfig+0x1a8>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a509 	.word	0x0800a509
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e6:	e2f0      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ee:	e2ec      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f6:	e2e8      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fe:	e2e4      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a500:	2320      	movs	r3, #32
 800a502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a506:	e2e0      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a508:	2340      	movs	r3, #64	; 0x40
 800a50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50e:	e2dc      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a510:	2380      	movs	r3, #128	; 0x80
 800a512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a516:	e2d8      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a51      	ldr	r2, [pc, #324]	; (800a664 <UART_SetConfig+0x344>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d130      	bne.n	800a584 <UART_SetConfig+0x264>
 800a522:	4b4e      	ldr	r3, [pc, #312]	; (800a65c <UART_SetConfig+0x33c>)
 800a524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d826      	bhi.n	800a57c <UART_SetConfig+0x25c>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <UART_SetConfig+0x214>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a54d 	.word	0x0800a54d
 800a538:	0800a555 	.word	0x0800a555
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a565 	.word	0x0800a565
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a552:	e2ba      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55a:	e2b6      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e2b2      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e2ae      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a56c:	2320      	movs	r3, #32
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e2aa      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e2a6      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a582:	e2a2      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a37      	ldr	r2, [pc, #220]	; (800a668 <UART_SetConfig+0x348>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d130      	bne.n	800a5f0 <UART_SetConfig+0x2d0>
 800a58e:	4b33      	ldr	r3, [pc, #204]	; (800a65c <UART_SetConfig+0x33c>)
 800a590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	2b05      	cmp	r3, #5
 800a598:	d826      	bhi.n	800a5e8 <UART_SetConfig+0x2c8>
 800a59a:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <UART_SetConfig+0x280>)
 800a59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a0:	0800a5b9 	.word	0x0800a5b9
 800a5a4:	0800a5c1 	.word	0x0800a5c1
 800a5a8:	0800a5c9 	.word	0x0800a5c9
 800a5ac:	0800a5d1 	.word	0x0800a5d1
 800a5b0:	0800a5d9 	.word	0x0800a5d9
 800a5b4:	0800a5e1 	.word	0x0800a5e1
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5be:	e284      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c6:	e280      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ce:	e27c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d6:	e278      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5d8:	2320      	movs	r3, #32
 800a5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5de:	e274      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5e0:	2340      	movs	r3, #64	; 0x40
 800a5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e6:	e270      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5e8:	2380      	movs	r3, #128	; 0x80
 800a5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ee:	e26c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a1d      	ldr	r2, [pc, #116]	; (800a66c <UART_SetConfig+0x34c>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d142      	bne.n	800a680 <UART_SetConfig+0x360>
 800a5fa:	4b18      	ldr	r3, [pc, #96]	; (800a65c <UART_SetConfig+0x33c>)
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b05      	cmp	r3, #5
 800a604:	d838      	bhi.n	800a678 <UART_SetConfig+0x358>
 800a606:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <UART_SetConfig+0x2ec>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a625 	.word	0x0800a625
 800a610:	0800a62d 	.word	0x0800a62d
 800a614:	0800a635 	.word	0x0800a635
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a671 	.word	0x0800a671
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62a:	e24e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a62c:	2304      	movs	r3, #4
 800a62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a632:	e24a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a634:	2308      	movs	r3, #8
 800a636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63a:	e246      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a63c:	2310      	movs	r3, #16
 800a63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a642:	e242      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a644:	2320      	movs	r3, #32
 800a646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64a:	e23e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a64c:	cfff69f3 	.word	0xcfff69f3
 800a650:	58000c00 	.word	0x58000c00
 800a654:	11fff4ff 	.word	0x11fff4ff
 800a658:	40011000 	.word	0x40011000
 800a65c:	58024400 	.word	0x58024400
 800a660:	40004400 	.word	0x40004400
 800a664:	40004800 	.word	0x40004800
 800a668:	40004c00 	.word	0x40004c00
 800a66c:	40005000 	.word	0x40005000
 800a670:	2340      	movs	r3, #64	; 0x40
 800a672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a676:	e228      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a678:	2380      	movs	r3, #128	; 0x80
 800a67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a67e:	e224      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4ab1      	ldr	r2, [pc, #708]	; (800a94c <UART_SetConfig+0x62c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d176      	bne.n	800a778 <UART_SetConfig+0x458>
 800a68a:	4bb1      	ldr	r3, [pc, #708]	; (800a950 <UART_SetConfig+0x630>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a692:	2b28      	cmp	r3, #40	; 0x28
 800a694:	d86c      	bhi.n	800a770 <UART_SetConfig+0x450>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <UART_SetConfig+0x37c>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a741 	.word	0x0800a741
 800a6a0:	0800a771 	.word	0x0800a771
 800a6a4:	0800a771 	.word	0x0800a771
 800a6a8:	0800a771 	.word	0x0800a771
 800a6ac:	0800a771 	.word	0x0800a771
 800a6b0:	0800a771 	.word	0x0800a771
 800a6b4:	0800a771 	.word	0x0800a771
 800a6b8:	0800a771 	.word	0x0800a771
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a771 	.word	0x0800a771
 800a6c4:	0800a771 	.word	0x0800a771
 800a6c8:	0800a771 	.word	0x0800a771
 800a6cc:	0800a771 	.word	0x0800a771
 800a6d0:	0800a771 	.word	0x0800a771
 800a6d4:	0800a771 	.word	0x0800a771
 800a6d8:	0800a771 	.word	0x0800a771
 800a6dc:	0800a751 	.word	0x0800a751
 800a6e0:	0800a771 	.word	0x0800a771
 800a6e4:	0800a771 	.word	0x0800a771
 800a6e8:	0800a771 	.word	0x0800a771
 800a6ec:	0800a771 	.word	0x0800a771
 800a6f0:	0800a771 	.word	0x0800a771
 800a6f4:	0800a771 	.word	0x0800a771
 800a6f8:	0800a771 	.word	0x0800a771
 800a6fc:	0800a759 	.word	0x0800a759
 800a700:	0800a771 	.word	0x0800a771
 800a704:	0800a771 	.word	0x0800a771
 800a708:	0800a771 	.word	0x0800a771
 800a70c:	0800a771 	.word	0x0800a771
 800a710:	0800a771 	.word	0x0800a771
 800a714:	0800a771 	.word	0x0800a771
 800a718:	0800a771 	.word	0x0800a771
 800a71c:	0800a761 	.word	0x0800a761
 800a720:	0800a771 	.word	0x0800a771
 800a724:	0800a771 	.word	0x0800a771
 800a728:	0800a771 	.word	0x0800a771
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a771 	.word	0x0800a771
 800a734:	0800a771 	.word	0x0800a771
 800a738:	0800a771 	.word	0x0800a771
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a746:	e1c0      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a74e:	e1bc      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a756:	e1b8      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a75e:	e1b4      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a760:	2320      	movs	r3, #32
 800a762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a766:	e1b0      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76e:	e1ac      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a776:	e1a8      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a75      	ldr	r2, [pc, #468]	; (800a954 <UART_SetConfig+0x634>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d130      	bne.n	800a7e4 <UART_SetConfig+0x4c4>
 800a782:	4b73      	ldr	r3, [pc, #460]	; (800a950 <UART_SetConfig+0x630>)
 800a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d826      	bhi.n	800a7dc <UART_SetConfig+0x4bc>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x474>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7ad 	.word	0x0800a7ad
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7cd 	.word	0x0800a7cd
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b2:	e18a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ba:	e186      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7bc:	2308      	movs	r3, #8
 800a7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c2:	e182      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ca:	e17e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7cc:	2320      	movs	r3, #32
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e17a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7da:	e176      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e2:	e172      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a5b      	ldr	r2, [pc, #364]	; (800a958 <UART_SetConfig+0x638>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d130      	bne.n	800a850 <UART_SetConfig+0x530>
 800a7ee:	4b58      	ldr	r3, [pc, #352]	; (800a950 <UART_SetConfig+0x630>)
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d826      	bhi.n	800a848 <UART_SetConfig+0x528>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0x4e0>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a819 	.word	0x0800a819
 800a804:	0800a821 	.word	0x0800a821
 800a808:	0800a829 	.word	0x0800a829
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a839 	.word	0x0800a839
 800a814:	0800a841 	.word	0x0800a841
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81e:	e154      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a820:	2304      	movs	r3, #4
 800a822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a826:	e150      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a828:	2308      	movs	r3, #8
 800a82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82e:	e14c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a830:	2310      	movs	r3, #16
 800a832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a836:	e148      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a838:	2320      	movs	r3, #32
 800a83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83e:	e144      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a846:	e140      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a848:	2380      	movs	r3, #128	; 0x80
 800a84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a84e:	e13c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a41      	ldr	r2, [pc, #260]	; (800a95c <UART_SetConfig+0x63c>)
 800a856:	4293      	cmp	r3, r2
 800a858:	f040 8082 	bne.w	800a960 <UART_SetConfig+0x640>
 800a85c:	4b3c      	ldr	r3, [pc, #240]	; (800a950 <UART_SetConfig+0x630>)
 800a85e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a864:	2b28      	cmp	r3, #40	; 0x28
 800a866:	d86d      	bhi.n	800a944 <UART_SetConfig+0x624>
 800a868:	a201      	add	r2, pc, #4	; (adr r2, 800a870 <UART_SetConfig+0x550>)
 800a86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86e:	bf00      	nop
 800a870:	0800a915 	.word	0x0800a915
 800a874:	0800a945 	.word	0x0800a945
 800a878:	0800a945 	.word	0x0800a945
 800a87c:	0800a945 	.word	0x0800a945
 800a880:	0800a945 	.word	0x0800a945
 800a884:	0800a945 	.word	0x0800a945
 800a888:	0800a945 	.word	0x0800a945
 800a88c:	0800a945 	.word	0x0800a945
 800a890:	0800a91d 	.word	0x0800a91d
 800a894:	0800a945 	.word	0x0800a945
 800a898:	0800a945 	.word	0x0800a945
 800a89c:	0800a945 	.word	0x0800a945
 800a8a0:	0800a945 	.word	0x0800a945
 800a8a4:	0800a945 	.word	0x0800a945
 800a8a8:	0800a945 	.word	0x0800a945
 800a8ac:	0800a945 	.word	0x0800a945
 800a8b0:	0800a925 	.word	0x0800a925
 800a8b4:	0800a945 	.word	0x0800a945
 800a8b8:	0800a945 	.word	0x0800a945
 800a8bc:	0800a945 	.word	0x0800a945
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800a945 	.word	0x0800a945
 800a8c8:	0800a945 	.word	0x0800a945
 800a8cc:	0800a945 	.word	0x0800a945
 800a8d0:	0800a92d 	.word	0x0800a92d
 800a8d4:	0800a945 	.word	0x0800a945
 800a8d8:	0800a945 	.word	0x0800a945
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a945 	.word	0x0800a945
 800a8e4:	0800a945 	.word	0x0800a945
 800a8e8:	0800a945 	.word	0x0800a945
 800a8ec:	0800a945 	.word	0x0800a945
 800a8f0:	0800a935 	.word	0x0800a935
 800a8f4:	0800a945 	.word	0x0800a945
 800a8f8:	0800a945 	.word	0x0800a945
 800a8fc:	0800a945 	.word	0x0800a945
 800a900:	0800a945 	.word	0x0800a945
 800a904:	0800a945 	.word	0x0800a945
 800a908:	0800a945 	.word	0x0800a945
 800a90c:	0800a945 	.word	0x0800a945
 800a910:	0800a93d 	.word	0x0800a93d
 800a914:	2301      	movs	r3, #1
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a91a:	e0d6      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a91c:	2304      	movs	r3, #4
 800a91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a922:	e0d2      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a924:	2308      	movs	r3, #8
 800a926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a92a:	e0ce      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a92c:	2310      	movs	r3, #16
 800a92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a932:	e0ca      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a934:	2320      	movs	r3, #32
 800a936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a93a:	e0c6      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a93c:	2340      	movs	r3, #64	; 0x40
 800a93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a942:	e0c2      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a944:	2380      	movs	r3, #128	; 0x80
 800a946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a94a:	e0be      	b.n	800aaca <UART_SetConfig+0x7aa>
 800a94c:	40011400 	.word	0x40011400
 800a950:	58024400 	.word	0x58024400
 800a954:	40007800 	.word	0x40007800
 800a958:	40007c00 	.word	0x40007c00
 800a95c:	40011800 	.word	0x40011800
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4aad      	ldr	r2, [pc, #692]	; (800ac1c <UART_SetConfig+0x8fc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d176      	bne.n	800aa58 <UART_SetConfig+0x738>
 800a96a:	4bad      	ldr	r3, [pc, #692]	; (800ac20 <UART_SetConfig+0x900>)
 800a96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a972:	2b28      	cmp	r3, #40	; 0x28
 800a974:	d86c      	bhi.n	800aa50 <UART_SetConfig+0x730>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <UART_SetConfig+0x65c>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800aa21 	.word	0x0800aa21
 800a980:	0800aa51 	.word	0x0800aa51
 800a984:	0800aa51 	.word	0x0800aa51
 800a988:	0800aa51 	.word	0x0800aa51
 800a98c:	0800aa51 	.word	0x0800aa51
 800a990:	0800aa51 	.word	0x0800aa51
 800a994:	0800aa51 	.word	0x0800aa51
 800a998:	0800aa51 	.word	0x0800aa51
 800a99c:	0800aa29 	.word	0x0800aa29
 800a9a0:	0800aa51 	.word	0x0800aa51
 800a9a4:	0800aa51 	.word	0x0800aa51
 800a9a8:	0800aa51 	.word	0x0800aa51
 800a9ac:	0800aa51 	.word	0x0800aa51
 800a9b0:	0800aa51 	.word	0x0800aa51
 800a9b4:	0800aa51 	.word	0x0800aa51
 800a9b8:	0800aa51 	.word	0x0800aa51
 800a9bc:	0800aa31 	.word	0x0800aa31
 800a9c0:	0800aa51 	.word	0x0800aa51
 800a9c4:	0800aa51 	.word	0x0800aa51
 800a9c8:	0800aa51 	.word	0x0800aa51
 800a9cc:	0800aa51 	.word	0x0800aa51
 800a9d0:	0800aa51 	.word	0x0800aa51
 800a9d4:	0800aa51 	.word	0x0800aa51
 800a9d8:	0800aa51 	.word	0x0800aa51
 800a9dc:	0800aa39 	.word	0x0800aa39
 800a9e0:	0800aa51 	.word	0x0800aa51
 800a9e4:	0800aa51 	.word	0x0800aa51
 800a9e8:	0800aa51 	.word	0x0800aa51
 800a9ec:	0800aa51 	.word	0x0800aa51
 800a9f0:	0800aa51 	.word	0x0800aa51
 800a9f4:	0800aa51 	.word	0x0800aa51
 800a9f8:	0800aa51 	.word	0x0800aa51
 800a9fc:	0800aa41 	.word	0x0800aa41
 800aa00:	0800aa51 	.word	0x0800aa51
 800aa04:	0800aa51 	.word	0x0800aa51
 800aa08:	0800aa51 	.word	0x0800aa51
 800aa0c:	0800aa51 	.word	0x0800aa51
 800aa10:	0800aa51 	.word	0x0800aa51
 800aa14:	0800aa51 	.word	0x0800aa51
 800aa18:	0800aa51 	.word	0x0800aa51
 800aa1c:	0800aa49 	.word	0x0800aa49
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa26:	e050      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa28:	2304      	movs	r3, #4
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e04c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa30:	2308      	movs	r3, #8
 800aa32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa36:	e048      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa38:	2310      	movs	r3, #16
 800aa3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa3e:	e044      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa40:	2320      	movs	r3, #32
 800aa42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa46:	e040      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa48:	2340      	movs	r3, #64	; 0x40
 800aa4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa4e:	e03c      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa50:	2380      	movs	r3, #128	; 0x80
 800aa52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa56:	e038      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a71      	ldr	r2, [pc, #452]	; (800ac24 <UART_SetConfig+0x904>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d130      	bne.n	800aac4 <UART_SetConfig+0x7a4>
 800aa62:	4b6f      	ldr	r3, [pc, #444]	; (800ac20 <UART_SetConfig+0x900>)
 800aa64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	d826      	bhi.n	800aabc <UART_SetConfig+0x79c>
 800aa6e:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <UART_SetConfig+0x754>)
 800aa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa74:	0800aa8d 	.word	0x0800aa8d
 800aa78:	0800aa95 	.word	0x0800aa95
 800aa7c:	0800aa9d 	.word	0x0800aa9d
 800aa80:	0800aaa5 	.word	0x0800aaa5
 800aa84:	0800aaad 	.word	0x0800aaad
 800aa88:	0800aab5 	.word	0x0800aab5
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e01a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa94:	2304      	movs	r3, #4
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e016      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aa9c:	2308      	movs	r3, #8
 800aa9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa2:	e012      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aaa4:	2310      	movs	r3, #16
 800aaa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaaa:	e00e      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aaac:	2320      	movs	r3, #32
 800aaae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab2:	e00a      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aab4:	2340      	movs	r3, #64	; 0x40
 800aab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaba:	e006      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aabc:	2380      	movs	r3, #128	; 0x80
 800aabe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aac2:	e002      	b.n	800aaca <UART_SetConfig+0x7aa>
 800aac4:	2380      	movs	r3, #128	; 0x80
 800aac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a55      	ldr	r2, [pc, #340]	; (800ac24 <UART_SetConfig+0x904>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	f040 80f0 	bne.w	800acb6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aad6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aada:	2b20      	cmp	r3, #32
 800aadc:	dc46      	bgt.n	800ab6c <UART_SetConfig+0x84c>
 800aade:	2b02      	cmp	r3, #2
 800aae0:	db75      	blt.n	800abce <UART_SetConfig+0x8ae>
 800aae2:	3b02      	subs	r3, #2
 800aae4:	2b1e      	cmp	r3, #30
 800aae6:	d872      	bhi.n	800abce <UART_SetConfig+0x8ae>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <UART_SetConfig+0x7d0>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab73 	.word	0x0800ab73
 800aaf4:	0800abcf 	.word	0x0800abcf
 800aaf8:	0800ab7b 	.word	0x0800ab7b
 800aafc:	0800abcf 	.word	0x0800abcf
 800ab00:	0800abcf 	.word	0x0800abcf
 800ab04:	0800abcf 	.word	0x0800abcf
 800ab08:	0800ab8b 	.word	0x0800ab8b
 800ab0c:	0800abcf 	.word	0x0800abcf
 800ab10:	0800abcf 	.word	0x0800abcf
 800ab14:	0800abcf 	.word	0x0800abcf
 800ab18:	0800abcf 	.word	0x0800abcf
 800ab1c:	0800abcf 	.word	0x0800abcf
 800ab20:	0800abcf 	.word	0x0800abcf
 800ab24:	0800abcf 	.word	0x0800abcf
 800ab28:	0800ab9b 	.word	0x0800ab9b
 800ab2c:	0800abcf 	.word	0x0800abcf
 800ab30:	0800abcf 	.word	0x0800abcf
 800ab34:	0800abcf 	.word	0x0800abcf
 800ab38:	0800abcf 	.word	0x0800abcf
 800ab3c:	0800abcf 	.word	0x0800abcf
 800ab40:	0800abcf 	.word	0x0800abcf
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800abcf 	.word	0x0800abcf
 800ab4c:	0800abcf 	.word	0x0800abcf
 800ab50:	0800abcf 	.word	0x0800abcf
 800ab54:	0800abcf 	.word	0x0800abcf
 800ab58:	0800abcf 	.word	0x0800abcf
 800ab5c:	0800abcf 	.word	0x0800abcf
 800ab60:	0800abcf 	.word	0x0800abcf
 800ab64:	0800abcf 	.word	0x0800abcf
 800ab68:	0800abc1 	.word	0x0800abc1
 800ab6c:	2b40      	cmp	r3, #64	; 0x40
 800ab6e:	d02a      	beq.n	800abc6 <UART_SetConfig+0x8a6>
 800ab70:	e02d      	b.n	800abce <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab72:	f7fd fb7b 	bl	800826c <HAL_RCCEx_GetD3PCLK1Freq>
 800ab76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ab78:	e02f      	b.n	800abda <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab7a:	f107 0314 	add.w	r3, r7, #20
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fd fb8a 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab88:	e027      	b.n	800abda <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8a:	f107 0308 	add.w	r3, r7, #8
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fd fcd6 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab98:	e01f      	b.n	800abda <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab9a:	4b21      	ldr	r3, [pc, #132]	; (800ac20 <UART_SetConfig+0x900>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d009      	beq.n	800abba <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aba6:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <UART_SetConfig+0x900>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	08db      	lsrs	r3, r3, #3
 800abac:	f003 0303 	and.w	r3, r3, #3
 800abb0:	4a1d      	ldr	r2, [pc, #116]	; (800ac28 <UART_SetConfig+0x908>)
 800abb2:	fa22 f303 	lsr.w	r3, r2, r3
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abb8:	e00f      	b.n	800abda <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800abba:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <UART_SetConfig+0x908>)
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abbe:	e00c      	b.n	800abda <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abc0:	4b1a      	ldr	r3, [pc, #104]	; (800ac2c <UART_SetConfig+0x90c>)
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abc4:	e009      	b.n	800abda <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abcc:	e005      	b.n	800abda <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800abd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 81e6 	beq.w	800afae <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe6:	4a12      	ldr	r2, [pc, #72]	; (800ac30 <UART_SetConfig+0x910>)
 800abe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abec:	461a      	mov	r2, r3
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	4613      	mov	r3, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	4413      	add	r3, r2
 800ac00:	6a3a      	ldr	r2, [r7, #32]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d305      	bcc.n	800ac12 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac0c:	6a3a      	ldr	r2, [r7, #32]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d910      	bls.n	800ac34 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac18:	e1c9      	b.n	800afae <UART_SetConfig+0xc8e>
 800ac1a:	bf00      	nop
 800ac1c:	40011c00 	.word	0x40011c00
 800ac20:	58024400 	.word	0x58024400
 800ac24:	58000c00 	.word	0x58000c00
 800ac28:	03d09000 	.word	0x03d09000
 800ac2c:	003d0900 	.word	0x003d0900
 800ac30:	0800b930 	.word	0x0800b930
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	4618      	mov	r0, r3
 800ac38:	f04f 0100 	mov.w	r1, #0
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	4ac1      	ldr	r2, [pc, #772]	; (800af48 <UART_SetConfig+0xc28>)
 800ac42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	f04f 0300 	mov.w	r3, #0
 800ac4c:	f7f5 fb66 	bl	800031c <__aeabi_uldivmod>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4610      	mov	r0, r2
 800ac56:	4619      	mov	r1, r3
 800ac58:	f04f 0200 	mov.w	r2, #0
 800ac5c:	f04f 0300 	mov.w	r3, #0
 800ac60:	020b      	lsls	r3, r1, #8
 800ac62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac66:	0202      	lsls	r2, r0, #8
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	6849      	ldr	r1, [r1, #4]
 800ac6c:	0849      	lsrs	r1, r1, #1
 800ac6e:	4608      	mov	r0, r1
 800ac70:	f04f 0100 	mov.w	r1, #0
 800ac74:	1814      	adds	r4, r2, r0
 800ac76:	eb43 0501 	adc.w	r5, r3, r1
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fb48 	bl	800031c <__aeabi_uldivmod>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4613      	mov	r3, r2
 800ac92:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac9a:	d308      	bcc.n	800acae <UART_SetConfig+0x98e>
 800ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aca2:	d204      	bcs.n	800acae <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acaa:	60da      	str	r2, [r3, #12]
 800acac:	e17f      	b.n	800afae <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800acb4:	e17b      	b.n	800afae <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acbe:	f040 80be 	bne.w	800ae3e <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800acc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acc6:	2b20      	cmp	r3, #32
 800acc8:	dc48      	bgt.n	800ad5c <UART_SetConfig+0xa3c>
 800acca:	2b00      	cmp	r3, #0
 800accc:	db7b      	blt.n	800adc6 <UART_SetConfig+0xaa6>
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d879      	bhi.n	800adc6 <UART_SetConfig+0xaa6>
 800acd2:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <UART_SetConfig+0x9b8>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800ad63 	.word	0x0800ad63
 800acdc:	0800ad6b 	.word	0x0800ad6b
 800ace0:	0800adc7 	.word	0x0800adc7
 800ace4:	0800adc7 	.word	0x0800adc7
 800ace8:	0800ad73 	.word	0x0800ad73
 800acec:	0800adc7 	.word	0x0800adc7
 800acf0:	0800adc7 	.word	0x0800adc7
 800acf4:	0800adc7 	.word	0x0800adc7
 800acf8:	0800ad83 	.word	0x0800ad83
 800acfc:	0800adc7 	.word	0x0800adc7
 800ad00:	0800adc7 	.word	0x0800adc7
 800ad04:	0800adc7 	.word	0x0800adc7
 800ad08:	0800adc7 	.word	0x0800adc7
 800ad0c:	0800adc7 	.word	0x0800adc7
 800ad10:	0800adc7 	.word	0x0800adc7
 800ad14:	0800adc7 	.word	0x0800adc7
 800ad18:	0800ad93 	.word	0x0800ad93
 800ad1c:	0800adc7 	.word	0x0800adc7
 800ad20:	0800adc7 	.word	0x0800adc7
 800ad24:	0800adc7 	.word	0x0800adc7
 800ad28:	0800adc7 	.word	0x0800adc7
 800ad2c:	0800adc7 	.word	0x0800adc7
 800ad30:	0800adc7 	.word	0x0800adc7
 800ad34:	0800adc7 	.word	0x0800adc7
 800ad38:	0800adc7 	.word	0x0800adc7
 800ad3c:	0800adc7 	.word	0x0800adc7
 800ad40:	0800adc7 	.word	0x0800adc7
 800ad44:	0800adc7 	.word	0x0800adc7
 800ad48:	0800adc7 	.word	0x0800adc7
 800ad4c:	0800adc7 	.word	0x0800adc7
 800ad50:	0800adc7 	.word	0x0800adc7
 800ad54:	0800adc7 	.word	0x0800adc7
 800ad58:	0800adb9 	.word	0x0800adb9
 800ad5c:	2b40      	cmp	r3, #64	; 0x40
 800ad5e:	d02e      	beq.n	800adbe <UART_SetConfig+0xa9e>
 800ad60:	e031      	b.n	800adc6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad62:	f7fb ff39 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 800ad66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad68:	e033      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad6a:	f7fb ff4b 	bl	8006c04 <HAL_RCC_GetPCLK2Freq>
 800ad6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ad70:	e02f      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad72:	f107 0314 	add.w	r3, r7, #20
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fd fa8e 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad80:	e027      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fd fbda 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad90:	e01f      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad92:	4b6e      	ldr	r3, [pc, #440]	; (800af4c <UART_SetConfig+0xc2c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0320 	and.w	r3, r3, #32
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d009      	beq.n	800adb2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad9e:	4b6b      	ldr	r3, [pc, #428]	; (800af4c <UART_SetConfig+0xc2c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	08db      	lsrs	r3, r3, #3
 800ada4:	f003 0303 	and.w	r3, r3, #3
 800ada8:	4a69      	ldr	r2, [pc, #420]	; (800af50 <UART_SetConfig+0xc30>)
 800adaa:	fa22 f303 	lsr.w	r3, r2, r3
 800adae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adb0:	e00f      	b.n	800add2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800adb2:	4b67      	ldr	r3, [pc, #412]	; (800af50 <UART_SetConfig+0xc30>)
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adb6:	e00c      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adb8:	4b66      	ldr	r3, [pc, #408]	; (800af54 <UART_SetConfig+0xc34>)
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adbc:	e009      	b.n	800add2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adc4:	e005      	b.n	800add2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800add0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 80ea 	beq.w	800afae <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	4a5a      	ldr	r2, [pc, #360]	; (800af48 <UART_SetConfig+0xc28>)
 800ade0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ade4:	461a      	mov	r2, r3
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	fbb3 f3f2 	udiv	r3, r3, r2
 800adec:	005a      	lsls	r2, r3, #1
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	085b      	lsrs	r3, r3, #1
 800adf4:	441a      	add	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	2b0f      	cmp	r3, #15
 800ae06:	d916      	bls.n	800ae36 <UART_SetConfig+0xb16>
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae0e:	d212      	bcs.n	800ae36 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	f023 030f 	bic.w	r3, r3, #15
 800ae18:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	085b      	lsrs	r3, r3, #1
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f003 0307 	and.w	r3, r3, #7
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae32:	60da      	str	r2, [r3, #12]
 800ae34:	e0bb      	b.n	800afae <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae3c:	e0b7      	b.n	800afae <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	dc4a      	bgt.n	800aedc <UART_SetConfig+0xbbc>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f2c0 8086 	blt.w	800af58 <UART_SetConfig+0xc38>
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	f200 8083 	bhi.w	800af58 <UART_SetConfig+0xc38>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <UART_SetConfig+0xb38>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800aee3 	.word	0x0800aee3
 800ae5c:	0800aeeb 	.word	0x0800aeeb
 800ae60:	0800af59 	.word	0x0800af59
 800ae64:	0800af59 	.word	0x0800af59
 800ae68:	0800aef3 	.word	0x0800aef3
 800ae6c:	0800af59 	.word	0x0800af59
 800ae70:	0800af59 	.word	0x0800af59
 800ae74:	0800af59 	.word	0x0800af59
 800ae78:	0800af03 	.word	0x0800af03
 800ae7c:	0800af59 	.word	0x0800af59
 800ae80:	0800af59 	.word	0x0800af59
 800ae84:	0800af59 	.word	0x0800af59
 800ae88:	0800af59 	.word	0x0800af59
 800ae8c:	0800af59 	.word	0x0800af59
 800ae90:	0800af59 	.word	0x0800af59
 800ae94:	0800af59 	.word	0x0800af59
 800ae98:	0800af13 	.word	0x0800af13
 800ae9c:	0800af59 	.word	0x0800af59
 800aea0:	0800af59 	.word	0x0800af59
 800aea4:	0800af59 	.word	0x0800af59
 800aea8:	0800af59 	.word	0x0800af59
 800aeac:	0800af59 	.word	0x0800af59
 800aeb0:	0800af59 	.word	0x0800af59
 800aeb4:	0800af59 	.word	0x0800af59
 800aeb8:	0800af59 	.word	0x0800af59
 800aebc:	0800af59 	.word	0x0800af59
 800aec0:	0800af59 	.word	0x0800af59
 800aec4:	0800af59 	.word	0x0800af59
 800aec8:	0800af59 	.word	0x0800af59
 800aecc:	0800af59 	.word	0x0800af59
 800aed0:	0800af59 	.word	0x0800af59
 800aed4:	0800af59 	.word	0x0800af59
 800aed8:	0800af39 	.word	0x0800af39
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d02e      	beq.n	800af3e <UART_SetConfig+0xc1e>
 800aee0:	e03a      	b.n	800af58 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee2:	f7fb fe79 	bl	8006bd8 <HAL_RCC_GetPCLK1Freq>
 800aee6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aee8:	e03c      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeea:	f7fb fe8b 	bl	8006c04 <HAL_RCC_GetPCLK2Freq>
 800aeee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aef0:	e038      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd f9ce 	bl	8008298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af00:	e030      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af02:	f107 0308 	add.w	r3, r7, #8
 800af06:	4618      	mov	r0, r3
 800af08:	f7fd fb1a 	bl	8008540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af10:	e028      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <UART_SetConfig+0xc2c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d009      	beq.n	800af32 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af1e:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <UART_SetConfig+0xc2c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <UART_SetConfig+0xc30>)
 800af2a:	fa22 f303 	lsr.w	r3, r2, r3
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af30:	e018      	b.n	800af64 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <UART_SetConfig+0xc30>)
 800af34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af36:	e015      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <UART_SetConfig+0xc34>)
 800af3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af3c:	e012      	b.n	800af64 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af44:	e00e      	b.n	800af64 <UART_SetConfig+0xc44>
 800af46:	bf00      	nop
 800af48:	0800b930 	.word	0x0800b930
 800af4c:	58024400 	.word	0x58024400
 800af50:	03d09000 	.word	0x03d09000
 800af54:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af62:	bf00      	nop
    }

    if (pclk != 0U)
 800af64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d021      	beq.n	800afae <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	4a1a      	ldr	r2, [pc, #104]	; (800afd8 <UART_SetConfig+0xcb8>)
 800af70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af74:	461a      	mov	r2, r3
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	fbb3 f2f2 	udiv	r2, r3, r2
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	085b      	lsrs	r3, r3, #1
 800af82:	441a      	add	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af92:	2b0f      	cmp	r3, #15
 800af94:	d908      	bls.n	800afa8 <UART_SetConfig+0xc88>
 800af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af9c:	d204      	bcs.n	800afa8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	e002      	b.n	800afae <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800afca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3738      	adds	r7, #56	; 0x38
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bdb0      	pop	{r4, r5, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0800b930 	.word	0x0800b930

0800afdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00a      	beq.n	800b04a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00a      	beq.n	800b06c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	430a      	orrs	r2, r1
 800b06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	430a      	orrs	r2, r1
 800b08c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01a      	beq.n	800b0f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0da:	d10a      	bne.n	800b0f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	605a      	str	r2, [r3, #4]
  }
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af02      	add	r7, sp, #8
 800b126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b130:	f7f6 f964 	bl	80013fc <HAL_GetTick>
 800b134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0308 	and.w	r3, r3, #8
 800b140:	2b08      	cmp	r3, #8
 800b142:	d10e      	bne.n	800b162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f82f 	bl	800b1b6 <UART_WaitOnFlagUntilTimeout>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d001      	beq.n	800b162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e025      	b.n	800b1ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d10e      	bne.n	800b18e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f819 	bl	800b1b6 <UART_WaitOnFlagUntilTimeout>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e00f      	b.n	800b1ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2220      	movs	r2, #32
 800b19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c6:	e062      	b.n	800b28e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d05e      	beq.n	800b28e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d0:	f7f6 f914 	bl	80013fc <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d302      	bcc.n	800b1e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d11d      	bne.n	800b222 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0201 	bic.w	r2, r2, #1
 800b204:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2220      	movs	r2, #32
 800b20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e045      	b.n	800b2ae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d02e      	beq.n	800b28e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b23e:	d126      	bne.n	800b28e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b258:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0201 	bic.w	r2, r2, #1
 800b268:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2220      	movs	r2, #32
 800b27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e00f      	b.n	800b2ae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	69da      	ldr	r2, [r3, #28]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	4013      	ands	r3, r2
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	bf0c      	ite	eq
 800b29e:	2301      	moveq	r3, #1
 800b2a0:	2300      	movne	r3, #0
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	79fb      	ldrb	r3, [r7, #7]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d08d      	beq.n	800b1c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6899      	ldr	r1, [r3, #8]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b0f      	ldr	r3, [pc, #60]	; (800b318 <UART_EndRxTransfer+0x60>)
 800b2dc:	400b      	ands	r3, r1
 800b2de:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d107      	bne.n	800b2f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0210 	bic.w	r2, r2, #16
 800b2f6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	effffffe 	.word	0xeffffffe

0800b31c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7fe ffda 	bl	800a2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b356:	2b21      	cmp	r3, #33	; 0x21
 800b358:	d12a      	bne.n	800b3b0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d110      	bne.n	800b388 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b374:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b384:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b386:	e013      	b.n	800b3b0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ca:	2b21      	cmp	r3, #33	; 0x21
 800b3cc:	d12f      	bne.n	800b42e <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d110      	bne.n	800b3fc <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3e8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3f8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b3fa:	e018      	b.n	800b42e <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b400:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b410:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b416:	1c9a      	adds	r2, r3, #2
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b422:	b29b      	uxth	r3, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b42e:	bf00      	nop
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b085      	sub	sp, #20
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b448:	2b21      	cmp	r3, #33	; 0x21
 800b44a:	d13d      	bne.n	800b4c8 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b452:	81fb      	strh	r3, [r7, #14]
 800b454:	e035      	b.n	800b4c2 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d111      	bne.n	800b486 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b470:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b480:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b482:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b484:	e020      	b.n	800b4c8 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b490:	2b00      	cmp	r3, #0
 800b492:	d013      	beq.n	800b4bc <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	81fb      	strh	r3, [r7, #14]
 800b4c2:	89fb      	ldrh	r3, [r7, #14]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1c6      	bne.n	800b456 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800b4c8:	bf00      	nop
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4e2:	2b21      	cmp	r3, #33	; 0x21
 800b4e4:	d142      	bne.n	800b56c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4ec:	81fb      	strh	r3, [r7, #14]
 800b4ee:	e03a      	b.n	800b566 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d111      	bne.n	800b520 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b50a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b51a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800b51c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800b51e:	e025      	b.n	800b56c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d018      	beq.n	800b560 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b532:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	461a      	mov	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b542:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b548:	1c9a      	adds	r2, r3, #2
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b554:	b29b      	uxth	r3, r3
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b560:	89fb      	ldrh	r3, [r7, #14]
 800b562:	3b01      	subs	r3, #1
 800b564:	81fb      	strh	r3, [r7, #14]
 800b566:	89fb      	ldrh	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1c1      	bne.n	800b4f0 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800b56c:	bf00      	nop
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b58e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7f5 f8aa 	bl	80006f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <HAL_UARTEx_DisableFifoMode+0x16>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e027      	b.n	800b64e <HAL_UARTEx_DisableFifoMode+0x66>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2224      	movs	r2, #36	; 0x24
 800b60a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0201 	bic.w	r2, r2, #1
 800b624:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b62c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2220      	movs	r2, #32
 800b640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d101      	bne.n	800b672 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b66e:	2302      	movs	r3, #2
 800b670:	e02d      	b.n	800b6ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2224      	movs	r2, #36	; 0x24
 800b67e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 0201 	bic.w	r2, r2, #1
 800b698:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f850 	bl	800b754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e02d      	b.n	800b74a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2224      	movs	r2, #36	; 0x24
 800b6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 0201 	bic.w	r2, r2, #1
 800b714:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f812 	bl	800b754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2220      	movs	r2, #32
 800b73c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b760:	2b00      	cmp	r3, #0
 800b762:	d108      	bne.n	800b776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b774:	e031      	b.n	800b7da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b776:	2310      	movs	r3, #16
 800b778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b77a:	2310      	movs	r3, #16
 800b77c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	0e5b      	lsrs	r3, r3, #25
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 0307 	and.w	r3, r3, #7
 800b78c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	0f5b      	lsrs	r3, r3, #29
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b79e:	7bbb      	ldrb	r3, [r7, #14]
 800b7a0:	7b3a      	ldrb	r2, [r7, #12]
 800b7a2:	4911      	ldr	r1, [pc, #68]	; (800b7e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b7a4:	5c8a      	ldrb	r2, [r1, r2]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7aa:	7b3a      	ldrb	r2, [r7, #12]
 800b7ac:	490f      	ldr	r1, [pc, #60]	; (800b7ec <UARTEx_SetNbDataToProcess+0x98>)
 800b7ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
 800b7be:	7b7a      	ldrb	r2, [r7, #13]
 800b7c0:	4909      	ldr	r1, [pc, #36]	; (800b7e8 <UARTEx_SetNbDataToProcess+0x94>)
 800b7c2:	5c8a      	ldrb	r2, [r1, r2]
 800b7c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7c8:	7b7a      	ldrb	r2, [r7, #13]
 800b7ca:	4908      	ldr	r1, [pc, #32]	; (800b7ec <UARTEx_SetNbDataToProcess+0x98>)
 800b7cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b7da:	bf00      	nop
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	0800b948 	.word	0x0800b948
 800b7ec:	0800b950 	.word	0x0800b950

0800b7f0 <__libc_init_array>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	4d0d      	ldr	r5, [pc, #52]	; (800b828 <__libc_init_array+0x38>)
 800b7f4:	4c0d      	ldr	r4, [pc, #52]	; (800b82c <__libc_init_array+0x3c>)
 800b7f6:	1b64      	subs	r4, r4, r5
 800b7f8:	10a4      	asrs	r4, r4, #2
 800b7fa:	2600      	movs	r6, #0
 800b7fc:	42a6      	cmp	r6, r4
 800b7fe:	d109      	bne.n	800b814 <__libc_init_array+0x24>
 800b800:	4d0b      	ldr	r5, [pc, #44]	; (800b830 <__libc_init_array+0x40>)
 800b802:	4c0c      	ldr	r4, [pc, #48]	; (800b834 <__libc_init_array+0x44>)
 800b804:	f000 f87c 	bl	800b900 <_init>
 800b808:	1b64      	subs	r4, r4, r5
 800b80a:	10a4      	asrs	r4, r4, #2
 800b80c:	2600      	movs	r6, #0
 800b80e:	42a6      	cmp	r6, r4
 800b810:	d105      	bne.n	800b81e <__libc_init_array+0x2e>
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	f855 3b04 	ldr.w	r3, [r5], #4
 800b818:	4798      	blx	r3
 800b81a:	3601      	adds	r6, #1
 800b81c:	e7ee      	b.n	800b7fc <__libc_init_array+0xc>
 800b81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b822:	4798      	blx	r3
 800b824:	3601      	adds	r6, #1
 800b826:	e7f2      	b.n	800b80e <__libc_init_array+0x1e>
 800b828:	0800b988 	.word	0x0800b988
 800b82c:	0800b988 	.word	0x0800b988
 800b830:	0800b988 	.word	0x0800b988
 800b834:	0800b98c 	.word	0x0800b98c

0800b838 <__itoa>:
 800b838:	1e93      	subs	r3, r2, #2
 800b83a:	2b22      	cmp	r3, #34	; 0x22
 800b83c:	b510      	push	{r4, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	d904      	bls.n	800b84c <__itoa+0x14>
 800b842:	2300      	movs	r3, #0
 800b844:	700b      	strb	r3, [r1, #0]
 800b846:	461c      	mov	r4, r3
 800b848:	4620      	mov	r0, r4
 800b84a:	bd10      	pop	{r4, pc}
 800b84c:	2a0a      	cmp	r2, #10
 800b84e:	d109      	bne.n	800b864 <__itoa+0x2c>
 800b850:	2800      	cmp	r0, #0
 800b852:	da07      	bge.n	800b864 <__itoa+0x2c>
 800b854:	232d      	movs	r3, #45	; 0x2d
 800b856:	700b      	strb	r3, [r1, #0]
 800b858:	4240      	negs	r0, r0
 800b85a:	2101      	movs	r1, #1
 800b85c:	4421      	add	r1, r4
 800b85e:	f000 f80d 	bl	800b87c <__utoa>
 800b862:	e7f1      	b.n	800b848 <__itoa+0x10>
 800b864:	2100      	movs	r1, #0
 800b866:	e7f9      	b.n	800b85c <__itoa+0x24>

0800b868 <itoa>:
 800b868:	f7ff bfe6 	b.w	800b838 <__itoa>

0800b86c <memset>:
 800b86c:	4402      	add	r2, r0
 800b86e:	4603      	mov	r3, r0
 800b870:	4293      	cmp	r3, r2
 800b872:	d100      	bne.n	800b876 <memset+0xa>
 800b874:	4770      	bx	lr
 800b876:	f803 1b01 	strb.w	r1, [r3], #1
 800b87a:	e7f9      	b.n	800b870 <memset+0x4>

0800b87c <__utoa>:
 800b87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b87e:	4c1f      	ldr	r4, [pc, #124]	; (800b8fc <__utoa+0x80>)
 800b880:	b08b      	sub	sp, #44	; 0x2c
 800b882:	4605      	mov	r5, r0
 800b884:	460b      	mov	r3, r1
 800b886:	466e      	mov	r6, sp
 800b888:	f104 0c20 	add.w	ip, r4, #32
 800b88c:	6820      	ldr	r0, [r4, #0]
 800b88e:	6861      	ldr	r1, [r4, #4]
 800b890:	4637      	mov	r7, r6
 800b892:	c703      	stmia	r7!, {r0, r1}
 800b894:	3408      	adds	r4, #8
 800b896:	4564      	cmp	r4, ip
 800b898:	463e      	mov	r6, r7
 800b89a:	d1f7      	bne.n	800b88c <__utoa+0x10>
 800b89c:	7921      	ldrb	r1, [r4, #4]
 800b89e:	7139      	strb	r1, [r7, #4]
 800b8a0:	1e91      	subs	r1, r2, #2
 800b8a2:	6820      	ldr	r0, [r4, #0]
 800b8a4:	6038      	str	r0, [r7, #0]
 800b8a6:	2922      	cmp	r1, #34	; 0x22
 800b8a8:	f04f 0100 	mov.w	r1, #0
 800b8ac:	d904      	bls.n	800b8b8 <__utoa+0x3c>
 800b8ae:	7019      	strb	r1, [r3, #0]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	b00b      	add	sp, #44	; 0x2c
 800b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b8:	1e58      	subs	r0, r3, #1
 800b8ba:	4684      	mov	ip, r0
 800b8bc:	fbb5 f7f2 	udiv	r7, r5, r2
 800b8c0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b8c4:	fb02 5617 	mls	r6, r2, r7, r5
 800b8c8:	4476      	add	r6, lr
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b8d0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b8d4:	462e      	mov	r6, r5
 800b8d6:	42b2      	cmp	r2, r6
 800b8d8:	f101 0101 	add.w	r1, r1, #1
 800b8dc:	463d      	mov	r5, r7
 800b8de:	d9ed      	bls.n	800b8bc <__utoa+0x40>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	545a      	strb	r2, [r3, r1]
 800b8e4:	1919      	adds	r1, r3, r4
 800b8e6:	1aa5      	subs	r5, r4, r2
 800b8e8:	42aa      	cmp	r2, r5
 800b8ea:	dae2      	bge.n	800b8b2 <__utoa+0x36>
 800b8ec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b8f0:	780e      	ldrb	r6, [r1, #0]
 800b8f2:	7006      	strb	r6, [r0, #0]
 800b8f4:	3201      	adds	r2, #1
 800b8f6:	f801 5901 	strb.w	r5, [r1], #-1
 800b8fa:	e7f4      	b.n	800b8e6 <__utoa+0x6a>
 800b8fc:	0800b958 	.word	0x0800b958

0800b900 <_init>:
 800b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b902:	bf00      	nop
 800b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b906:	bc08      	pop	{r3}
 800b908:	469e      	mov	lr, r3
 800b90a:	4770      	bx	lr

0800b90c <_fini>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr
