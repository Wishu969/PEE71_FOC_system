
Unit_H7_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beec  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c1b8  0800c1b8  0001c1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c220  0800c220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  24000000  0800c230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dma_buffer   00000008  24000020  0800c250  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000260  24000028  0800c258  00020028  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  24000288  0800c258  00020288  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023933  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003397  00000000  00000000  00043989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014e0  00000000  00000000  00046d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000013f8  00000000  00000000  00048200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034a19  00000000  00000000  000495f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000193b8  00000000  00000000  0007e011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001612e2  00000000  00000000  000973c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f86ab  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005b48  00000000  00000000  001f8700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000028 	.word	0x24000028
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c1a0 	.word	0x0800c1a0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400002c 	.word	0x2400002c
 8000308:	0800c1a0 	.word	0x0800c1a0

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96e 	b.w	8000610 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468c      	mov	ip, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8083 	bne.w	8000462 <__udivmoddi4+0x116>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d947      	bls.n	80003f2 <__udivmoddi4+0xa6>
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b142      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000368:	f1c2 0020 	rsb	r0, r2, #32
 800036c:	fa24 f000 	lsr.w	r0, r4, r0
 8000370:	4091      	lsls	r1, r2
 8000372:	4097      	lsls	r7, r2
 8000374:	ea40 0c01 	orr.w	ip, r0, r1
 8000378:	4094      	lsls	r4, r2
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fbbc f6f8 	udiv	r6, ip, r8
 8000384:	fa1f fe87 	uxth.w	lr, r7
 8000388:	fb08 c116 	mls	r1, r8, r6, ip
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f10e 	mul.w	r1, r6, lr
 8000394:	4299      	cmp	r1, r3
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x60>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 30ff 	add.w	r0, r6, #4294967295
 800039e:	f080 8119 	bcs.w	80005d4 <__udivmoddi4+0x288>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 8116 	bls.w	80005d4 <__udivmoddi4+0x288>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x8c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 8105 	bcs.w	80005d8 <__udivmoddi4+0x28c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8102 	bls.w	80005d8 <__udivmoddi4+0x28c>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003dc:	eba4 040e 	sub.w	r4, r4, lr
 80003e0:	2600      	movs	r6, #0
 80003e2:	b11d      	cbz	r5, 80003ec <__udivmoddi4+0xa0>
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	2300      	movs	r3, #0
 80003e8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xaa>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d150      	bne.n	80004a0 <__udivmoddi4+0x154>
 80003fe:	1bcb      	subs	r3, r1, r7
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	2601      	movs	r6, #1
 800040a:	fbb3 fcfe 	udiv	ip, r3, lr
 800040e:	0c21      	lsrs	r1, r4, #16
 8000410:	fb0e 331c 	mls	r3, lr, ip, r3
 8000414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000418:	fb08 f30c 	mul.w	r3, r8, ip
 800041c:	428b      	cmp	r3, r1
 800041e:	d907      	bls.n	8000430 <__udivmoddi4+0xe4>
 8000420:	1879      	adds	r1, r7, r1
 8000422:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0xe2>
 8000428:	428b      	cmp	r3, r1
 800042a:	f200 80e9 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 800042e:	4684      	mov	ip, r0
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	b2a3      	uxth	r3, r4
 8000434:	fbb1 f0fe 	udiv	r0, r1, lr
 8000438:	fb0e 1110 	mls	r1, lr, r0, r1
 800043c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000440:	fb08 f800 	mul.w	r8, r8, r0
 8000444:	45a0      	cmp	r8, r4
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x10c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x10a>
 8000450:	45a0      	cmp	r8, r4
 8000452:	f200 80d9 	bhi.w	8000608 <__udivmoddi4+0x2bc>
 8000456:	4618      	mov	r0, r3
 8000458:	eba4 0408 	sub.w	r4, r4, r8
 800045c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000460:	e7bf      	b.n	80003e2 <__udivmoddi4+0x96>
 8000462:	428b      	cmp	r3, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x12e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	f000 80b1 	beq.w	80005ce <__udivmoddi4+0x282>
 800046c:	2600      	movs	r6, #0
 800046e:	e9c5 0100 	strd	r0, r1, [r5]
 8000472:	4630      	mov	r0, r6
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	fab3 f683 	clz	r6, r3
 800047e:	2e00      	cmp	r6, #0
 8000480:	d14a      	bne.n	8000518 <__udivmoddi4+0x1cc>
 8000482:	428b      	cmp	r3, r1
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0x140>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80b8 	bhi.w	80005fc <__udivmoddi4+0x2b0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb61 0103 	sbc.w	r1, r1, r3
 8000492:	2001      	movs	r0, #1
 8000494:	468c      	mov	ip, r1
 8000496:	2d00      	cmp	r5, #0
 8000498:	d0a8      	beq.n	80003ec <__udivmoddi4+0xa0>
 800049a:	e9c5 4c00 	strd	r4, ip, [r5]
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f603 	lsr.w	r6, r0, r3
 80004a8:	4097      	lsls	r7, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b2:	40d9      	lsrs	r1, r3
 80004b4:	4330      	orrs	r0, r6
 80004b6:	0c03      	lsrs	r3, r0, #16
 80004b8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004bc:	fa1f f887 	uxth.w	r8, r7
 80004c0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c8:	fb06 f108 	mul.w	r1, r6, r8
 80004cc:	4299      	cmp	r1, r3
 80004ce:	fa04 f402 	lsl.w	r4, r4, r2
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x19c>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004da:	f080 808d 	bcs.w	80005f8 <__udivmoddi4+0x2ac>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 808a 	bls.w	80005f8 <__udivmoddi4+0x2ac>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	443b      	add	r3, r7
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b281      	uxth	r1, r0
 80004ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f8:	fb00 f308 	mul.w	r3, r0, r8
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x1c4>
 8000500:	1879      	adds	r1, r7, r1
 8000502:	f100 3cff 	add.w	ip, r0, #4294967295
 8000506:	d273      	bcs.n	80005f0 <__udivmoddi4+0x2a4>
 8000508:	428b      	cmp	r3, r1
 800050a:	d971      	bls.n	80005f0 <__udivmoddi4+0x2a4>
 800050c:	3802      	subs	r0, #2
 800050e:	4439      	add	r1, r7
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000516:	e778      	b.n	800040a <__udivmoddi4+0xbe>
 8000518:	f1c6 0c20 	rsb	ip, r6, #32
 800051c:	fa03 f406 	lsl.w	r4, r3, r6
 8000520:	fa22 f30c 	lsr.w	r3, r2, ip
 8000524:	431c      	orrs	r4, r3
 8000526:	fa20 f70c 	lsr.w	r7, r0, ip
 800052a:	fa01 f306 	lsl.w	r3, r1, r6
 800052e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000532:	fa21 f10c 	lsr.w	r1, r1, ip
 8000536:	431f      	orrs	r7, r3
 8000538:	0c3b      	lsrs	r3, r7, #16
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fa1f f884 	uxth.w	r8, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054a:	fb09 fa08 	mul.w	sl, r9, r8
 800054e:	458a      	cmp	sl, r1
 8000550:	fa02 f206 	lsl.w	r2, r2, r6
 8000554:	fa00 f306 	lsl.w	r3, r0, r6
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x220>
 800055a:	1861      	adds	r1, r4, r1
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	d248      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 8000562:	458a      	cmp	sl, r1
 8000564:	d946      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 8000566:	f1a9 0902 	sub.w	r9, r9, #2
 800056a:	4421      	add	r1, r4
 800056c:	eba1 010a 	sub.w	r1, r1, sl
 8000570:	b2bf      	uxth	r7, r7
 8000572:	fbb1 f0fe 	udiv	r0, r1, lr
 8000576:	fb0e 1110 	mls	r1, lr, r0, r1
 800057a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800057e:	fb00 f808 	mul.w	r8, r0, r8
 8000582:	45b8      	cmp	r8, r7
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x24a>
 8000586:	19e7      	adds	r7, r4, r7
 8000588:	f100 31ff 	add.w	r1, r0, #4294967295
 800058c:	d22e      	bcs.n	80005ec <__udivmoddi4+0x2a0>
 800058e:	45b8      	cmp	r8, r7
 8000590:	d92c      	bls.n	80005ec <__udivmoddi4+0x2a0>
 8000592:	3802      	subs	r0, #2
 8000594:	4427      	add	r7, r4
 8000596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059a:	eba7 0708 	sub.w	r7, r7, r8
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	454f      	cmp	r7, r9
 80005a4:	46c6      	mov	lr, r8
 80005a6:	4649      	mov	r1, r9
 80005a8:	d31a      	bcc.n	80005e0 <__udivmoddi4+0x294>
 80005aa:	d017      	beq.n	80005dc <__udivmoddi4+0x290>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x27a>
 80005ae:	ebb3 020e 	subs.w	r2, r3, lr
 80005b2:	eb67 0701 	sbc.w	r7, r7, r1
 80005b6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ba:	40f2      	lsrs	r2, r6
 80005bc:	ea4c 0202 	orr.w	r2, ip, r2
 80005c0:	40f7      	lsrs	r7, r6
 80005c2:	e9c5 2700 	strd	r2, r7, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e70b      	b.n	80003ec <__udivmoddi4+0xa0>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e9      	b.n	80003ac <__udivmoddi4+0x60>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6fd      	b.n	80003d8 <__udivmoddi4+0x8c>
 80005dc:	4543      	cmp	r3, r8
 80005de:	d2e5      	bcs.n	80005ac <__udivmoddi4+0x260>
 80005e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e4:	eb69 0104 	sbc.w	r1, r9, r4
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7df      	b.n	80005ac <__udivmoddi4+0x260>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e7d2      	b.n	8000596 <__udivmoddi4+0x24a>
 80005f0:	4660      	mov	r0, ip
 80005f2:	e78d      	b.n	8000510 <__udivmoddi4+0x1c4>
 80005f4:	4681      	mov	r9, r0
 80005f6:	e7b9      	b.n	800056c <__udivmoddi4+0x220>
 80005f8:	4666      	mov	r6, ip
 80005fa:	e775      	b.n	80004e8 <__udivmoddi4+0x19c>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e74a      	b.n	8000496 <__udivmoddi4+0x14a>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	4439      	add	r1, r7
 8000606:	e713      	b.n	8000430 <__udivmoddi4+0xe4>
 8000608:	3802      	subs	r0, #2
 800060a:	443c      	add	r4, r7
 800060c:	e724      	b.n	8000458 <__udivmoddi4+0x10c>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	/* DEBUG */
	HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	481a      	ldr	r0, [pc, #104]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000624:	f005 ffe6 	bl	80065f4 <HAL_GPIO_WritePin>

	/* Start ADC conversion */
	HAL_ADC_Start_DMA(&hadc3, adc_memory, ADC_LENGTH);
 8000628:	2202      	movs	r2, #2
 800062a:	4919      	ldr	r1, [pc, #100]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800062e:	f001 fc55 	bl	8001edc <HAL_ADC_Start_DMA>
	//shift numbers for decimal point
	uint16_t i = strlen((char *)str);
	memcpy(&str[i-1], &str[i-2], 2);
	str[i-2] = '.';
	*/
	if(uart_flag == 0)
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10c      	bne.n	8000654 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		HAL_UART_Transmit_IT(&huart3, str, strlen((char *)str));
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800063c:	f7ff fe66 	bl	800030c <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	4915      	ldr	r1, [pc, #84]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000648:	4815      	ldr	r0, [pc, #84]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800064a:	f009 ff65 	bl	800a518 <HAL_UART_Transmit_IT>
		uart_flag = 1;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
	}
	if(uart_flag == 2)
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d10c      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x62>
	{
		HAL_UART_Transmit_IT(&huart3, end, strlen((char *)end));
 800065c:	4811      	ldr	r0, [pc, #68]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800065e:	f7ff fe55 	bl	800030c <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29b      	uxth	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	490e      	ldr	r1, [pc, #56]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800066c:	f009 ff54 	bl	800a518 <HAL_UART_Transmit_IT>
		uart_flag = 3;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000672:	2203      	movs	r2, #3
 8000674:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800067e:	f005 ffb9 	bl	80065f4 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58021800 	.word	0x58021800
 8000690:	24000020 	.word	0x24000020
 8000694:	240001c8 	.word	0x240001c8
 8000698:	24000044 	.word	0x24000044
 800069c:	24000000 	.word	0x24000000
 80006a0:	24000048 	.word	0x24000048
 80006a4:	2400000c 	.word	0x2400000c

080006a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if(uart_flag == 1)
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_UART_TxCpltCallback+0x30>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d102      	bne.n	80006be <HAL_UART_TxCpltCallback+0x16>
	{
		uart_flag = 2;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_UART_TxCpltCallback+0x30>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	701a      	strb	r2, [r3, #0]
	}
	if(uart_flag == 3)
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_UART_TxCpltCallback+0x30>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	d102      	bne.n	80006cc <HAL_UART_TxCpltCallback+0x24>
	{
		uart_flag = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <HAL_UART_TxCpltCallback+0x30>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	}
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	24000044 	.word	0x24000044

080006dc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	//adc_memory[0] = HAL_ADC_GetValue(&hadc3);
	//adc_memory[1] = HAL_ADC_GetValue(&hadc3);

	adc_memory[AC_CURRENT] = adc_memory[AC_CURRENT] * 100;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_ADC_ConvCpltCallback+0x58>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	4a11      	ldr	r2, [pc, #68]	; (8000734 <HAL_ADC_ConvCpltCallback+0x58>)
 80006f0:	6013      	str	r3, [r2, #0]

	itoa(adc_memory[AC_CURRENT], (char *)str, 10);
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_ADC_ConvCpltCallback+0x58>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	220a      	movs	r2, #10
 80006f8:	490f      	ldr	r1, [pc, #60]	; (8000738 <HAL_ADC_ConvCpltCallback+0x5c>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00b fd04 	bl	800c108 <itoa>

	//shift numbers for decimal point
	uint16_t i = strlen((char *)str);
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000702:	f7ff fe03 	bl	800030c <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	81fb      	strh	r3, [r7, #14]
	memcpy(&str[i-1], &str[i-2], 2);
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000710:	4413      	add	r3, r2
 8000712:	89fa      	ldrh	r2, [r7, #14]
 8000714:	3a02      	subs	r2, #2
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000718:	440a      	add	r2, r1
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	b292      	uxth	r2, r2
 800071e:	801a      	strh	r2, [r3, #0]
	str[i-2] = '.';
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	3b02      	subs	r3, #2
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000726:	212e      	movs	r1, #46	; 0x2e
 8000728:	54d1      	strb	r1, [r2, r3]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	24000020 	.word	0x24000020
 8000738:	24000000 	.word	0x24000000

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000742:	4b3a      	ldr	r3, [pc, #232]	; (800082c <main+0xf0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d11b      	bne.n	8000786 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800074e:	f3bf 8f4f 	dsb	sy
}
 8000752:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000754:	f3bf 8f6f 	isb	sy
}
 8000758:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <main+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <main+0xf0>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <main+0xf0>)
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800077a:	f3bf 8f4f 	dsb	sy
}
 800077e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	e000      	b.n	8000788 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000786:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0xf0>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d138      	bne.n	8000806 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <main+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800079c:	f3bf 8f4f 	dsb	sy
}
 80007a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <main+0xf0>)
 80007a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	0b5b      	lsrs	r3, r3, #13
 80007ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007b2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	08db      	lsrs	r3, r3, #3
 80007b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007bc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	015a      	lsls	r2, r3, #5
 80007c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007c6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007cc:	4917      	ldr	r1, [pc, #92]	; (800082c <main+0xf0>)
 80007ce:	4313      	orrs	r3, r2
 80007d0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1ef      	bne.n	80007be <main+0x82>
    } while(sets-- != 0U);
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	60ba      	str	r2, [r7, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1e5      	bne.n	80007b4 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80007e8:	f3bf 8f4f 	dsb	sy
}
 80007ec:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <main+0xf0>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <main+0xf0>)
 80007f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007fa:	f3bf 8f4f 	dsb	sy
}
 80007fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000800:	f3bf 8f6f 	isb	sy
}
 8000804:	e000      	b.n	8000808 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000806:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fdcc 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f812 	bl	8000834 <SystemClock_Config>
  /* disable D-cache, causes problems with DMA */
  //SCB_DisableDCache();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f9f4 	bl	8000bfc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000814:	f000 f97e 	bl	8000b14 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000818:	f000 f9c8 	bl	8000bac <MX_DMA_Init>
  MX_TIM1_Init();
 800081c:	f000 f904 	bl	8000a28 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000820:	f000 f880 	bl	8000924 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <main+0xf4>)
 8000826:	f008 ff3d 	bl	80096a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082a:	e7fe      	b.n	800082a <main+0xee>
 800082c:	e000ed00 	.word	0xe000ed00
 8000830:	24000238 	.word	0x24000238

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09c      	sub	sp, #112	; 0x70
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	224c      	movs	r2, #76	; 0x4c
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00b fc62 	bl	800c10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00b fc5c 	bl	800c10c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000854:	2002      	movs	r0, #2
 8000856:	f005 fee7 	bl	8006628 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <SystemClock_Config+0xe8>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <SystemClock_Config+0xe8>)
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <SystemClock_Config+0xe8>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000876:	bf00      	nop
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SystemClock_Config+0xe8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	d1f8      	bne.n	8000878 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <SystemClock_Config+0xec>)
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	f023 0303 	bic.w	r3, r3, #3
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <SystemClock_Config+0xec>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800089a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80008ac:	f240 1313 	movw	r3, #275	; 0x113
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80008be:	2304      	movs	r3, #4
 80008c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4618      	mov	r0, r3
 80008d0:	f005 fee4 	bl	800669c <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008da:	f000 fa8f 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	; 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ea:	2308      	movs	r3, #8
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2103      	movs	r1, #3
 8000904:	4618      	mov	r0, r3
 8000906:	f006 fa57 	bl	8006db8 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000910:	f000 fa74 	bl	8000dfc <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3770      	adds	r7, #112	; 0x70
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58024800 	.word	0x58024800
 8000920:	58024400 	.word	0x58024400

08000924 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2224      	movs	r2, #36	; 0x24
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00b fbeb 	bl	800c10c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <MX_ADC3_Init+0xfc>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000942:	4b36      	ldr	r3, [pc, #216]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000944:	2208      	movs	r2, #8
 8000946:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000948:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000950:	2201      	movs	r2, #1
 8000952:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000956:	2208      	movs	r2, #8
 8000958:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000960:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000962:	2201      	movs	r2, #1
 8000964:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000968:	2202      	movs	r2, #2
 800096a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800097c:	2200      	movs	r2, #0
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800098a:	2200      	movs	r2, #0
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_ADC3_Init+0xf8>)
 800099c:	2200      	movs	r2, #0
 800099e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_ADC3_Init+0xf8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <MX_ADC3_Init+0xf8>)
 80009aa:	f001 f88f 	bl	8001acc <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80009b4:	f000 fa22 	bl	8000dfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009b8:	2301      	movs	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2306      	movs	r3, #6
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ca:	2304      	movs	r3, #4
 80009cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC3_Init+0xf8>)
 80009e8:	f001 fdac 	bl	8002544 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80009f2:	f000 fa03 	bl	8000dfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_ADC3_Init+0x100>)
 80009f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009fa:	230c      	movs	r3, #12
 80009fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_ADC3_Init+0xf8>)
 8000a04:	f001 fd9e 	bl	8002544 <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 8000a0e:	f000 f9f5 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	240001c8 	.word	0x240001c8
 8000a20:	58026000 	.word	0x58026000
 8000a24:	19200040 	.word	0x19200040

08000a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <MX_TIM1_Init+0xe8>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a68:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a74:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a80:	4822      	ldr	r0, [pc, #136]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a82:	f008 fdb7 	bl	80095f4 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f000 f9b6 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481b      	ldr	r0, [pc, #108]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000a9e:	f009 f89b 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000aa8:	f000 f9a8 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aac:	4817      	ldr	r0, [pc, #92]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000aae:	f008 fe7f 	bl	80097b0 <HAL_TIM_IC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ab8:	f000 f9a0 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000ad0:	f009 fc18 	bl	800a304 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ada:	f000 f98f 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_TIM1_Init+0xe4>)
 8000af6:	f008 ffdb 	bl	8009ab0 <HAL_TIM_IC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b00:	f000 f97c 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000238 	.word	0x24000238
 8000b10:	40010000 	.word	0x40010000

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_USART3_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f009 fc8b 	bl	800a478 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f948 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b70:	f00b f9c3 	bl	800befa <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f93f 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b82:	f00b f9f8 	bl	800bf76 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f936 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f00b f979 	bl	800be88 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f92e 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000048 	.word	0x24000048
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	200b      	movs	r0, #11
 8000bd6:	f002 fcf8 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f002 fd0f 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	200c      	movs	r0, #12
 8000be6:	f002 fcf0 	bl	80035ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bea:	200c      	movs	r0, #12
 8000bec:	f002 fd07 	bl	80035fe <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58024400 	.word	0x58024400

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a71      	ldr	r2, [pc, #452]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b6f      	ldr	r3, [pc, #444]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c30:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a6a      	ldr	r2, [pc, #424]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b67      	ldr	r3, [pc, #412]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	4b64      	ldr	r3, [pc, #400]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a62      	ldr	r2, [pc, #392]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b60      	ldr	r3, [pc, #384]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a5b      	ldr	r2, [pc, #364]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a53      	ldr	r2, [pc, #332]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x1e4>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d08:	4836      	ldr	r0, [pc, #216]	; (8000de4 <MX_GPIO_Init+0x1e8>)
 8000d0a:	f005 fc73 	bl	80065f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	4834      	ldr	r0, [pc, #208]	; (8000de8 <MX_GPIO_Init+0x1ec>)
 8000d16:	f005 fc6d 	bl	80065f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_timer_GPIO_Port, ADC_timer_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	4832      	ldr	r0, [pc, #200]	; (8000dec <MX_GPIO_Init+0x1f0>)
 8000d22:	f005 fc67 	bl	80065f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2102      	movs	r1, #2
 8000d2a:	4831      	ldr	r0, [pc, #196]	; (8000df0 <MX_GPIO_Init+0x1f4>)
 8000d2c:	f005 fc62 	bl	80065f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	482b      	ldr	r0, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x1f8>)
 8000d46:	f005 faad 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d4a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <MX_GPIO_Init+0x1e8>)
 8000d64:	f005 fa9e 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4819      	ldr	r0, [pc, #100]	; (8000de8 <MX_GPIO_Init+0x1ec>)
 8000d82:	f005 fa8f 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_GPIO_Init+0x1fc>)
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4814      	ldr	r0, [pc, #80]	; (8000dec <MX_GPIO_Init+0x1f0>)
 8000d9a:	f005 fa83 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_timer_Pin */
  GPIO_InitStruct.Pin = ADC_timer_Pin;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_timer_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <MX_GPIO_Init+0x1f0>)
 8000db8:	f005 fa74 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_GPIO_Init+0x1f4>)
 8000dd4:	f005 fa66 	bl	80062a4 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	; 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58020c00 	.word	0x58020c00
 8000dec:	58021800 	.word	0x58021800
 8000df0:	58021000 	.word	0x58021000
 8000df4:	58020800 	.word	0x58020800
 8000df8:	11110000 	.word	0x11110000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x30>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x30>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x30>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58024400 	.word	0x58024400

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b8      	sub	sp, #224	; 0xe0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	22b4      	movs	r2, #180	; 0xb4
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f00b f955 	bl	800c10c <memset>
  if(hadc->Instance==ADC3)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a51      	ldr	r2, [pc, #324]	; (8000fac <HAL_ADC_MspInit+0x170>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	f040 809a 	bne.w	8000fa2 <HAL_ADC_MspInit+0x166>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000e78:	2318      	movs	r3, #24
 8000e7a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f006 fb16 	bl	80074d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000eaa:	f7ff ffa7 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000eae:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a37      	ldr	r2, [pc, #220]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_ADC_MspInit+0x174>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    PF4     ------> ADC3_INP9
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    */
    GPIO_InitStruct.Pin = adc_dc_voltage_Pin|adc_dc_current_Pin|adc_ac_current_Pin;
 8000f08:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	2303      	movs	r3, #3
 8000f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f20:	4619      	mov	r1, r3
 8000f22:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <HAL_ADC_MspInit+0x178>)
 8000f24:	f005 f9be 	bl	80062a4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000f28:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000f2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f30:	f000 faca 	bl	80014c8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f36:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <HAL_ADC_MspInit+0x180>)
 8000f38:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f3c:	2273      	movs	r2, #115	; 0x73
 8000f3e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f78:	f002 fb5c 	bl	8003634 <HAL_DMA_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_ADC_MspInit+0x14a>
    {
      Error_Handler();
 8000f82:	f7ff ff3b 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_ADC_MspInit+0x17c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	207f      	movs	r0, #127	; 0x7f
 8000f98:	f002 fb17 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f9c:	207f      	movs	r0, #127	; 0x7f
 8000f9e:	f002 fb2e 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	37e0      	adds	r7, #224	; 0xe0
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58026000 	.word	0x58026000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58021400 	.word	0x58021400
 8000fb8:	240000d8 	.word	0x240000d8
 8000fbc:	40020010 	.word	0x40020010

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_TIM_Base_MspInit+0x98>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d136      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8000fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8000ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_TIM_Base_MspInit+0x9c>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800101e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001030:	2301      	movs	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <HAL_TIM_Base_MspInit+0xa0>)
 800103c:	f005 f932 	bl	80062a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2019      	movs	r0, #25
 8001046:	f002 fac0 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800104a:	2019      	movs	r0, #25
 800104c:	f002 fad7 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010000 	.word	0x40010000
 800105c:	58024400 	.word	0x58024400
 8001060:	58021000 	.word	0x58021000

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0b6      	sub	sp, #216	; 0xd8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	22b4      	movs	r2, #180	; 0xb4
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00b f841 	bl	800c10c <memset>
  if(huart->Instance==USART3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a3f      	ldr	r2, [pc, #252]	; (800118c <HAL_UART_MspInit+0x128>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d177      	bne.n	8001184 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 fa14 	bl	80074d0 <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ae:	f7ff fea5 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b8:	4a35      	ldr	r2, [pc, #212]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_UART_MspInit+0x12c>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80010ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001108:	2307      	movs	r3, #7
 800110a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001112:	4619      	mov	r1, r3
 8001114:	481f      	ldr	r0, [pc, #124]	; (8001194 <HAL_UART_MspInit+0x130>)
 8001116:	f005 f8c5 	bl	80062a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_UART_MspInit+0x134>)
 800111c:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_UART_MspInit+0x138>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001122:	222e      	movs	r2, #46	; 0x2e
 8001124:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x134>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001138:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_UART_MspInit+0x134>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0x134>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001158:	480f      	ldr	r0, [pc, #60]	; (8001198 <HAL_UART_MspInit+0x134>)
 800115a:	f002 fa6b 	bl	8003634 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001164:	f7ff fe4a 	bl	8000dfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_UART_MspInit+0x134>)
 800116c:	679a      	str	r2, [r3, #120]	; 0x78
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_UART_MspInit+0x134>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2027      	movs	r0, #39	; 0x27
 800117a:	f002 fa26 	bl	80035ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800117e:	2027      	movs	r0, #39	; 0x27
 8001180:	f002 fa3d 	bl	80035fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001184:	bf00      	nop
 8001186:	37d8      	adds	r7, #216	; 0xd8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40004800 	.word	0x40004800
 8001190:	58024400 	.word	0x58024400
 8001194:	58020c00 	.word	0x58020c00
 8001198:	24000150 	.word	0x24000150
 800119c:	40020028 	.word	0x40020028

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f94c 	bl	8001488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <DMA1_Stream0_IRQHandler+0x10>)
 80011fa:	f003 fd41 	bl	8004c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	240000d8 	.word	0x240000d8

08001208 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA1_Stream1_IRQHandler+0x10>)
 800120e:	f003 fd37 	bl	8004c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000150 	.word	0x24000150

0800121c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <TIM1_UP_IRQHandler+0x10>)
 8001222:	f008 fb26 	bl	8009872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	24000238 	.word	0x24000238

08001230 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART3_IRQHandler+0x10>)
 8001236:	f009 f9f3 	bl	800a620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000048 	.word	0x24000048

08001244 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <ADC3_IRQHandler+0x10>)
 800124a:	f000 ff23 	bl	8002094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	240001c8 	.word	0x240001c8

08001258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <SystemInit+0xd8>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001262:	4a33      	ldr	r2, [pc, #204]	; (8001330 <SystemInit+0xd8>)
 8001264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <SystemInit+0xdc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	2b06      	cmp	r3, #6
 8001276:	d807      	bhi.n	8001288 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <SystemInit+0xdc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 030f 	bic.w	r3, r3, #15
 8001280:	4a2c      	ldr	r2, [pc, #176]	; (8001334 <SystemInit+0xdc>)
 8001282:	f043 0307 	orr.w	r3, r3, #7
 8001286:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <SystemInit+0xe0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <SystemInit+0xe0>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SystemInit+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800129a:	4b27      	ldr	r3, [pc, #156]	; (8001338 <SystemInit+0xe0>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4926      	ldr	r1, [pc, #152]	; (8001338 <SystemInit+0xe0>)
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <SystemInit+0xe4>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <SystemInit+0xdc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <SystemInit+0xdc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <SystemInit+0xdc>)
 80012bc:	f043 0307 	orr.w	r3, r3, #7
 80012c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <SystemInit+0xe0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <SystemInit+0xe0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <SystemInit+0xe0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <SystemInit+0xe0>)
 80012d6:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <SystemInit+0xe8>)
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <SystemInit+0xe0>)
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <SystemInit+0xec>)
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <SystemInit+0xe0>)
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <SystemInit+0xf0>)
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <SystemInit+0xe0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <SystemInit+0xe0>)
 80012ee:	4a16      	ldr	r2, [pc, #88]	; (8001348 <SystemInit+0xf0>)
 80012f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <SystemInit+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <SystemInit+0xe0>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <SystemInit+0xf0>)
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <SystemInit+0xe0>)
 8001300:	2200      	movs	r2, #0
 8001302:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <SystemInit+0xe0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <SystemInit+0xe0>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <SystemInit+0xe0>)
 8001312:	2200      	movs	r2, #0
 8001314:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <SystemInit+0xf4>)
 8001318:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800131c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SystemInit+0xd8>)
 8001320:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001324:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	52002000 	.word	0x52002000
 8001338:	58024400 	.word	0x58024400
 800133c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001340:	02020200 	.word	0x02020200
 8001344:	01ff0000 	.word	0x01ff0000
 8001348:	01010280 	.word	0x01010280
 800134c:	52004000 	.word	0x52004000

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001354:	f7ff ff80 	bl	8001258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f00a fe87 	bl	800c090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f9db 	bl	800073c <main>
  bx  lr
 8001386:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800138c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001390:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8001394:	0800c230 	.word	0x0800c230
  ldr r2, =_sbss
 8001398:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 800139c:	24000288 	.word	0x24000288

080013a0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f002 f902 	bl	80035b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013b0:	f005 feb8 	bl	8007124 <HAL_RCC_GetSysClockFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_Init+0x68>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	4913      	ldr	r1, [pc, #76]	; (8001410 <HAL_Init+0x6c>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_Init+0x68>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_Init+0x6c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_Init+0x70>)
 80013e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <HAL_Init+0x74>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f814 	bl	800141c <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e002      	b.n	8001404 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013fe:	f7ff fd03 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024400 	.word	0x58024400
 8001410:	0800c1b8 	.word	0x0800c1b8
 8001414:	24000014 	.word	0x24000014
 8001418:	24000010 	.word	0x24000010

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_InitTick+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e021      	b.n	8001474 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_InitTick+0x64>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_InitTick+0x60>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001442:	fbb2 f3f3 	udiv	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f002 f8e7 	bl	800361a <HAL_SYSTICK_Config>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e00e      	b.n	8001474 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d80a      	bhi.n	8001472 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f002 f8b1 	bl	80035ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_InitTick+0x68>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2400001c 	.word	0x2400001c
 8001480:	24000010 	.word	0x24000010
 8001484:	24000018 	.word	0x24000018

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	2400001c 	.word	0x2400001c
 80014ac:	24000284 	.word	0x24000284

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	24000284 	.word	0x24000284

080014c8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	43db      	mvns	r3, r3
 80014da:	401a      	ands	r2, r3
 80014dc:	4904      	ldr	r1, [pc, #16]	; (80014f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58000400 	.word	0x58000400

080014f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	609a      	str	r2, [r3, #8]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3360      	adds	r3, #96	; 0x60
 800156e:	461a      	mov	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <LL_ADC_SetOffset+0x60>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d10b      	bne.n	8001598 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001596:	e00b      	b.n	80015b0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	371c      	adds	r7, #28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	58026000 	.word	0x58026000

080015c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3360      	adds	r3, #96	; 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	611a      	str	r2, [r3, #16]
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00e      	beq.n	8001652 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3360      	adds	r3, #96	; 0x60
 8001638:	461a      	mov	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
  }
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	58026000 	.word	0x58026000

08001664 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <LL_ADC_SetOffsetSaturation+0x40>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d10e      	bne.n	8001696 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3360      	adds	r3, #96	; 0x60
 800167c:	461a      	mov	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	431a      	orrs	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	58026000 	.word	0x58026000

080016a8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <LL_ADC_SetOffsetSign+0x40>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10e      	bne.n	80016da <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3360      	adds	r3, #96	; 0x60
 80016c0:	461a      	mov	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80016da:	bf00      	nop
 80016dc:	371c      	adds	r7, #28
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	58026000 	.word	0x58026000

080016ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3360      	adds	r3, #96	; 0x60
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <LL_ADC_SetOffsetState+0x50>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d108      	bne.n	8001720 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800171e:	e007      	b.n	8001730 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	431a      	orrs	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	58026000 	.word	0x58026000

08001740 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3330      	adds	r3, #48	; 0x30
 8001776:	461a      	mov	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	4413      	add	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	211f      	movs	r1, #31
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 011f 	and.w	r1, r3, #31
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f023 0203 	bic.w	r2, r3, #3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d107      	bne.n	8001826 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58026000 	.word	0x58026000

08001838 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800185e:	b480      	push	{r7}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3314      	adds	r3, #20
 800186e:	461a      	mov	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0e5b      	lsrs	r3, r3, #25
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0d1b      	lsrs	r3, r3, #20
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	2107      	movs	r1, #7
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	0d1b      	lsrs	r3, r3, #20
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a1a      	ldr	r2, [pc, #104]	; (800192c <LL_ADC_SetChannelSingleDiff+0x78>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d115      	bne.n	80018f4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0318 	and.w	r3, r3, #24
 80018de:	4914      	ldr	r1, [pc, #80]	; (8001930 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80018e0:	40d9      	lsrs	r1, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	400b      	ands	r3, r1
 80018e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ea:	431a      	orrs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80018f2:	e014      	b.n	800191e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0318 	and.w	r3, r3, #24
 800190a:	4909      	ldr	r1, [pc, #36]	; (8001930 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800190c:	40d9      	lsrs	r1, r3
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	400b      	ands	r3, r1
 8001912:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001916:	431a      	orrs	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	58026000 	.word	0x58026000
 8001930:	000fffff 	.word	0x000fffff

08001934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <LL_ADC_DisableDeepPowerDown+0x20>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6093      	str	r3, [r2, #8]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	5fffffc0 	.word	0x5fffffc0

08001990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a4:	d101      	bne.n	80019aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <LL_ADC_EnableInternalRegulator+0x24>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	6fffffc0 	.word	0x6fffffc0

080019e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019f4:	d101      	bne.n	80019fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <LL_ADC_Enable+0x24>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	7fffffc0 	.word	0x7fffffc0

08001a30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <LL_ADC_IsEnabled+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_ADC_IsEnabled+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_ADC_REG_StartConversion+0x24>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	7fffffc0 	.word	0x7fffffc0

08001a80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d101      	bne.n	8001a98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1ee      	b.n	8001ec4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff f9a1 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff3f 	bl	8001990 <LL_ADC_IsDeepPowerDownEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff25 	bl	800196c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff5a 	bl	80019e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d114      	bne.n	8001b5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff3e 	bl	80019b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b3c:	4b8e      	ldr	r3, [pc, #568]	; (8001d78 <HAL_ADC_Init+0x2ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	4a8e      	ldr	r2, [pc, #568]	; (8001d7c <HAL_ADC_Init+0x2b0>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b4e:	e002      	b.n	8001b56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff3d 	bl	80019e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff77 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 8001b92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 8188 	bne.w	8001eb2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8184 	bne.w	8001eb2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff36 	bl	8001a30 <LL_ADC_IsEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d136      	bne.n	8001c38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_ADC_Init+0x2b4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_ADC_Init+0x112>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	; (8001d84 <HAL_ADC_Init+0x2b8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10e      	bne.n	8001bfc <HAL_ADC_Init+0x130>
 8001bde:	4868      	ldr	r0, [pc, #416]	; (8001d80 <HAL_ADC_Init+0x2b4>)
 8001be0:	f7ff ff26 	bl	8001a30 <LL_ADC_IsEnabled>
 8001be4:	4604      	mov	r4, r0
 8001be6:	4867      	ldr	r0, [pc, #412]	; (8001d84 <HAL_ADC_Init+0x2b8>)
 8001be8:	f7ff ff22 	bl	8001a30 <LL_ADC_IsEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e008      	b.n	8001c0e <HAL_ADC_Init+0x142>
 8001bfc:	4862      	ldr	r0, [pc, #392]	; (8001d88 <HAL_ADC_Init+0x2bc>)
 8001bfe:	f7ff ff17 	bl	8001a30 <LL_ADC_IsEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <HAL_ADC_Init+0x2b4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_Init+0x15a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_ADC_Init+0x2b8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x15e>
 8001c26:	4a59      	ldr	r2, [pc, #356]	; (8001d8c <HAL_ADC_Init+0x2c0>)
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_Init+0x160>
 8001c2a:	4a59      	ldr	r2, [pc, #356]	; (8001d90 <HAL_ADC_Init+0x2c4>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f7ff fc5e 	bl	80014f4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_ADC_Init+0x2bc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d129      	bne.n	8001c96 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7e5b      	ldrb	r3, [r3, #25]
 8001c46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c4c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001c52:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d013      	beq.n	8001c84 <HAL_ADC_Init+0x1b8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d00d      	beq.n	8001c80 <HAL_ADC_Init+0x1b4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b1c      	cmp	r3, #28
 8001c6a:	d007      	beq.n	8001c7c <HAL_ADC_Init+0x1b0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b18      	cmp	r3, #24
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_Init+0x1ac>
 8001c74:	2318      	movs	r3, #24
 8001c76:	e006      	b.n	8001c86 <HAL_ADC_Init+0x1ba>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e004      	b.n	8001c86 <HAL_ADC_Init+0x1ba>
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	e002      	b.n	8001c86 <HAL_ADC_Init+0x1ba>
 8001c80:	2308      	movs	r3, #8
 8001c82:	e000      	b.n	8001c86 <HAL_ADC_Init+0x1ba>
 8001c84:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001c86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e00e      	b.n	8001cb4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7e5b      	ldrb	r3, [r3, #25]
 8001c9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ca0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ca6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d106      	bne.n	8001ccc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	045b      	lsls	r3, r3, #17
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a26      	ldr	r2, [pc, #152]	; (8001d88 <HAL_ADC_Init+0x2bc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d115      	bne.n	8001d1e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_ADC_Init+0x2c8>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	69b9      	ldr	r1, [r7, #24]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	e009      	b.n	8001d32 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_ADC_Init+0x2cc>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	69b9      	ldr	r1, [r7, #24]
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fea2 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 8001d3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff feaf 	bl	8001aa6 <LL_ADC_INJ_IsConversionOngoing>
 8001d48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 808e 	bne.w	8001e6e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 808a 	bne.w	8001e6e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_ADC_Init+0x2bc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d11b      	bne.n	8001d9c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d70:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e018      	b.n	8001daa <HAL_ADC_Init+0x2de>
 8001d78:	24000010 	.word	0x24000010
 8001d7c:	053e2d63 	.word	0x053e2d63
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022100 	.word	0x40022100
 8001d88:	58026000 	.word	0x58026000
 8001d8c:	40022300 	.word	0x40022300
 8001d90:	58026300 	.word	0x58026300
 8001d94:	fff04007 	.word	0xfff04007
 8001d98:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e1b      	ldrb	r3, [r3, #24]
 8001da0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_ADC_Init+0x400>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	69b9      	ldr	r1, [r7, #24]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d137      	bne.n	8001e38 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	; (8001ed0 <HAL_ADC_Init+0x404>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d116      	bne.n	8001e06 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_ADC_Init+0x408>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001df6:	430a      	orrs	r2, r1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	e020      	b.n	8001e48 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <HAL_ADC_Init+0x40c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e14:	3a01      	subs	r2, #1
 8001e16:	0411      	lsls	r1, r2, #16
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	e007      	b.n	8001e48 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <HAL_ADC_Init+0x404>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d002      	beq.n	8001e6e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f001 f9b5 	bl	80031d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10c      	bne.n	8001e90 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f023 010f 	bic.w	r1, r3, #15
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8e:	e007      	b.n	8001ea0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 020f 	bic.w	r2, r2, #15
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	f023 0303 	bic.w	r3, r3, #3
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	661a      	str	r2, [r3, #96]	; 0x60
 8001eb0:	e007      	b.n	8001ec2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	f043 0210 	orr.w	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	ffffbffc 	.word	0xffffbffc
 8001ed0:	58026000 	.word	0x58026000
 8001ed4:	fc00f81f 	.word	0xfc00f81f
 8001ed8:	fc00f81e 	.word	0xfc00f81e

08001edc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a60      	ldr	r2, [pc, #384]	; (8002070 <HAL_ADC_Start_DMA+0x194>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d004      	beq.n	8001efc <HAL_ADC_Start_DMA+0x20>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5f      	ldr	r2, [pc, #380]	; (8002074 <HAL_ADC_Start_DMA+0x198>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_Start_DMA+0x24>
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_ADC_Start_DMA+0x19c>)
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_Start_DMA+0x26>
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_ADC_Start_DMA+0x1a0>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd16 	bl	8001934 <LL_ADC_GetMultimode>
 8001f08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fdb6 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80a2 	bne.w	8002060 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Start_DMA+0x4e>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e09d      	b.n	8002066 <HAL_ADC_Start_DMA+0x18a>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	f040 8086 	bne.w	8002052 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f001 f828 	bl	8002f9c <ADC_Enable>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d178      	bne.n	8002048 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <HAL_ADC_Start_DMA+0x1a4>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_ADC_Start_DMA+0x198>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_Start_DMA+0x9a>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Start_DMA+0x9c>
 8001f76:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_ADC_Start_DMA+0x194>)
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa2:	f023 0206 	bic.w	r2, r3, #6
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	665a      	str	r2, [r3, #100]	; 0x64
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a33      	ldr	r2, [pc, #204]	; (8002084 <HAL_ADC_Start_DMA+0x1a8>)
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a32      	ldr	r2, [pc, #200]	; (8002088 <HAL_ADC_Start_DMA+0x1ac>)
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	4a31      	ldr	r2, [pc, #196]	; (800208c <HAL_ADC_Start_DMA+0x1b0>)
 8001fc8:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	221c      	movs	r2, #28
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0210 	orr.w	r2, r2, #16
 8001fe8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_ADC_Start_DMA+0x1b4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d10f      	bne.n	8002014 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f7ff fbfe 	bl	8001804 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fbe9 	bl	80017e4 <LL_ADC_EnableDMAReq>
 8002012:	e007      	b.n	8002024 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f7ff fbcd 	bl	80017be <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3340      	adds	r3, #64	; 0x40
 800202e:	4619      	mov	r1, r3
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f001 fe58 	bl	8003ce8 <HAL_DMA_Start_IT>
 8002038:	4603      	mov	r3, r0
 800203a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fd09 	bl	8001a58 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002046:	e00d      	b.n	8002064 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8002050:	e008      	b.n	8002064 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800205e:	e001      	b.n	8002064 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002060:	2302      	movs	r3, #2
 8002062:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002064:	7dfb      	ldrb	r3, [r7, #23]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40022100 	.word	0x40022100
 8002078:	40022300 	.word	0x40022300
 800207c:	58026300 	.word	0x58026300
 8002080:	fffff0fe 	.word	0xfffff0fe
 8002084:	080030b1 	.word	0x080030b1
 8002088:	08003189 	.word	0x08003189
 800208c:	080031a5 	.word	0x080031a5
 8002090:	58026000 	.word	0x58026000

08002094 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a87      	ldr	r2, [pc, #540]	; (80022d4 <HAL_ADC_IRQHandler+0x240>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x30>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a86      	ldr	r2, [pc, #536]	; (80022d8 <HAL_ADC_IRQHandler+0x244>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_IRQHandler+0x34>
 80020c4:	4b85      	ldr	r3, [pc, #532]	; (80022dc <HAL_ADC_IRQHandler+0x248>)
 80020c6:	e000      	b.n	80020ca <HAL_ADC_IRQHandler+0x36>
 80020c8:	4b85      	ldr	r3, [pc, #532]	; (80022e0 <HAL_ADC_IRQHandler+0x24c>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fc32 	bl	8001934 <LL_ADC_GetMultimode>
 80020d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d017      	beq.n	800210c <HAL_ADC_IRQHandler+0x78>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f001 f97e 	bl	8003400 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2202      	movs	r2, #2
 800210a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_ADC_IRQHandler+0x8c>
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8083 	beq.w	8002232 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07d      	beq.n	8002232 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff faf4 	bl	8001740 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d062      	beq.n	8002224 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_ADC_IRQHandler+0x244>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d002      	beq.n	800216e <HAL_ADC_IRQHandler+0xda>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e000      	b.n	8002170 <HAL_ADC_IRQHandler+0xdc>
 800216e:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <HAL_ADC_IRQHandler+0x240>)
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	4293      	cmp	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d002      	beq.n	800218a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d104      	bne.n	8002194 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	e00c      	b.n	80021ae <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4f      	ldr	r2, [pc, #316]	; (80022d8 <HAL_ADC_IRQHandler+0x244>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d002      	beq.n	80021a4 <HAL_ADC_IRQHandler+0x110>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	e000      	b.n	80021a6 <HAL_ADC_IRQHandler+0x112>
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_ADC_IRQHandler+0x240>)
 80021a6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d135      	bne.n	8002224 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d12e      	bne.n	8002224 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fc58 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11a      	bne.n	800220c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 020c 	bic.w	r2, r2, #12
 80021e4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d112      	bne.n	8002224 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
 800220a:	e00b      	b.n	8002224 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7fe fa59 	bl	80006dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_ADC_IRQHandler+0x1b2>
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10b      	bne.n	800225e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a0 	beq.w	8002392 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 809a 	beq.w	8002392 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fadc 	bl	8001838 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002280:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fa5a 	bl	8001740 <LL_ADC_REG_IsTriggerSourceSWStart>
 800228c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_ADC_IRQHandler+0x244>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d002      	beq.n	800229e <HAL_ADC_IRQHandler+0x20a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	e000      	b.n	80022a0 <HAL_ADC_IRQHandler+0x20c>
 800229e:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_ADC_IRQHandler+0x240>)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d008      	beq.n	80022ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d002      	beq.n	80022ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	d104      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	e014      	b.n	80022ee <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_ADC_IRQHandler+0x244>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00a      	beq.n	80022e4 <HAL_ADC_IRQHandler+0x250>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	e008      	b.n	80022e6 <HAL_ADC_IRQHandler+0x252>
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40022100 	.word	0x40022100
 80022dc:	40022300 	.word	0x40022300
 80022e0:	58026300 	.word	0x58026300
 80022e4:	4b84      	ldr	r3, [pc, #528]	; (80024f8 <HAL_ADC_IRQHandler+0x464>)
 80022e6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10c      	bne.n	800230e <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d142      	bne.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d03f      	beq.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d13a      	bne.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d133      	bne.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d12e      	bne.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fbbb 	bl	8001aa6 <LL_ADC_INJ_IsConversionOngoing>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11a      	bne.n	800236c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002344:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d112      	bne.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	661a      	str	r2, [r3, #96]	; 0x60
 800236a:	e00b      	b.n	8002384 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	f043 0210 	orr.w	r2, r3, #16
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f001 f813 	bl	80033b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2260      	movs	r2, #96	; 0x60
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b00      	cmp	r3, #0
 800239a:	d011      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x32c>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00c      	beq.n	80023c0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8b2 	bl	800251c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x35c>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fff9 	bl	80033d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_ADC_IRQHandler+0x38c>
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 ffeb 	bl	80033ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d043      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x41e>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03e      	beq.n	80024b2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	e021      	b.n	8002486 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <HAL_ADC_IRQHandler+0x464>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_ADC_IRQHandler+0x3c8>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_ADC_IRQHandler+0x468>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_ADC_IRQHandler+0x3cc>
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_ADC_IRQHandler+0x46c>)
 800245e:	e000      	b.n	8002462 <HAL_ADC_IRQHandler+0x3ce>
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_ADC_IRQHandler+0x470>)
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fa74 	bl	8001950 <LL_ADC_GetMultiDMATransfer>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800246e:	2301      	movs	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e008      	b.n	8002486 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002482:	2301      	movs	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10e      	bne.n	80024aa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800249c:	f043 0202 	orr.w	r2, r3, #2
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f843 	bl	8002530 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2210      	movs	r2, #16
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <HAL_ADC_IRQHandler+0x45a>
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d013      	beq.n	80024ee <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d6:	f043 0208 	orr.w	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 ff6b 	bl	80033c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000
 80024fc:	40022100 	.word	0x40022100
 8002500:	40022300 	.word	0x40022300
 8002504:	58026300 	.word	0x58026300

08002508 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b0b9      	sub	sp, #228	; 0xe4
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800255e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4ab3      	ldr	r2, [pc, #716]	; (8002834 <HAL_ADC_ConfigChannel+0x2f0>)
 8002566:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x34>
 8002572:	2302      	movs	r3, #2
 8002574:	f000 bcfa 	b.w	8002f6c <HAL_ADC_ConfigChannel+0xa28>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fa7b 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 84de 	bne.w	8002f4e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4aa8      	ldr	r2, [pc, #672]	; (8002838 <HAL_ADC_ConfigChannel+0x2f4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d033      	beq.n	8002604 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d108      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x76>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2201      	movs	r2, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	e01d      	b.n	80025f6 <HAL_ADC_ConfigChannel+0xb2>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e004      	b.n	80025ec <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80025e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2201      	movs	r2, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	69d1      	ldr	r1, [r2, #28]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff f8a8 	bl	8001766 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fa30 	bl	8001a80 <LL_ADC_REG_IsConversionOngoing>
 8002620:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fa3c 	bl	8001aa6 <LL_ADC_INJ_IsConversionOngoing>
 800262e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8270 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800263c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 826b 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff f903 	bl	800185e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a76      	ldr	r2, [pc, #472]	; (8002838 <HAL_ADC_ConfigChannel+0x2f4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10d      	bne.n	800267e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800267c:	e032      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_ADC_ConfigChannel+0x2f8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x160>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	e01d      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x19c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x186>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	e00a      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x19c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d048      	beq.n	800277e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026fc:	f7fe ff2e 	bl	800155c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <HAL_ADC_ConfigChannel+0x2f4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d119      	bne.n	800273e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	461a      	mov	r2, r3
 8002718:	f7fe ffc6 	bl	80016a8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1f0>
 800272e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002732:	e000      	b.n	8002736 <HAL_ADC_ConfigChannel+0x1f2>
 8002734:	2300      	movs	r3, #0
 8002736:	461a      	mov	r2, r3
 8002738:	f7fe ff94 	bl	8001664 <LL_ADC_SetOffsetSaturation>
 800273c:	e1ee      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274c:	2b01      	cmp	r3, #1
 800274e:	d102      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x212>
 8002750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x214>
 8002756:	2300      	movs	r3, #0
 8002758:	461a      	mov	r2, r3
 800275a:	f7fe ff61 	bl	8001620 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7e1b      	ldrb	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x230>
 800276e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002772:	e000      	b.n	8002776 <HAL_ADC_ConfigChannel+0x232>
 8002774:	2300      	movs	r3, #0
 8002776:	461a      	mov	r2, r3
 8002778:	f7fe ff38 	bl	80015ec <LL_ADC_SetDataRightShift>
 800277c:	e1ce      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_ADC_ConfigChannel+0x2f4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	f040 8181 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe ff15 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x272>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ff0a 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	e01e      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x2b0>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe feff 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80027d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80027dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e004      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80027e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2c8>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	e01e      	b.n	800284a <HAL_ADC_ConfigChannel+0x306>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	e00a      	b.n	800284a <HAL_ADC_ConfigChannel+0x306>
 8002834:	47ff0000 	.word	0x47ff0000
 8002838:	58026000 	.word	0x58026000
 800283c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	429a      	cmp	r2, r3
 800284c:	d106      	bne.n	800285c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ff48 	bl	80016ec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe feac 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x344>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fea1 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 021f 	and.w	r2, r3, #31
 8002886:	e01e      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x382>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fe96 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80028a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80028ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80028ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_ADC_ConfigChannel+0x39a>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	e018      	b.n	8002910 <HAL_ADC_ConfigChannel+0x3cc>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e004      	b.n	8002910 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fee5 	bl	80016ec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2102      	movs	r1, #2
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fe49 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <HAL_ADC_ConfigChannel+0x40a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2102      	movs	r1, #2
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fe3e 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	0e9b      	lsrs	r3, r3, #26
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	e01e      	b.n	800298c <HAL_ADC_ConfigChannel+0x448>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fe33 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800296c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002974:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e004      	b.n	800298a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x460>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0e9b      	lsrs	r3, r3, #26
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	e014      	b.n	80029ce <HAL_ADC_ConfigChannel+0x48a>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80029b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80029b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e004      	b.n	80029ce <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80029c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d106      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fe86 	bl	80016ec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2103      	movs	r1, #3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fdea 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x4c8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2103      	movs	r1, #3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fddf 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	e017      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x4f8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2103      	movs	r1, #3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fdd4 	bl	80015c0 <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x510>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	e011      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x534>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002a6c:	2320      	movs	r3, #32
 8002a6e:	e003      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d14f      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2103      	movs	r1, #3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fe31 	bl	80016ec <LL_ADC_SetOffsetState>
 8002a8a:	e047      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	069b      	lsls	r3, r3, #26
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b1a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff85 	bl	8001a30 <LL_ADC_IsEnabled>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8219 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f7fe feba 	bl	80018b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4aa1      	ldr	r2, [pc, #644]	; (8002dcc <HAL_ADC_ConfigChannel+0x888>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	f040 812e 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x630>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	bf94      	ite	ls
 8002b6c:	2301      	movls	r3, #1
 8002b6e:	2300      	movhi	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e019      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x664>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2b09      	cmp	r3, #9
 8002ba0:	bf94      	ite	ls
 8002ba2:	2301      	movls	r3, #1
 8002ba4:	2300      	movhi	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d079      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x684>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	069b      	lsls	r3, r3, #26
 8002bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bc6:	e015      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x6b0>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x6d0>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	3301      	adds	r3, #1
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	e017      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x700>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x726>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	e018      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x758>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e003      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	e07e      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x778>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	069b      	lsls	r3, r3, #26
 8002cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cba:	e015      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x7a4>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e003      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x7c4>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	e017      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x7f4>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	61bb      	str	r3, [r7, #24]
  return result;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	ea42 0103 	orr.w	r1, r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x820>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f003 021f 	and.w	r2, r3, #31
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b1e      	subs	r3, #30
 8002d5c:	051b      	lsls	r3, r3, #20
 8002d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d62:	e01b      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x858>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
  return result;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	3b1e      	subs	r3, #30
 8002d96:	051b      	lsls	r3, r3, #20
 8002d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	4619      	mov	r1, r3
 8002da4:	f7fe fd5b 	bl	800185e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f280 80d7 	bge.w	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <HAL_ADC_ConfigChannel+0x88c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x882>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <HAL_ADC_ConfigChannel+0x890>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x898>
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HAL_ADC_ConfigChannel+0x894>)
 8002dc8:	e009      	b.n	8002dde <HAL_ADC_ConfigChannel+0x89a>
 8002dca:	bf00      	nop
 8002dcc:	47ff0000 	.word	0x47ff0000
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40022100 	.word	0x40022100
 8002dd8:	40022300 	.word	0x40022300
 8002ddc:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <HAL_ADC_ConfigChannel+0xa30>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fbae 	bl	8001540 <LL_ADC_GetCommonPathInternalCh>
 8002de4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a62      	ldr	r2, [pc, #392]	; (8002f78 <HAL_ADC_ConfigChannel+0xa34>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x8b8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a61      	ldr	r2, [pc, #388]	; (8002f7c <HAL_ADC_ConfigChannel+0xa38>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10e      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x8d6>
 8002dfc:	485e      	ldr	r0, [pc, #376]	; (8002f78 <HAL_ADC_ConfigChannel+0xa34>)
 8002dfe:	f7fe fe17 	bl	8001a30 <LL_ADC_IsEnabled>
 8002e02:	4604      	mov	r4, r0
 8002e04:	485d      	ldr	r0, [pc, #372]	; (8002f7c <HAL_ADC_ConfigChannel+0xa38>)
 8002e06:	f7fe fe13 	bl	8001a30 <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4323      	orrs	r3, r4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e008      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x8e8>
 8002e1a:	4859      	ldr	r0, [pc, #356]	; (8002f80 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e1c:	f7fe fe08 	bl	8001a30 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8084 	beq.w	8002f3a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_ADC_ConfigChannel+0xa40>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d132      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x95e>
 8002e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d12c      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	f040 8086 	bne.w	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_ADC_ConfigChannel+0xa34>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x924>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_ADC_ConfigChannel+0xa38>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x928>
 8002e68:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_ADC_ConfigChannel+0xa44>)
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x92a>
 8002e6c:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <HAL_ADC_ConfigChannel+0xa30>)
 8002e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fb4e 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_ADC_ConfigChannel+0xa48>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	4a42      	ldr	r2, [pc, #264]	; (8002f90 <HAL_ADC_ConfigChannel+0xa4c>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e92:	e002      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f9      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ea0:	e05e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a3b      	ldr	r2, [pc, #236]	; (8002f94 <HAL_ADC_ConfigChannel+0xa50>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d120      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x9aa>
 8002eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d11a      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a30      	ldr	r2, [pc, #192]	; (8002f80 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d14e      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <HAL_ADC_ConfigChannel+0xa34>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x992>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_ADC_ConfigChannel+0xa38>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x996>
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <HAL_ADC_ConfigChannel+0xa44>)
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x998>
 8002eda:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_ADC_ConfigChannel+0xa30>)
 8002edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f7fe fb17 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eec:	e038      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a29      	ldr	r2, [pc, #164]	; (8002f98 <HAL_ADC_ConfigChannel+0xa54>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d133      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
 8002ef8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d12d      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_ADC_ConfigChannel+0xa3c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d128      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_ADC_ConfigChannel+0xa34>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x9de>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <HAL_ADC_ConfigChannel+0xa38>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x9e2>
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_ADC_ConfigChannel+0xa44>)
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x9e4>
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <HAL_ADC_ConfigChannel+0xa30>)
 8002f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe faf1 	bl	800151a <LL_ADC_SetCommonPathInternalCh>
 8002f38:	e012      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002f4c:	e008      	b.n	8002f60 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002f68:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	37e4      	adds	r7, #228	; 0xe4
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	58026300 	.word	0x58026300
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40022100 	.word	0x40022100
 8002f80:	58026000 	.word	0x58026000
 8002f84:	c7520000 	.word	0xc7520000
 8002f88:	40022300 	.word	0x40022300
 8002f8c:	24000010 	.word	0x24000010
 8002f90:	053e2d63 	.word	0x053e2d63
 8002f94:	c3210000 	.word	0xc3210000
 8002f98:	cb840000 	.word	0xcb840000

08002f9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fd41 	bl	8001a30 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d16e      	bne.n	8003092 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <ADC_Enable+0x100>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f043 0210 	orr.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e05a      	b.n	8003094 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fd10 	bl	8001a08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fa62 	bl	80014b0 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	; (80030a0 <ADC_Enable+0x104>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <ADC_Enable+0x66>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <ADC_Enable+0x108>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <ADC_Enable+0x6a>
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <ADC_Enable+0x10c>)
 8003004:	e000      	b.n	8003008 <ADC_Enable+0x6c>
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <ADC_Enable+0x110>)
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fc93 	bl	8001934 <LL_ADC_GetMultimode>
 800300e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <ADC_Enable+0x108>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d002      	beq.n	8003020 <ADC_Enable+0x84>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	e000      	b.n	8003022 <ADC_Enable+0x86>
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <ADC_Enable+0x104>)
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	4293      	cmp	r3, r2
 8003028:	d02c      	beq.n	8003084 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d130      	bne.n	8003092 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003030:	e028      	b.n	8003084 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fcfa 	bl	8001a30 <LL_ADC_IsEnabled>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fcde 	bl	8001a08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304c:	f7fe fa30 	bl	80014b0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d914      	bls.n	8003084 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d00d      	beq.n	8003084 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1cf      	bne.n	8003032 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	8000003f 	.word	0x8000003f
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40022100 	.word	0x40022100
 80030a8:	40022300 	.word	0x40022300
 80030ac:	58026300 	.word	0x58026300

080030b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d14b      	bne.n	8003162 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d021      	beq.n	8003128 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fb29 	bl	8001740 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d032      	beq.n	800315a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d12b      	bne.n	800315a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d11f      	bne.n	800315a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	661a      	str	r2, [r3, #96]	; 0x60
 8003126:	e018      	b.n	800315a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d111      	bne.n	800315a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003152:	f043 0201 	orr.w	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7fd fabe 	bl	80006dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003160:	e00e      	b.n	8003180 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff f9de 	bl	8002530 <HAL_ADC_ErrorCallback>
}
 8003174:	e004      	b.n	8003180 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003194:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff f9b6 	bl	8002508 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff f9b0 	bl	8002530 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6b      	ldr	r2, [pc, #428]	; (8003394 <ADC_ConfigureBoostMode+0x1bc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <ADC_ConfigureBoostMode+0x1c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <ADC_ConfigureBoostMode+0x1c0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <ADC_ConfigureBoostMode+0x30>
 80031f4:	4b69      	ldr	r3, [pc, #420]	; (800339c <ADC_ConfigureBoostMode+0x1c4>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <ADC_ConfigureBoostMode+0x42>
 8003208:	4b65      	ldr	r3, [pc, #404]	; (80033a0 <ADC_ConfigureBoostMode+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01c      	beq.n	8003258 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800321e:	f004 f8fb 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8003222:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800322c:	d010      	beq.n	8003250 <ADC_ConfigureBoostMode+0x78>
 800322e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003232:	d871      	bhi.n	8003318 <ADC_ConfigureBoostMode+0x140>
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d002      	beq.n	8003240 <ADC_ConfigureBoostMode+0x68>
 800323a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800323e:	d16b      	bne.n	8003318 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	60fb      	str	r3, [r7, #12]
        break;
 800324e:	e066      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e062      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003258:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800325c:	f005 f832 	bl	80082c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003260:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800326a:	d051      	beq.n	8003310 <ADC_ConfigureBoostMode+0x138>
 800326c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003270:	d854      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 8003272:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003276:	d047      	beq.n	8003308 <ADC_ConfigureBoostMode+0x130>
 8003278:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800327c:	d84e      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 800327e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003282:	d03d      	beq.n	8003300 <ADC_ConfigureBoostMode+0x128>
 8003284:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003288:	d848      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 800328a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800328e:	d033      	beq.n	80032f8 <ADC_ConfigureBoostMode+0x120>
 8003290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003294:	d842      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 8003296:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800329a:	d029      	beq.n	80032f0 <ADC_ConfigureBoostMode+0x118>
 800329c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032a0:	d83c      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 80032a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032a6:	d01a      	beq.n	80032de <ADC_ConfigureBoostMode+0x106>
 80032a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032ac:	d836      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 80032ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032b2:	d014      	beq.n	80032de <ADC_ConfigureBoostMode+0x106>
 80032b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032b8:	d830      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032be:	d00e      	beq.n	80032de <ADC_ConfigureBoostMode+0x106>
 80032c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c4:	d82a      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 80032c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032ca:	d008      	beq.n	80032de <ADC_ConfigureBoostMode+0x106>
 80032cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032d0:	d824      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 80032d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d6:	d002      	beq.n	80032de <ADC_ConfigureBoostMode+0x106>
 80032d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032dc:	d11e      	bne.n	800331c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	60fb      	str	r3, [r7, #12]
        break;
 80032ee:	e016      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
        break;
 80032f6:	e012      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	60fb      	str	r3, [r7, #12]
        break;
 80032fe:	e00e      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	60fb      	str	r3, [r7, #12]
        break;
 8003306:	e00a      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	09db      	lsrs	r3, r3, #7
 800330c:	60fb      	str	r3, [r7, #12]
        break;
 800330e:	e006      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	60fb      	str	r3, [r7, #12]
        break;
 8003316:	e002      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
        break;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800331c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <ADC_ConfigureBoostMode+0x1cc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d808      	bhi.n	800333e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800333a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800333c:	e025      	b.n	800338a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <ADC_ConfigureBoostMode+0x1d0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d80a      	bhi.n	800335c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003358:	609a      	str	r2, [r3, #8]
}
 800335a:	e016      	b.n	800338a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <ADC_ConfigureBoostMode+0x1d4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d80a      	bhi.n	800337a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	e007      	b.n	800338a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000
 8003398:	40022100 	.word	0x40022100
 800339c:	40022300 	.word	0x40022300
 80033a0:	58026300 	.word	0x58026300
 80033a4:	005f5e10 	.word	0x005f5e10
 80033a8:	00bebc20 	.word	0x00bebc20
 80033ac:	017d7840 	.word	0x017d7840

080033b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <__NVIC_SetPriorityGrouping>:
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <__NVIC_SetPriorityGrouping+0x40>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003430:	4013      	ands	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003442:	4a04      	ldr	r2, [pc, #16]	; (8003454 <__NVIC_SetPriorityGrouping+0x40>)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	60d3      	str	r3, [r2, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	05fa0000 	.word	0x05fa0000

0800345c <__NVIC_GetPriorityGrouping>:
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <__NVIC_GetPriorityGrouping+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0307 	and.w	r3, r3, #7
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <__NVIC_EnableIRQ>:
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0b      	blt.n	80034a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4907      	ldr	r1, [pc, #28]	; (80034b0 <__NVIC_EnableIRQ+0x38>)
 8003492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	; (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	; (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	; 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003580:	d301      	bcc.n	8003586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003582:	2301      	movs	r3, #1
 8003584:	e00f      	b.n	80035a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <SysTick_Config+0x40>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358e:	210f      	movs	r1, #15
 8003590:	f04f 30ff 	mov.w	r0, #4294967295
 8003594:	f7ff ff8e 	bl	80034b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <SysTick_Config+0x40>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <SysTick_Config+0x40>)
 80035a0:	2207      	movs	r2, #7
 80035a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	e000e010 	.word	0xe000e010

080035b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff29 	bl	8003414 <__NVIC_SetPriorityGrouping>
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff40 	bl	800345c <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff90 	bl	8003508 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5f 	bl	80034b4 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff33 	bl	8003478 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffa4 	bl	8003570 <SysTick_Config>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7fd ff38 	bl	80014b0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e314      	b.n	8003c76 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a66      	ldr	r2, [pc, #408]	; (80037ec <HAL_DMA_Init+0x1b8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <HAL_DMA_Init+0x1bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a63      	ldr	r2, [pc, #396]	; (80037f4 <HAL_DMA_Init+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <HAL_DMA_Init+0x1c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a60      	ldr	r2, [pc, #384]	; (80037fc <HAL_DMA_Init+0x1c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5f      	ldr	r2, [pc, #380]	; (8003800 <HAL_DMA_Init+0x1cc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <HAL_DMA_Init+0x1d0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a5c      	ldr	r2, [pc, #368]	; (8003808 <HAL_DMA_Init+0x1d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_DMA_Init+0x1d8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a59      	ldr	r2, [pc, #356]	; (8003810 <HAL_DMA_Init+0x1dc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a57      	ldr	r2, [pc, #348]	; (8003814 <HAL_DMA_Init+0x1e0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a56      	ldr	r2, [pc, #344]	; (8003818 <HAL_DMA_Init+0x1e4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <HAL_DMA_Init+0x1e8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a53      	ldr	r2, [pc, #332]	; (8003820 <HAL_DMA_Init+0x1ec>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a51      	ldr	r2, [pc, #324]	; (8003824 <HAL_DMA_Init+0x1f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Init+0xb8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a50      	ldr	r2, [pc, #320]	; (8003828 <HAL_DMA_Init+0x1f4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Init+0xbc>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_Init+0xbe>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 813c 	beq.w	8003970 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a37      	ldr	r2, [pc, #220]	; (80037ec <HAL_DMA_Init+0x1b8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a36      	ldr	r2, [pc, #216]	; (80037f0 <HAL_DMA_Init+0x1bc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <HAL_DMA_Init+0x1c0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a33      	ldr	r2, [pc, #204]	; (80037f8 <HAL_DMA_Init+0x1c4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a31      	ldr	r2, [pc, #196]	; (80037fc <HAL_DMA_Init+0x1c8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a30      	ldr	r2, [pc, #192]	; (8003800 <HAL_DMA_Init+0x1cc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <HAL_DMA_Init+0x1d0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <HAL_DMA_Init+0x1d4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2b      	ldr	r2, [pc, #172]	; (800380c <HAL_DMA_Init+0x1d8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2a      	ldr	r2, [pc, #168]	; (8003810 <HAL_DMA_Init+0x1dc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <HAL_DMA_Init+0x1e0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_DMA_Init+0x1e4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_DMA_Init+0x1e8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_DMA_Init+0x1ec>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_DMA_Init+0x1f0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_Init+0x174>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_DMA_Init+0x1f4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <HAL_DMA_Init+0x186>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_DMA_Init+0x196>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037ca:	e02f      	b.n	800382c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037cc:	f7fd fe70 	bl	80014b0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b05      	cmp	r3, #5
 80037d8:	d928      	bls.n	800382c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e244      	b.n	8003c76 <HAL_DMA_Init+0x642>
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1c8      	bne.n	80037cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <HAL_DMA_Init+0x424>)
 8003846:	4013      	ands	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003852:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4313      	orrs	r3, r2
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b28      	cmp	r3, #40	; 0x28
 8003896:	d903      	bls.n	80038a0 <HAL_DMA_Init+0x26c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b2e      	cmp	r3, #46	; 0x2e
 800389e:	d91f      	bls.n	80038e0 <HAL_DMA_Init+0x2ac>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b3e      	cmp	r3, #62	; 0x3e
 80038a6:	d903      	bls.n	80038b0 <HAL_DMA_Init+0x27c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b42      	cmp	r3, #66	; 0x42
 80038ae:	d917      	bls.n	80038e0 <HAL_DMA_Init+0x2ac>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b46      	cmp	r3, #70	; 0x46
 80038b6:	d903      	bls.n	80038c0 <HAL_DMA_Init+0x28c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b48      	cmp	r3, #72	; 0x48
 80038be:	d90f      	bls.n	80038e0 <HAL_DMA_Init+0x2ac>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b4e      	cmp	r3, #78	; 0x4e
 80038c6:	d903      	bls.n	80038d0 <HAL_DMA_Init+0x29c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b52      	cmp	r3, #82	; 0x52
 80038ce:	d907      	bls.n	80038e0 <HAL_DMA_Init+0x2ac>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b73      	cmp	r3, #115	; 0x73
 80038d6:	d905      	bls.n	80038e4 <HAL_DMA_Init+0x2b0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b77      	cmp	r3, #119	; 0x77
 80038de:	d801      	bhi.n	80038e4 <HAL_DMA_Init+0x2b0>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_DMA_Init+0x2b2>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0307 	bic.w	r3, r3, #7
 8003908:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d117      	bne.n	800394c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00e      	beq.n	800394c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f002 fb2e 	bl	8005f90 <DMA_CheckFifoParam>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e194      	b.n	8003c76 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f002 fa69 	bl	8005e2c <DMA_CalcBaseAndBitshift>
 800395a:	4603      	mov	r3, r0
 800395c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	223f      	movs	r2, #63	; 0x3f
 8003968:	409a      	lsls	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	e0ca      	b.n	8003b06 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_DMA_Init+0x428>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_DMA_Init+0x42c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_DMA_Init+0x430>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_DMA_Init+0x434>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_DMA_Init+0x438>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a32      	ldr	r2, [pc, #200]	; (8003a70 <HAL_DMA_Init+0x43c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_DMA_Init+0x440>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Init+0x38c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2f      	ldr	r2, [pc, #188]	; (8003a78 <HAL_DMA_Init+0x444>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Init+0x390>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_DMA_Init+0x392>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8094 	beq.w	8003af4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <HAL_DMA_Init+0x428>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d021      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a21      	ldr	r2, [pc, #132]	; (8003a60 <HAL_DMA_Init+0x42c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01c      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	; (8003a64 <HAL_DMA_Init+0x430>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_DMA_Init+0x434>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d012      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	; (8003a6c <HAL_DMA_Init+0x438>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_DMA_Init+0x43c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d008      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_DMA_Init+0x440>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <HAL_DMA_Init+0x3e6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	; (8003a78 <HAL_DMA_Init+0x444>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_DMA_Init+0x448>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d01d      	beq.n	8003a80 <HAL_DMA_Init+0x44c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b80      	cmp	r3, #128	; 0x80
 8003a4a:	d102      	bne.n	8003a52 <HAL_DMA_Init+0x41e>
 8003a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a50:	e017      	b.n	8003a82 <HAL_DMA_Init+0x44e>
 8003a52:	2300      	movs	r3, #0
 8003a54:	e015      	b.n	8003a82 <HAL_DMA_Init+0x44e>
 8003a56:	bf00      	nop
 8003a58:	fe10803f 	.word	0xfe10803f
 8003a5c:	58025408 	.word	0x58025408
 8003a60:	5802541c 	.word	0x5802541c
 8003a64:	58025430 	.word	0x58025430
 8003a68:	58025444 	.word	0x58025444
 8003a6c:	58025458 	.word	0x58025458
 8003a70:	5802546c 	.word	0x5802546c
 8003a74:	58025480 	.word	0x58025480
 8003a78:	58025494 	.word	0x58025494
 8003a7c:	fffe000f 	.word	0xfffe000f
 8003a80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003aa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003aa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ab0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_DMA_Init+0x64c>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a6e      	ldr	r2, [pc, #440]	; (8003c84 <HAL_DMA_Init+0x650>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f002 f9a7 	bl	8005e2c <DMA_CalcBaseAndBitshift>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e008      	b.n	8003b06 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0b7      	b.n	8003c76 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5f      	ldr	r2, [pc, #380]	; (8003c88 <HAL_DMA_Init+0x654>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d072      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5d      	ldr	r2, [pc, #372]	; (8003c8c <HAL_DMA_Init+0x658>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d06d      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_DMA_Init+0x65c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d068      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5a      	ldr	r2, [pc, #360]	; (8003c94 <HAL_DMA_Init+0x660>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d063      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a59      	ldr	r2, [pc, #356]	; (8003c98 <HAL_DMA_Init+0x664>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d05e      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a57      	ldr	r2, [pc, #348]	; (8003c9c <HAL_DMA_Init+0x668>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d059      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a56      	ldr	r2, [pc, #344]	; (8003ca0 <HAL_DMA_Init+0x66c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d054      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a54      	ldr	r2, [pc, #336]	; (8003ca4 <HAL_DMA_Init+0x670>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04f      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a53      	ldr	r2, [pc, #332]	; (8003ca8 <HAL_DMA_Init+0x674>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d04a      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a51      	ldr	r2, [pc, #324]	; (8003cac <HAL_DMA_Init+0x678>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d045      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a50      	ldr	r2, [pc, #320]	; (8003cb0 <HAL_DMA_Init+0x67c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d040      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <HAL_DMA_Init+0x680>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d03b      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a4d      	ldr	r2, [pc, #308]	; (8003cb8 <HAL_DMA_Init+0x684>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d036      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a4b      	ldr	r2, [pc, #300]	; (8003cbc <HAL_DMA_Init+0x688>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_DMA_Init+0x68c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d02c      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_DMA_Init+0x690>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_DMA_Init+0x694>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <HAL_DMA_Init+0x698>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_DMA_Init+0x69c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d018      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_DMA_Init+0x6a0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a41      	ldr	r2, [pc, #260]	; (8003cd8 <HAL_DMA_Init+0x6a4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <HAL_DMA_Init+0x6a8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <HAL_DMA_Init+0x6ac>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_DMA_Init+0x5c2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <HAL_DMA_Init+0x6b0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_DMA_Init+0x5c6>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_Init+0x5c8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d032      	beq.n	8003c66 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f002 fa41 	bl	8006088 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d102      	bne.n	8003c14 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_DMA_Init+0x620>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d80c      	bhi.n	8003c54 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f002 fabe 	bl	80061bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e008      	b.n	8003c66 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	a7fdabf8 	.word	0xa7fdabf8
 8003c84:	cccccccd 	.word	0xcccccccd
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028
 8003c90:	40020040 	.word	0x40020040
 8003c94:	40020058 	.word	0x40020058
 8003c98:	40020070 	.word	0x40020070
 8003c9c:	40020088 	.word	0x40020088
 8003ca0:	400200a0 	.word	0x400200a0
 8003ca4:	400200b8 	.word	0x400200b8
 8003ca8:	40020410 	.word	0x40020410
 8003cac:	40020428 	.word	0x40020428
 8003cb0:	40020440 	.word	0x40020440
 8003cb4:	40020458 	.word	0x40020458
 8003cb8:	40020470 	.word	0x40020470
 8003cbc:	40020488 	.word	0x40020488
 8003cc0:	400204a0 	.word	0x400204a0
 8003cc4:	400204b8 	.word	0x400204b8
 8003cc8:	58025408 	.word	0x58025408
 8003ccc:	5802541c 	.word	0x5802541c
 8003cd0:	58025430 	.word	0x58025430
 8003cd4:	58025444 	.word	0x58025444
 8003cd8:	58025458 	.word	0x58025458
 8003cdc:	5802546c 	.word	0x5802546c
 8003ce0:	58025480 	.word	0x58025480
 8003ce4:	58025494 	.word	0x58025494

08003ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e226      	b.n	8004152 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA_Start_IT+0x2a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e21f      	b.n	8004152 <HAL_DMA_Start_IT+0x46a>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	f040 820a 	bne.w	800413c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a68      	ldr	r2, [pc, #416]	; (8003edc <HAL_DMA_Start_IT+0x1f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d04a      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a66      	ldr	r2, [pc, #408]	; (8003ee0 <HAL_DMA_Start_IT+0x1f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d045      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a65      	ldr	r2, [pc, #404]	; (8003ee4 <HAL_DMA_Start_IT+0x1fc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d040      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a63      	ldr	r2, [pc, #396]	; (8003ee8 <HAL_DMA_Start_IT+0x200>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d03b      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a62      	ldr	r2, [pc, #392]	; (8003eec <HAL_DMA_Start_IT+0x204>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d036      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	; (8003ef0 <HAL_DMA_Start_IT+0x208>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	; (8003ef4 <HAL_DMA_Start_IT+0x20c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02c      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	; (8003ef8 <HAL_DMA_Start_IT+0x210>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d027      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	; (8003efc <HAL_DMA_Start_IT+0x214>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d022      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	; (8003f00 <HAL_DMA_Start_IT+0x218>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01d      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	; (8003f04 <HAL_DMA_Start_IT+0x21c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d018      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	; (8003f08 <HAL_DMA_Start_IT+0x220>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	; (8003f0c <HAL_DMA_Start_IT+0x224>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	; (8003f10 <HAL_DMA_Start_IT+0x228>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	; (8003f14 <HAL_DMA_Start_IT+0x22c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_DMA_Start_IT+0xee>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	; (8003f18 <HAL_DMA_Start_IT+0x230>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <HAL_DMA_Start_IT+0x100>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e007      	b.n	8003df8 <HAL_DMA_Start_IT+0x110>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f001 fe68 	bl	8005ad4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a34      	ldr	r2, [pc, #208]	; (8003edc <HAL_DMA_Start_IT+0x1f4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04a      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <HAL_DMA_Start_IT+0x1f8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d045      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_DMA_Start_IT+0x1fc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d040      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <HAL_DMA_Start_IT+0x200>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d03b      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <HAL_DMA_Start_IT+0x204>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d036      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_DMA_Start_IT+0x208>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_DMA_Start_IT+0x20c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02c      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_DMA_Start_IT+0x210>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d027      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_DMA_Start_IT+0x214>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_DMA_Start_IT+0x218>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01d      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_DMA_Start_IT+0x21c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_DMA_Start_IT+0x220>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_DMA_Start_IT+0x224>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_DMA_Start_IT+0x228>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_DMA_Start_IT+0x22c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Start_IT+0x1bc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_DMA_Start_IT+0x230>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_DMA_Start_IT+0x1c0>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_DMA_Start_IT+0x1c2>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 021e 	bic.w	r2, r3, #30
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0216 	orr.w	r2, r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d03e      	beq.n	8003f48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e035      	b.n	8003f48 <HAL_DMA_Start_IT+0x260>
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020e 	bic.w	r2, r3, #14
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 020a 	orr.w	r2, r2, #10
 8003f2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0204 	orr.w	r2, r2, #4
 8003f46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a83      	ldr	r2, [pc, #524]	; (800415c <HAL_DMA_Start_IT+0x474>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d072      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a82      	ldr	r2, [pc, #520]	; (8004160 <HAL_DMA_Start_IT+0x478>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d06d      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_DMA_Start_IT+0x47c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d068      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7f      	ldr	r2, [pc, #508]	; (8004168 <HAL_DMA_Start_IT+0x480>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d063      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7d      	ldr	r2, [pc, #500]	; (800416c <HAL_DMA_Start_IT+0x484>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d05e      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_DMA_Start_IT+0x488>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d059      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_DMA_Start_IT+0x48c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d054      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a79      	ldr	r2, [pc, #484]	; (8004178 <HAL_DMA_Start_IT+0x490>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04f      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_DMA_Start_IT+0x494>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d04a      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a76      	ldr	r2, [pc, #472]	; (8004180 <HAL_DMA_Start_IT+0x498>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d045      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_DMA_Start_IT+0x49c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d040      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a73      	ldr	r2, [pc, #460]	; (8004188 <HAL_DMA_Start_IT+0x4a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d03b      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_DMA_Start_IT+0x4a4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d036      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	; (8004190 <HAL_DMA_Start_IT+0x4a8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d031      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_DMA_Start_IT+0x4ac>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02c      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6d      	ldr	r2, [pc, #436]	; (8004198 <HAL_DMA_Start_IT+0x4b0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d027      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a6b      	ldr	r2, [pc, #428]	; (800419c <HAL_DMA_Start_IT+0x4b4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6a      	ldr	r2, [pc, #424]	; (80041a0 <HAL_DMA_Start_IT+0x4b8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01d      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <HAL_DMA_Start_IT+0x4bc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <HAL_DMA_Start_IT+0x4c0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_DMA_Start_IT+0x4c4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a64      	ldr	r2, [pc, #400]	; (80041b0 <HAL_DMA_Start_IT+0x4c8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a62      	ldr	r2, [pc, #392]	; (80041b4 <HAL_DMA_Start_IT+0x4cc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a61      	ldr	r2, [pc, #388]	; (80041b8 <HAL_DMA_Start_IT+0x4d0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x354>
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_DMA_Start_IT+0x356>
 800403c:	2300      	movs	r3, #0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a37      	ldr	r2, [pc, #220]	; (800415c <HAL_DMA_Start_IT+0x474>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d04a      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a36      	ldr	r2, [pc, #216]	; (8004160 <HAL_DMA_Start_IT+0x478>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d045      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a34      	ldr	r2, [pc, #208]	; (8004164 <HAL_DMA_Start_IT+0x47c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d040      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a33      	ldr	r2, [pc, #204]	; (8004168 <HAL_DMA_Start_IT+0x480>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d03b      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a31      	ldr	r2, [pc, #196]	; (800416c <HAL_DMA_Start_IT+0x484>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d036      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a30      	ldr	r2, [pc, #192]	; (8004170 <HAL_DMA_Start_IT+0x488>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d031      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2e      	ldr	r2, [pc, #184]	; (8004174 <HAL_DMA_Start_IT+0x48c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d02c      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <HAL_DMA_Start_IT+0x490>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d027      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2b      	ldr	r2, [pc, #172]	; (800417c <HAL_DMA_Start_IT+0x494>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d022      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2a      	ldr	r2, [pc, #168]	; (8004180 <HAL_DMA_Start_IT+0x498>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d01d      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_DMA_Start_IT+0x49c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <HAL_DMA_Start_IT+0x4a0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d013      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_DMA_Start_IT+0x4a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a24      	ldr	r2, [pc, #144]	; (8004190 <HAL_DMA_Start_IT+0x4a8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_DMA_Start_IT+0x4ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_DMA_Start_IT+0x430>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <HAL_DMA_Start_IT+0x4b0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <HAL_DMA_Start_IT+0x442>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e012      	b.n	8004150 <HAL_DMA_Start_IT+0x468>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 0201 	orr.w	r2, r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e009      	b.n	8004150 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004150:	7dfb      	ldrb	r3, [r7, #23]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40020010 	.word	0x40020010
 8004160:	40020028 	.word	0x40020028
 8004164:	40020040 	.word	0x40020040
 8004168:	40020058 	.word	0x40020058
 800416c:	40020070 	.word	0x40020070
 8004170:	40020088 	.word	0x40020088
 8004174:	400200a0 	.word	0x400200a0
 8004178:	400200b8 	.word	0x400200b8
 800417c:	40020410 	.word	0x40020410
 8004180:	40020428 	.word	0x40020428
 8004184:	40020440 	.word	0x40020440
 8004188:	40020458 	.word	0x40020458
 800418c:	40020470 	.word	0x40020470
 8004190:	40020488 	.word	0x40020488
 8004194:	400204a0 	.word	0x400204a0
 8004198:	400204b8 	.word	0x400204b8
 800419c:	58025408 	.word	0x58025408
 80041a0:	5802541c 	.word	0x5802541c
 80041a4:	58025430 	.word	0x58025430
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025458 	.word	0x58025458
 80041b0:	5802546c 	.word	0x5802546c
 80041b4:	58025480 	.word	0x58025480
 80041b8:	58025494 	.word	0x58025494

080041bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80041c4:	f7fd f974 	bl	80014b0 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e2dc      	b.n	800478e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d008      	beq.n	80041f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e2cd      	b.n	800478e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a76      	ldr	r2, [pc, #472]	; (80043d0 <HAL_DMA_Abort+0x214>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d04a      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a74      	ldr	r2, [pc, #464]	; (80043d4 <HAL_DMA_Abort+0x218>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d045      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a73      	ldr	r2, [pc, #460]	; (80043d8 <HAL_DMA_Abort+0x21c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a71      	ldr	r2, [pc, #452]	; (80043dc <HAL_DMA_Abort+0x220>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d03b      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a70      	ldr	r2, [pc, #448]	; (80043e0 <HAL_DMA_Abort+0x224>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d036      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <HAL_DMA_Abort+0x228>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d031      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a6d      	ldr	r2, [pc, #436]	; (80043e8 <HAL_DMA_Abort+0x22c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d02c      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6b      	ldr	r2, [pc, #428]	; (80043ec <HAL_DMA_Abort+0x230>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6a      	ldr	r2, [pc, #424]	; (80043f0 <HAL_DMA_Abort+0x234>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d022      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a68      	ldr	r2, [pc, #416]	; (80043f4 <HAL_DMA_Abort+0x238>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_DMA_Abort+0x23c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d018      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_DMA_Abort+0x240>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a64      	ldr	r2, [pc, #400]	; (8004400 <HAL_DMA_Abort+0x244>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a62      	ldr	r2, [pc, #392]	; (8004404 <HAL_DMA_Abort+0x248>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a61      	ldr	r2, [pc, #388]	; (8004408 <HAL_DMA_Abort+0x24c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_DMA_Abort+0xd6>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a5f      	ldr	r2, [pc, #380]	; (800440c <HAL_DMA_Abort+0x250>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d101      	bne.n	8004296 <HAL_DMA_Abort+0xda>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_DMA_Abort+0xdc>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 021e 	bic.w	r2, r2, #30
 80042aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e00a      	b.n	80042da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 020e 	bic.w	r2, r2, #14
 80042d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3c      	ldr	r2, [pc, #240]	; (80043d0 <HAL_DMA_Abort+0x214>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d072      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <HAL_DMA_Abort+0x218>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d06d      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_DMA_Abort+0x21c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d068      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a37      	ldr	r2, [pc, #220]	; (80043dc <HAL_DMA_Abort+0x220>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d063      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a36      	ldr	r2, [pc, #216]	; (80043e0 <HAL_DMA_Abort+0x224>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d05e      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a34      	ldr	r2, [pc, #208]	; (80043e4 <HAL_DMA_Abort+0x228>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d059      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <HAL_DMA_Abort+0x22c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d054      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_DMA_Abort+0x230>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d04f      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_DMA_Abort+0x234>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d04a      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2e      	ldr	r2, [pc, #184]	; (80043f4 <HAL_DMA_Abort+0x238>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d045      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_DMA_Abort+0x23c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d040      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <HAL_DMA_Abort+0x240>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <HAL_DMA_Abort+0x244>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d036      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a28      	ldr	r2, [pc, #160]	; (8004404 <HAL_DMA_Abort+0x248>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a27      	ldr	r2, [pc, #156]	; (8004408 <HAL_DMA_Abort+0x24c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d02c      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <HAL_DMA_Abort+0x250>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d027      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a24      	ldr	r2, [pc, #144]	; (8004410 <HAL_DMA_Abort+0x254>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d022      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a22      	ldr	r2, [pc, #136]	; (8004414 <HAL_DMA_Abort+0x258>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01d      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <HAL_DMA_Abort+0x25c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d018      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_DMA_Abort+0x260>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_DMA_Abort+0x264>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_DMA_Abort+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_DMA_Abort+0x26c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_DMA_Abort+0x20e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <HAL_DMA_Abort+0x270>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d132      	bne.n	8004430 <HAL_DMA_Abort+0x274>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e031      	b.n	8004432 <HAL_DMA_Abort+0x276>
 80043ce:	bf00      	nop
 80043d0:	40020010 	.word	0x40020010
 80043d4:	40020028 	.word	0x40020028
 80043d8:	40020040 	.word	0x40020040
 80043dc:	40020058 	.word	0x40020058
 80043e0:	40020070 	.word	0x40020070
 80043e4:	40020088 	.word	0x40020088
 80043e8:	400200a0 	.word	0x400200a0
 80043ec:	400200b8 	.word	0x400200b8
 80043f0:	40020410 	.word	0x40020410
 80043f4:	40020428 	.word	0x40020428
 80043f8:	40020440 	.word	0x40020440
 80043fc:	40020458 	.word	0x40020458
 8004400:	40020470 	.word	0x40020470
 8004404:	40020488 	.word	0x40020488
 8004408:	400204a0 	.word	0x400204a0
 800440c:	400204b8 	.word	0x400204b8
 8004410:	58025408 	.word	0x58025408
 8004414:	5802541c 	.word	0x5802541c
 8004418:	58025430 	.word	0x58025430
 800441c:	58025444 	.word	0x58025444
 8004420:	58025458 	.word	0x58025458
 8004424:	5802546c 	.word	0x5802546c
 8004428:	58025480 	.word	0x58025480
 800442c:	58025494 	.word	0x58025494
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004444:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6d      	ldr	r2, [pc, #436]	; (8004600 <HAL_DMA_Abort+0x444>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04a      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6b      	ldr	r2, [pc, #428]	; (8004604 <HAL_DMA_Abort+0x448>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d045      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6a      	ldr	r2, [pc, #424]	; (8004608 <HAL_DMA_Abort+0x44c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d040      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a68      	ldr	r2, [pc, #416]	; (800460c <HAL_DMA_Abort+0x450>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03b      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a67      	ldr	r2, [pc, #412]	; (8004610 <HAL_DMA_Abort+0x454>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d036      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_DMA_Abort+0x458>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d031      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a64      	ldr	r2, [pc, #400]	; (8004618 <HAL_DMA_Abort+0x45c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02c      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a62      	ldr	r2, [pc, #392]	; (800461c <HAL_DMA_Abort+0x460>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d027      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a61      	ldr	r2, [pc, #388]	; (8004620 <HAL_DMA_Abort+0x464>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <HAL_DMA_Abort+0x468>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a5e      	ldr	r2, [pc, #376]	; (8004628 <HAL_DMA_Abort+0x46c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a5c      	ldr	r2, [pc, #368]	; (800462c <HAL_DMA_Abort+0x470>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <HAL_DMA_Abort+0x474>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a59      	ldr	r2, [pc, #356]	; (8004634 <HAL_DMA_Abort+0x478>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a58      	ldr	r2, [pc, #352]	; (8004638 <HAL_DMA_Abort+0x47c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Abort+0x32a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a56      	ldr	r2, [pc, #344]	; (800463c <HAL_DMA_Abort+0x480>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_Abort+0x33c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_DMA_Abort+0x34c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004508:	e013      	b.n	8004532 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800450a:	f7fc ffd1 	bl	80014b0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b05      	cmp	r3, #5
 8004516:	d90c      	bls.n	8004532 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12d      	b.n	800478e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <HAL_DMA_Abort+0x444>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <HAL_DMA_Abort+0x448>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <HAL_DMA_Abort+0x44c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_Abort+0x422>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2a      	ldr	r2, [pc, #168]	; (800460c <HAL_DMA_Abort+0x450>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <HAL_DMA_Abort+0x454>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a27      	ldr	r2, [pc, #156]	; (8004614 <HAL_DMA_Abort+0x458>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_Abort+0x422>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <HAL_DMA_Abort+0x45c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_DMA_Abort+0x460>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_Abort+0x422>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a23      	ldr	r2, [pc, #140]	; (8004620 <HAL_DMA_Abort+0x464>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_Abort+0x422>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a21      	ldr	r2, [pc, #132]	; (8004624 <HAL_DMA_Abort+0x468>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a20      	ldr	r2, [pc, #128]	; (8004628 <HAL_DMA_Abort+0x46c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1e      	ldr	r2, [pc, #120]	; (800462c <HAL_DMA_Abort+0x470>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_DMA_Abort+0x474>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1b      	ldr	r2, [pc, #108]	; (8004634 <HAL_DMA_Abort+0x478>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1a      	ldr	r2, [pc, #104]	; (8004638 <HAL_DMA_Abort+0x47c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_Abort+0x422>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_DMA_Abort+0x480>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_DMA_Abort+0x426>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <HAL_DMA_Abort+0x428>
 80045e2:	2300      	movs	r3, #0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d02b      	beq.n	8004640 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	223f      	movs	r2, #63	; 0x3f
 80045f8:	409a      	lsls	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	e02a      	b.n	8004656 <HAL_DMA_Abort+0x49a>
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2201      	movs	r2, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4f      	ldr	r2, [pc, #316]	; (8004798 <HAL_DMA_Abort+0x5dc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d072      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_DMA_Abort+0x5e0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d06d      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a4c      	ldr	r2, [pc, #304]	; (80047a0 <HAL_DMA_Abort+0x5e4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d068      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_DMA_Abort+0x5e8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d063      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a49      	ldr	r2, [pc, #292]	; (80047a8 <HAL_DMA_Abort+0x5ec>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d05e      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a47      	ldr	r2, [pc, #284]	; (80047ac <HAL_DMA_Abort+0x5f0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d059      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a46      	ldr	r2, [pc, #280]	; (80047b0 <HAL_DMA_Abort+0x5f4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d054      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a44      	ldr	r2, [pc, #272]	; (80047b4 <HAL_DMA_Abort+0x5f8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04f      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a43      	ldr	r2, [pc, #268]	; (80047b8 <HAL_DMA_Abort+0x5fc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d04a      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a41      	ldr	r2, [pc, #260]	; (80047bc <HAL_DMA_Abort+0x600>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d045      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a40      	ldr	r2, [pc, #256]	; (80047c0 <HAL_DMA_Abort+0x604>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d040      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3e      	ldr	r2, [pc, #248]	; (80047c4 <HAL_DMA_Abort+0x608>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d03b      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3d      	ldr	r2, [pc, #244]	; (80047c8 <HAL_DMA_Abort+0x60c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d036      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <HAL_DMA_Abort+0x610>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d031      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3a      	ldr	r2, [pc, #232]	; (80047d0 <HAL_DMA_Abort+0x614>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d02c      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	; (80047d4 <HAL_DMA_Abort+0x618>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d027      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a37      	ldr	r2, [pc, #220]	; (80047d8 <HAL_DMA_Abort+0x61c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a35      	ldr	r2, [pc, #212]	; (80047dc <HAL_DMA_Abort+0x620>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <HAL_DMA_Abort+0x624>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <HAL_DMA_Abort+0x628>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_DMA_Abort+0x62c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <HAL_DMA_Abort+0x630>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_DMA_Abort+0x634>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_Abort+0x58a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <HAL_DMA_Abort+0x638>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_DMA_Abort+0x58e>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_DMA_Abort+0x590>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004758:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800477a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40020010 	.word	0x40020010
 800479c:	40020028 	.word	0x40020028
 80047a0:	40020040 	.word	0x40020040
 80047a4:	40020058 	.word	0x40020058
 80047a8:	40020070 	.word	0x40020070
 80047ac:	40020088 	.word	0x40020088
 80047b0:	400200a0 	.word	0x400200a0
 80047b4:	400200b8 	.word	0x400200b8
 80047b8:	40020410 	.word	0x40020410
 80047bc:	40020428 	.word	0x40020428
 80047c0:	40020440 	.word	0x40020440
 80047c4:	40020458 	.word	0x40020458
 80047c8:	40020470 	.word	0x40020470
 80047cc:	40020488 	.word	0x40020488
 80047d0:	400204a0 	.word	0x400204a0
 80047d4:	400204b8 	.word	0x400204b8
 80047d8:	58025408 	.word	0x58025408
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025430 	.word	0x58025430
 80047e4:	58025444 	.word	0x58025444
 80047e8:	58025458 	.word	0x58025458
 80047ec:	5802546c 	.word	0x5802546c
 80047f0:	58025480 	.word	0x58025480
 80047f4:	58025494 	.word	0x58025494

080047f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e205      	b.n	8004c16 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d004      	beq.n	8004820 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e1fa      	b.n	8004c16 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a8c      	ldr	r2, [pc, #560]	; (8004a58 <HAL_DMA_Abort_IT+0x260>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d04a      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a8b      	ldr	r2, [pc, #556]	; (8004a5c <HAL_DMA_Abort_IT+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d045      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a89      	ldr	r2, [pc, #548]	; (8004a60 <HAL_DMA_Abort_IT+0x268>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d040      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a88      	ldr	r2, [pc, #544]	; (8004a64 <HAL_DMA_Abort_IT+0x26c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d03b      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a86      	ldr	r2, [pc, #536]	; (8004a68 <HAL_DMA_Abort_IT+0x270>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d036      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a85      	ldr	r2, [pc, #532]	; (8004a6c <HAL_DMA_Abort_IT+0x274>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d031      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a83      	ldr	r2, [pc, #524]	; (8004a70 <HAL_DMA_Abort_IT+0x278>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02c      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a82      	ldr	r2, [pc, #520]	; (8004a74 <HAL_DMA_Abort_IT+0x27c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d027      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a80      	ldr	r2, [pc, #512]	; (8004a78 <HAL_DMA_Abort_IT+0x280>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d022      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7f      	ldr	r2, [pc, #508]	; (8004a7c <HAL_DMA_Abort_IT+0x284>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d01d      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_DMA_Abort_IT+0x288>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a7c      	ldr	r2, [pc, #496]	; (8004a84 <HAL_DMA_Abort_IT+0x28c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d013      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a7a      	ldr	r2, [pc, #488]	; (8004a88 <HAL_DMA_Abort_IT+0x290>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a79      	ldr	r2, [pc, #484]	; (8004a8c <HAL_DMA_Abort_IT+0x294>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a77      	ldr	r2, [pc, #476]	; (8004a90 <HAL_DMA_Abort_IT+0x298>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_DMA_Abort_IT+0xc8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a76      	ldr	r2, [pc, #472]	; (8004a94 <HAL_DMA_Abort_IT+0x29c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_DMA_Abort_IT+0xcc>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_DMA_Abort_IT+0xce>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d065      	beq.n	8004996 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a60      	ldr	r2, [pc, #384]	; (8004a58 <HAL_DMA_Abort_IT+0x260>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5e      	ldr	r2, [pc, #376]	; (8004a5c <HAL_DMA_Abort_IT+0x264>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5d      	ldr	r2, [pc, #372]	; (8004a60 <HAL_DMA_Abort_IT+0x268>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a5b      	ldr	r2, [pc, #364]	; (8004a64 <HAL_DMA_Abort_IT+0x26c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a5a      	ldr	r2, [pc, #360]	; (8004a68 <HAL_DMA_Abort_IT+0x270>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a58      	ldr	r2, [pc, #352]	; (8004a6c <HAL_DMA_Abort_IT+0x274>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a57      	ldr	r2, [pc, #348]	; (8004a70 <HAL_DMA_Abort_IT+0x278>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a55      	ldr	r2, [pc, #340]	; (8004a74 <HAL_DMA_Abort_IT+0x27c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a54      	ldr	r2, [pc, #336]	; (8004a78 <HAL_DMA_Abort_IT+0x280>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a52      	ldr	r2, [pc, #328]	; (8004a7c <HAL_DMA_Abort_IT+0x284>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a51      	ldr	r2, [pc, #324]	; (8004a80 <HAL_DMA_Abort_IT+0x288>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a4f      	ldr	r2, [pc, #316]	; (8004a84 <HAL_DMA_Abort_IT+0x28c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_DMA_Abort_IT+0x290>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a4c      	ldr	r2, [pc, #304]	; (8004a8c <HAL_DMA_Abort_IT+0x294>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a4b      	ldr	r2, [pc, #300]	; (8004a90 <HAL_DMA_Abort_IT+0x298>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_Abort_IT+0x17a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a49      	ldr	r2, [pc, #292]	; (8004a94 <HAL_DMA_Abort_IT+0x29c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d108      	bne.n	8004984 <HAL_DMA_Abort_IT+0x18c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e147      	b.n	8004c14 <HAL_DMA_Abort_IT+0x41c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0201 	bic.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e13e      	b.n	8004c14 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 020e 	bic.w	r2, r2, #14
 80049a4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2b      	ldr	r2, [pc, #172]	; (8004a58 <HAL_DMA_Abort_IT+0x260>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04a      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a29      	ldr	r2, [pc, #164]	; (8004a5c <HAL_DMA_Abort_IT+0x264>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d045      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <HAL_DMA_Abort_IT+0x268>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <HAL_DMA_Abort_IT+0x26c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d03b      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_DMA_Abort_IT+0x270>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d036      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <HAL_DMA_Abort_IT+0x274>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a22      	ldr	r2, [pc, #136]	; (8004a70 <HAL_DMA_Abort_IT+0x278>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d02c      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <HAL_DMA_Abort_IT+0x27c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d027      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1f      	ldr	r2, [pc, #124]	; (8004a78 <HAL_DMA_Abort_IT+0x280>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_DMA_Abort_IT+0x284>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01d      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <HAL_DMA_Abort_IT+0x288>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_DMA_Abort_IT+0x28c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_DMA_Abort_IT+0x290>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_DMA_Abort_IT+0x294>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_DMA_Abort_IT+0x298>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x24e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_DMA_Abort_IT+0x29c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d128      	bne.n	8004a98 <HAL_DMA_Abort_IT+0x2a0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e027      	b.n	8004aa8 <HAL_DMA_Abort_IT+0x2b0>
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5c      	ldr	r2, [pc, #368]	; (8004c20 <HAL_DMA_Abort_IT+0x428>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d072      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_DMA_Abort_IT+0x42c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d06d      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a59      	ldr	r2, [pc, #356]	; (8004c28 <HAL_DMA_Abort_IT+0x430>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d068      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a58      	ldr	r2, [pc, #352]	; (8004c2c <HAL_DMA_Abort_IT+0x434>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d063      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a56      	ldr	r2, [pc, #344]	; (8004c30 <HAL_DMA_Abort_IT+0x438>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d05e      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a55      	ldr	r2, [pc, #340]	; (8004c34 <HAL_DMA_Abort_IT+0x43c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d059      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a53      	ldr	r2, [pc, #332]	; (8004c38 <HAL_DMA_Abort_IT+0x440>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d054      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_DMA_Abort_IT+0x444>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04f      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a50      	ldr	r2, [pc, #320]	; (8004c40 <HAL_DMA_Abort_IT+0x448>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d04a      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4f      	ldr	r2, [pc, #316]	; (8004c44 <HAL_DMA_Abort_IT+0x44c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d045      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a4d      	ldr	r2, [pc, #308]	; (8004c48 <HAL_DMA_Abort_IT+0x450>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d040      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a4c      	ldr	r2, [pc, #304]	; (8004c4c <HAL_DMA_Abort_IT+0x454>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d03b      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a4a      	ldr	r2, [pc, #296]	; (8004c50 <HAL_DMA_Abort_IT+0x458>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d036      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a49      	ldr	r2, [pc, #292]	; (8004c54 <HAL_DMA_Abort_IT+0x45c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d031      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a47      	ldr	r2, [pc, #284]	; (8004c58 <HAL_DMA_Abort_IT+0x460>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02c      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a46      	ldr	r2, [pc, #280]	; (8004c5c <HAL_DMA_Abort_IT+0x464>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d027      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a44      	ldr	r2, [pc, #272]	; (8004c60 <HAL_DMA_Abort_IT+0x468>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a43      	ldr	r2, [pc, #268]	; (8004c64 <HAL_DMA_Abort_IT+0x46c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d01d      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a41      	ldr	r2, [pc, #260]	; (8004c68 <HAL_DMA_Abort_IT+0x470>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <HAL_DMA_Abort_IT+0x474>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3e      	ldr	r2, [pc, #248]	; (8004c70 <HAL_DMA_Abort_IT+0x478>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3d      	ldr	r2, [pc, #244]	; (8004c74 <HAL_DMA_Abort_IT+0x47c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <HAL_DMA_Abort_IT+0x480>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x3a0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a3a      	ldr	r2, [pc, #232]	; (8004c7c <HAL_DMA_Abort_IT+0x484>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_DMA_Abort_IT+0x3a4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_DMA_Abort_IT+0x3a6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d028      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00c      	beq.n	8004bf4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004bf2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40020010 	.word	0x40020010
 8004c24:	40020028 	.word	0x40020028
 8004c28:	40020040 	.word	0x40020040
 8004c2c:	40020058 	.word	0x40020058
 8004c30:	40020070 	.word	0x40020070
 8004c34:	40020088 	.word	0x40020088
 8004c38:	400200a0 	.word	0x400200a0
 8004c3c:	400200b8 	.word	0x400200b8
 8004c40:	40020410 	.word	0x40020410
 8004c44:	40020428 	.word	0x40020428
 8004c48:	40020440 	.word	0x40020440
 8004c4c:	40020458 	.word	0x40020458
 8004c50:	40020470 	.word	0x40020470
 8004c54:	40020488 	.word	0x40020488
 8004c58:	400204a0 	.word	0x400204a0
 8004c5c:	400204b8 	.word	0x400204b8
 8004c60:	58025408 	.word	0x58025408
 8004c64:	5802541c 	.word	0x5802541c
 8004c68:	58025430 	.word	0x58025430
 8004c6c:	58025444 	.word	0x58025444
 8004c70:	58025458 	.word	0x58025458
 8004c74:	5802546c 	.word	0x5802546c
 8004c78:	58025480 	.word	0x58025480
 8004c7c:	58025494 	.word	0x58025494

08004c80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c8c:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <HAL_DMA_IRQHandler+0x1ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a67      	ldr	r2, [pc, #412]	; (8004e30 <HAL_DMA_IRQHandler+0x1b0>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0a9b      	lsrs	r3, r3, #10
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5f      	ldr	r2, [pc, #380]	; (8004e34 <HAL_DMA_IRQHandler+0x1b4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a5d      	ldr	r2, [pc, #372]	; (8004e38 <HAL_DMA_IRQHandler+0x1b8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a5c      	ldr	r2, [pc, #368]	; (8004e3c <HAL_DMA_IRQHandler+0x1bc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d040      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a5a      	ldr	r2, [pc, #360]	; (8004e40 <HAL_DMA_IRQHandler+0x1c0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a59      	ldr	r2, [pc, #356]	; (8004e44 <HAL_DMA_IRQHandler+0x1c4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a57      	ldr	r2, [pc, #348]	; (8004e48 <HAL_DMA_IRQHandler+0x1c8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a56      	ldr	r2, [pc, #344]	; (8004e4c <HAL_DMA_IRQHandler+0x1cc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a54      	ldr	r2, [pc, #336]	; (8004e50 <HAL_DMA_IRQHandler+0x1d0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a53      	ldr	r2, [pc, #332]	; (8004e54 <HAL_DMA_IRQHandler+0x1d4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a51      	ldr	r2, [pc, #324]	; (8004e58 <HAL_DMA_IRQHandler+0x1d8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a50      	ldr	r2, [pc, #320]	; (8004e5c <HAL_DMA_IRQHandler+0x1dc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a4e      	ldr	r2, [pc, #312]	; (8004e60 <HAL_DMA_IRQHandler+0x1e0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4d      	ldr	r2, [pc, #308]	; (8004e64 <HAL_DMA_IRQHandler+0x1e4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <HAL_DMA_IRQHandler+0x1e8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4a      	ldr	r2, [pc, #296]	; (8004e6c <HAL_DMA_IRQHandler+0x1ec>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_IRQHandler+0xd2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a48      	ldr	r2, [pc, #288]	; (8004e70 <HAL_DMA_IRQHandler+0x1f0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_DMA_IRQHandler+0xd6>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_DMA_IRQHandler+0xd8>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 842b 	beq.w	80055b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	2208      	movs	r2, #8
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80a2 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2e      	ldr	r2, [pc, #184]	; (8004e34 <HAL_DMA_IRQHandler+0x1b4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04a      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_DMA_IRQHandler+0x1b8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d045      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	; (8004e3c <HAL_DMA_IRQHandler+0x1bc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d040      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2a      	ldr	r2, [pc, #168]	; (8004e40 <HAL_DMA_IRQHandler+0x1c0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d03b      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <HAL_DMA_IRQHandler+0x1c4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d036      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a27      	ldr	r2, [pc, #156]	; (8004e48 <HAL_DMA_IRQHandler+0x1c8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d031      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a25      	ldr	r2, [pc, #148]	; (8004e4c <HAL_DMA_IRQHandler+0x1cc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d02c      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a24      	ldr	r2, [pc, #144]	; (8004e50 <HAL_DMA_IRQHandler+0x1d0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d027      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_DMA_IRQHandler+0x1d4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <HAL_DMA_IRQHandler+0x1d8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d01d      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_DMA_IRQHandler+0x1dc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_DMA_IRQHandler+0x1e0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_DMA_IRQHandler+0x1e4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <HAL_DMA_IRQHandler+0x1e8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <HAL_DMA_IRQHandler+0x1ec>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x194>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <HAL_DMA_IRQHandler+0x1f0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d12f      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x1f4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e02e      	b.n	8004e88 <HAL_DMA_IRQHandler+0x208>
 8004e2a:	bf00      	nop
 8004e2c:	24000010 	.word	0x24000010
 8004e30:	1b4e81b5 	.word	0x1b4e81b5
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bf14      	ite	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	2300      	moveq	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d06e      	beq.n	8004fac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a69      	ldr	r2, [pc, #420]	; (8005078 <HAL_DMA_IRQHandler+0x3f8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d04a      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a67      	ldr	r2, [pc, #412]	; (800507c <HAL_DMA_IRQHandler+0x3fc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d045      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a66      	ldr	r2, [pc, #408]	; (8005080 <HAL_DMA_IRQHandler+0x400>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d040      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a64      	ldr	r2, [pc, #400]	; (8005084 <HAL_DMA_IRQHandler+0x404>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d03b      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a63      	ldr	r2, [pc, #396]	; (8005088 <HAL_DMA_IRQHandler+0x408>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d036      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a61      	ldr	r2, [pc, #388]	; (800508c <HAL_DMA_IRQHandler+0x40c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d031      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a60      	ldr	r2, [pc, #384]	; (8005090 <HAL_DMA_IRQHandler+0x410>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d02c      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5e      	ldr	r2, [pc, #376]	; (8005094 <HAL_DMA_IRQHandler+0x414>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d027      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5d      	ldr	r2, [pc, #372]	; (8005098 <HAL_DMA_IRQHandler+0x418>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d022      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a5b      	ldr	r2, [pc, #364]	; (800509c <HAL_DMA_IRQHandler+0x41c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01d      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5a      	ldr	r2, [pc, #360]	; (80050a0 <HAL_DMA_IRQHandler+0x420>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d018      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a58      	ldr	r2, [pc, #352]	; (80050a4 <HAL_DMA_IRQHandler+0x424>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <HAL_DMA_IRQHandler+0x428>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a55      	ldr	r2, [pc, #340]	; (80050ac <HAL_DMA_IRQHandler+0x42c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a54      	ldr	r2, [pc, #336]	; (80050b0 <HAL_DMA_IRQHandler+0x430>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x2ee>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_DMA_IRQHandler+0x434>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10a      	bne.n	8004f84 <HAL_DMA_IRQHandler+0x304>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e003      	b.n	8004f8c <HAL_DMA_IRQHandler+0x30c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2201      	movs	r2, #1
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f043 0202 	orr.w	r2, r3, #2
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 808f 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2c      	ldr	r2, [pc, #176]	; (8005078 <HAL_DMA_IRQHandler+0x3f8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d04a      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2a      	ldr	r2, [pc, #168]	; (800507c <HAL_DMA_IRQHandler+0x3fc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d045      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a29      	ldr	r2, [pc, #164]	; (8005080 <HAL_DMA_IRQHandler+0x400>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d040      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	; (8005084 <HAL_DMA_IRQHandler+0x404>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d03b      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a26      	ldr	r2, [pc, #152]	; (8005088 <HAL_DMA_IRQHandler+0x408>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d036      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <HAL_DMA_IRQHandler+0x40c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d031      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a23      	ldr	r2, [pc, #140]	; (8005090 <HAL_DMA_IRQHandler+0x410>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d02c      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a21      	ldr	r2, [pc, #132]	; (8005094 <HAL_DMA_IRQHandler+0x414>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d027      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a20      	ldr	r2, [pc, #128]	; (8005098 <HAL_DMA_IRQHandler+0x418>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d022      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_DMA_IRQHandler+0x41c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01d      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_DMA_IRQHandler+0x420>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d018      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_DMA_IRQHandler+0x424>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <HAL_DMA_IRQHandler+0x428>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00e      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_DMA_IRQHandler+0x42c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d009      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <HAL_DMA_IRQHandler+0x430>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_DMA_IRQHandler+0x3e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_DMA_IRQHandler+0x434>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d12a      	bne.n	80050b8 <HAL_DMA_IRQHandler+0x438>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e023      	b.n	80050c0 <HAL_DMA_IRQHandler+0x440>
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2204      	movs	r2, #4
 80050ce:	409a      	lsls	r2, r3
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f043 0204 	orr.w	r2, r3, #4
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2210      	movs	r2, #16
 80050ea:	409a      	lsls	r2, r3
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80a6 	beq.w	8005242 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a85      	ldr	r2, [pc, #532]	; (8005310 <HAL_DMA_IRQHandler+0x690>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d04a      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a83      	ldr	r2, [pc, #524]	; (8005314 <HAL_DMA_IRQHandler+0x694>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d045      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a82      	ldr	r2, [pc, #520]	; (8005318 <HAL_DMA_IRQHandler+0x698>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d040      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a80      	ldr	r2, [pc, #512]	; (800531c <HAL_DMA_IRQHandler+0x69c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d03b      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a7f      	ldr	r2, [pc, #508]	; (8005320 <HAL_DMA_IRQHandler+0x6a0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d036      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7d      	ldr	r2, [pc, #500]	; (8005324 <HAL_DMA_IRQHandler+0x6a4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d031      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a7c      	ldr	r2, [pc, #496]	; (8005328 <HAL_DMA_IRQHandler+0x6a8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d02c      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7a      	ldr	r2, [pc, #488]	; (800532c <HAL_DMA_IRQHandler+0x6ac>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d027      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a79      	ldr	r2, [pc, #484]	; (8005330 <HAL_DMA_IRQHandler+0x6b0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a77      	ldr	r2, [pc, #476]	; (8005334 <HAL_DMA_IRQHandler+0x6b4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01d      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a76      	ldr	r2, [pc, #472]	; (8005338 <HAL_DMA_IRQHandler+0x6b8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a74      	ldr	r2, [pc, #464]	; (800533c <HAL_DMA_IRQHandler+0x6bc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a73      	ldr	r2, [pc, #460]	; (8005340 <HAL_DMA_IRQHandler+0x6c0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a71      	ldr	r2, [pc, #452]	; (8005344 <HAL_DMA_IRQHandler+0x6c4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a70      	ldr	r2, [pc, #448]	; (8005348 <HAL_DMA_IRQHandler+0x6c8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_DMA_IRQHandler+0x516>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6e      	ldr	r2, [pc, #440]	; (800534c <HAL_DMA_IRQHandler+0x6cc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10a      	bne.n	80051ac <HAL_DMA_IRQHandler+0x52c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	e009      	b.n	80051c0 <HAL_DMA_IRQHandler+0x540>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d03e      	beq.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	f003 031f 	and.w	r3, r3, #31
 80051cc:	2210      	movs	r2, #16
 80051ce:	409a      	lsls	r2, r3
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d018      	beq.n	8005214 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d024      	beq.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
 8005200:	e01f      	b.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01b      	beq.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
 8005212:	e016      	b.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0208 	bic.w	r2, r2, #8
 8005230:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2220      	movs	r2, #32
 800524c:	409a      	lsls	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8110 	beq.w	8005478 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <HAL_DMA_IRQHandler+0x690>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d04a      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2b      	ldr	r2, [pc, #172]	; (8005314 <HAL_DMA_IRQHandler+0x694>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d045      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a29      	ldr	r2, [pc, #164]	; (8005318 <HAL_DMA_IRQHandler+0x698>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d040      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a28      	ldr	r2, [pc, #160]	; (800531c <HAL_DMA_IRQHandler+0x69c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03b      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_DMA_IRQHandler+0x6a0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d036      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a25      	ldr	r2, [pc, #148]	; (8005324 <HAL_DMA_IRQHandler+0x6a4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a23      	ldr	r2, [pc, #140]	; (8005328 <HAL_DMA_IRQHandler+0x6a8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d02c      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a22      	ldr	r2, [pc, #136]	; (800532c <HAL_DMA_IRQHandler+0x6ac>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d027      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a20      	ldr	r2, [pc, #128]	; (8005330 <HAL_DMA_IRQHandler+0x6b0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <HAL_DMA_IRQHandler+0x6b4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d01d      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <HAL_DMA_IRQHandler+0x6b8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1c      	ldr	r2, [pc, #112]	; (800533c <HAL_DMA_IRQHandler+0x6bc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <HAL_DMA_IRQHandler+0x6c0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_DMA_IRQHandler+0x6c4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_DMA_IRQHandler+0x6c8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x678>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <HAL_DMA_IRQHandler+0x6cc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d12b      	bne.n	8005350 <HAL_DMA_IRQHandler+0x6d0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e02a      	b.n	8005364 <HAL_DMA_IRQHandler+0x6e4>
 800530e:	bf00      	nop
 8005310:	40020010 	.word	0x40020010
 8005314:	40020028 	.word	0x40020028
 8005318:	40020040 	.word	0x40020040
 800531c:	40020058 	.word	0x40020058
 8005320:	40020070 	.word	0x40020070
 8005324:	40020088 	.word	0x40020088
 8005328:	400200a0 	.word	0x400200a0
 800532c:	400200b8 	.word	0x400200b8
 8005330:	40020410 	.word	0x40020410
 8005334:	40020428 	.word	0x40020428
 8005338:	40020440 	.word	0x40020440
 800533c:	40020458 	.word	0x40020458
 8005340:	40020470 	.word	0x40020470
 8005344:	40020488 	.word	0x40020488
 8005348:	400204a0 	.word	0x400204a0
 800534c:	400204b8 	.word	0x400204b8
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8087 	beq.w	8005478 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2220      	movs	r2, #32
 8005374:	409a      	lsls	r2, r3
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b04      	cmp	r3, #4
 8005384:	d139      	bne.n	80053fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0216 	bic.w	r2, r2, #22
 8005394:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <HAL_DMA_IRQHandler+0x736>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0208 	bic.w	r2, r2, #8
 80053c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	223f      	movs	r2, #63	; 0x3f
 80053d0:	409a      	lsls	r2, r3
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 834a 	beq.w	8005a84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
          }
          return;
 80053f8:	e344      	b.n	8005a84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d018      	beq.n	800543a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	2b00      	cmp	r3, #0
 800541c:	d02c      	beq.n	8005478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	e027      	b.n	8005478 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d023      	beq.n	8005478 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	e01e      	b.n	8005478 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10f      	bne.n	8005468 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0210 	bic.w	r2, r2, #16
 8005456:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8306 	beq.w	8005a8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 8088 	beq.w	80055a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7a      	ldr	r2, [pc, #488]	; (8005688 <HAL_DMA_IRQHandler+0xa08>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a79      	ldr	r2, [pc, #484]	; (800568c <HAL_DMA_IRQHandler+0xa0c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d045      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a77      	ldr	r2, [pc, #476]	; (8005690 <HAL_DMA_IRQHandler+0xa10>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d040      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a76      	ldr	r2, [pc, #472]	; (8005694 <HAL_DMA_IRQHandler+0xa14>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d03b      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a74      	ldr	r2, [pc, #464]	; (8005698 <HAL_DMA_IRQHandler+0xa18>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d036      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a73      	ldr	r2, [pc, #460]	; (800569c <HAL_DMA_IRQHandler+0xa1c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d031      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a71      	ldr	r2, [pc, #452]	; (80056a0 <HAL_DMA_IRQHandler+0xa20>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02c      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a70      	ldr	r2, [pc, #448]	; (80056a4 <HAL_DMA_IRQHandler+0xa24>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d027      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a6e      	ldr	r2, [pc, #440]	; (80056a8 <HAL_DMA_IRQHandler+0xa28>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6d      	ldr	r2, [pc, #436]	; (80056ac <HAL_DMA_IRQHandler+0xa2c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01d      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6b      	ldr	r2, [pc, #428]	; (80056b0 <HAL_DMA_IRQHandler+0xa30>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6a      	ldr	r2, [pc, #424]	; (80056b4 <HAL_DMA_IRQHandler+0xa34>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a68      	ldr	r2, [pc, #416]	; (80056b8 <HAL_DMA_IRQHandler+0xa38>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a67      	ldr	r2, [pc, #412]	; (80056bc <HAL_DMA_IRQHandler+0xa3c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_DMA_IRQHandler+0xa40>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_DMA_IRQHandler+0x8b8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a64      	ldr	r2, [pc, #400]	; (80056c4 <HAL_DMA_IRQHandler+0xa44>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <HAL_DMA_IRQHandler+0x8ca>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e007      	b.n	800555a <HAL_DMA_IRQHandler+0x8da>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005562:	429a      	cmp	r2, r3
 8005564:	d307      	bcc.n	8005576 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f2      	bne.n	800555a <HAL_DMA_IRQHandler+0x8da>
 8005574:	e000      	b.n	8005578 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005576:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2203      	movs	r2, #3
 8005592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005596:	e003      	b.n	80055a0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8272 	beq.w	8005a8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	e26c      	b.n	8005a8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_DMA_IRQHandler+0xa48>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a42      	ldr	r2, [pc, #264]	; (80056cc <HAL_DMA_IRQHandler+0xa4c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a40      	ldr	r2, [pc, #256]	; (80056d0 <HAL_DMA_IRQHandler+0xa50>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3f      	ldr	r2, [pc, #252]	; (80056d4 <HAL_DMA_IRQHandler+0xa54>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3d      	ldr	r2, [pc, #244]	; (80056d8 <HAL_DMA_IRQHandler+0xa58>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <HAL_DMA_IRQHandler+0xa5c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3a      	ldr	r2, [pc, #232]	; (80056e0 <HAL_DMA_IRQHandler+0xa60>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_IRQHandler+0x984>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <HAL_DMA_IRQHandler+0xa64>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_DMA_IRQHandler+0x988>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <HAL_DMA_IRQHandler+0x98a>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 823f 	beq.w	8005a8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2204      	movs	r2, #4
 8005622:	409a      	lsls	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80cd 	beq.w	80057c8 <HAL_DMA_IRQHandler+0xb48>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80c7 	beq.w	80057c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	2204      	movs	r2, #4
 8005644:	409a      	lsls	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d049      	beq.n	80056e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 8210 	beq.w	8005a88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005670:	e20a      	b.n	8005a88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8206 	beq.w	8005a88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005684:	e200      	b.n	8005a88 <HAL_DMA_IRQHandler+0xe08>
 8005686:	bf00      	nop
 8005688:	40020010 	.word	0x40020010
 800568c:	40020028 	.word	0x40020028
 8005690:	40020040 	.word	0x40020040
 8005694:	40020058 	.word	0x40020058
 8005698:	40020070 	.word	0x40020070
 800569c:	40020088 	.word	0x40020088
 80056a0:	400200a0 	.word	0x400200a0
 80056a4:	400200b8 	.word	0x400200b8
 80056a8:	40020410 	.word	0x40020410
 80056ac:	40020428 	.word	0x40020428
 80056b0:	40020440 	.word	0x40020440
 80056b4:	40020458 	.word	0x40020458
 80056b8:	40020470 	.word	0x40020470
 80056bc:	40020488 	.word	0x40020488
 80056c0:	400204a0 	.word	0x400204a0
 80056c4:	400204b8 	.word	0x400204b8
 80056c8:	58025408 	.word	0x58025408
 80056cc:	5802541c 	.word	0x5802541c
 80056d0:	58025430 	.word	0x58025430
 80056d4:	58025444 	.word	0x58025444
 80056d8:	58025458 	.word	0x58025458
 80056dc:	5802546c 	.word	0x5802546c
 80056e0:	58025480 	.word	0x58025480
 80056e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d160      	bne.n	80057b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a8c      	ldr	r2, [pc, #560]	; (8005928 <HAL_DMA_IRQHandler+0xca8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d04a      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a8a      	ldr	r2, [pc, #552]	; (800592c <HAL_DMA_IRQHandler+0xcac>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d045      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a89      	ldr	r2, [pc, #548]	; (8005930 <HAL_DMA_IRQHandler+0xcb0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d040      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a87      	ldr	r2, [pc, #540]	; (8005934 <HAL_DMA_IRQHandler+0xcb4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d03b      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a86      	ldr	r2, [pc, #536]	; (8005938 <HAL_DMA_IRQHandler+0xcb8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d036      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a84      	ldr	r2, [pc, #528]	; (800593c <HAL_DMA_IRQHandler+0xcbc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d031      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a83      	ldr	r2, [pc, #524]	; (8005940 <HAL_DMA_IRQHandler+0xcc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d02c      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a81      	ldr	r2, [pc, #516]	; (8005944 <HAL_DMA_IRQHandler+0xcc4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d027      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a80      	ldr	r2, [pc, #512]	; (8005948 <HAL_DMA_IRQHandler+0xcc8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a7e      	ldr	r2, [pc, #504]	; (800594c <HAL_DMA_IRQHandler+0xccc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a7d      	ldr	r2, [pc, #500]	; (8005950 <HAL_DMA_IRQHandler+0xcd0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a7b      	ldr	r2, [pc, #492]	; (8005954 <HAL_DMA_IRQHandler+0xcd4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a7a      	ldr	r2, [pc, #488]	; (8005958 <HAL_DMA_IRQHandler+0xcd8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a78      	ldr	r2, [pc, #480]	; (800595c <HAL_DMA_IRQHandler+0xcdc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a77      	ldr	r2, [pc, #476]	; (8005960 <HAL_DMA_IRQHandler+0xce0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_DMA_IRQHandler+0xb12>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a75      	ldr	r2, [pc, #468]	; (8005964 <HAL_DMA_IRQHandler+0xce4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d108      	bne.n	80057a4 <HAL_DMA_IRQHandler+0xb24>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0208 	bic.w	r2, r2, #8
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	e007      	b.n	80057b4 <HAL_DMA_IRQHandler+0xb34>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8165 	beq.w	8005a88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057c6:	e15f      	b.n	8005a88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2202      	movs	r2, #2
 80057d2:	409a      	lsls	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80c5 	beq.w	8005968 <HAL_DMA_IRQHandler+0xce8>
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80bf 	beq.w	8005968 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2202      	movs	r2, #2
 80057f4:	409a      	lsls	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d018      	beq.n	8005836 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 813a 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005820:	e134      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8130 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005834:	e12a      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d168      	bne.n	8005912 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a38      	ldr	r2, [pc, #224]	; (8005928 <HAL_DMA_IRQHandler+0xca8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04a      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a37      	ldr	r2, [pc, #220]	; (800592c <HAL_DMA_IRQHandler+0xcac>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d045      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a35      	ldr	r2, [pc, #212]	; (8005930 <HAL_DMA_IRQHandler+0xcb0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d040      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_DMA_IRQHandler+0xcb4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d03b      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a32      	ldr	r2, [pc, #200]	; (8005938 <HAL_DMA_IRQHandler+0xcb8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d036      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a31      	ldr	r2, [pc, #196]	; (800593c <HAL_DMA_IRQHandler+0xcbc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d031      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_DMA_IRQHandler+0xcc0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d02c      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2e      	ldr	r2, [pc, #184]	; (8005944 <HAL_DMA_IRQHandler+0xcc4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d027      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <HAL_DMA_IRQHandler+0xcc8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d022      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2b      	ldr	r2, [pc, #172]	; (800594c <HAL_DMA_IRQHandler+0xccc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d01d      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a29      	ldr	r2, [pc, #164]	; (8005950 <HAL_DMA_IRQHandler+0xcd0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a28      	ldr	r2, [pc, #160]	; (8005954 <HAL_DMA_IRQHandler+0xcd4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <HAL_DMA_IRQHandler+0xcd8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a25      	ldr	r2, [pc, #148]	; (800595c <HAL_DMA_IRQHandler+0xcdc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a23      	ldr	r2, [pc, #140]	; (8005960 <HAL_DMA_IRQHandler+0xce0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_DMA_IRQHandler+0xc60>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <HAL_DMA_IRQHandler+0xce4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_DMA_IRQHandler+0xc72>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0214 	bic.w	r2, r2, #20
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <HAL_DMA_IRQHandler+0xc82>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 020a 	bic.w	r2, r2, #10
 8005900:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80b8 	beq.w	8005a8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005924:	e0b2      	b.n	8005a8c <HAL_DMA_IRQHandler+0xe0c>
 8005926:	bf00      	nop
 8005928:	40020010 	.word	0x40020010
 800592c:	40020028 	.word	0x40020028
 8005930:	40020040 	.word	0x40020040
 8005934:	40020058 	.word	0x40020058
 8005938:	40020070 	.word	0x40020070
 800593c:	40020088 	.word	0x40020088
 8005940:	400200a0 	.word	0x400200a0
 8005944:	400200b8 	.word	0x400200b8
 8005948:	40020410 	.word	0x40020410
 800594c:	40020428 	.word	0x40020428
 8005950:	40020440 	.word	0x40020440
 8005954:	40020458 	.word	0x40020458
 8005958:	40020470 	.word	0x40020470
 800595c:	40020488 	.word	0x40020488
 8005960:	400204a0 	.word	0x400204a0
 8005964:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2208      	movs	r2, #8
 8005972:	409a      	lsls	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8088 	beq.w	8005a8e <HAL_DMA_IRQHandler+0xe0e>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8082 	beq.w	8005a8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a41      	ldr	r2, [pc, #260]	; (8005a94 <HAL_DMA_IRQHandler+0xe14>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3f      	ldr	r2, [pc, #252]	; (8005a98 <HAL_DMA_IRQHandler+0xe18>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <HAL_DMA_IRQHandler+0xe1c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a3c      	ldr	r2, [pc, #240]	; (8005aa0 <HAL_DMA_IRQHandler+0xe20>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a3b      	ldr	r2, [pc, #236]	; (8005aa4 <HAL_DMA_IRQHandler+0xe24>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a39      	ldr	r2, [pc, #228]	; (8005aa8 <HAL_DMA_IRQHandler+0xe28>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a38      	ldr	r2, [pc, #224]	; (8005aac <HAL_DMA_IRQHandler+0xe2c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a36      	ldr	r2, [pc, #216]	; (8005ab0 <HAL_DMA_IRQHandler+0xe30>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a35      	ldr	r2, [pc, #212]	; (8005ab4 <HAL_DMA_IRQHandler+0xe34>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a33      	ldr	r2, [pc, #204]	; (8005ab8 <HAL_DMA_IRQHandler+0xe38>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a32      	ldr	r2, [pc, #200]	; (8005abc <HAL_DMA_IRQHandler+0xe3c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a30      	ldr	r2, [pc, #192]	; (8005ac0 <HAL_DMA_IRQHandler+0xe40>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a2f      	ldr	r2, [pc, #188]	; (8005ac4 <HAL_DMA_IRQHandler+0xe44>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <HAL_DMA_IRQHandler+0xe48>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <HAL_DMA_IRQHandler+0xe4c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_IRQHandler+0xdaa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <HAL_DMA_IRQHandler+0xe50>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <HAL_DMA_IRQHandler+0xdbc>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 021c 	bic.w	r2, r2, #28
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <HAL_DMA_IRQHandler+0xdcc>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 020e 	bic.w	r2, r2, #14
 8005a4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2201      	movs	r2, #1
 8005a56:	409a      	lsls	r2, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
 8005a82:	e004      	b.n	8005a8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a84:	bf00      	nop
 8005a86:	e002      	b.n	8005a8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a88:	bf00      	nop
 8005a8a:	e000      	b.n	8005a8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a8e:	3728      	adds	r7, #40	; 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8

08005ad4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a84      	ldr	r2, [pc, #528]	; (8005d04 <DMA_SetConfig+0x230>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d072      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a82      	ldr	r2, [pc, #520]	; (8005d08 <DMA_SetConfig+0x234>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d06d      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a81      	ldr	r2, [pc, #516]	; (8005d0c <DMA_SetConfig+0x238>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d068      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7f      	ldr	r2, [pc, #508]	; (8005d10 <DMA_SetConfig+0x23c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d063      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a7e      	ldr	r2, [pc, #504]	; (8005d14 <DMA_SetConfig+0x240>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d05e      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a7c      	ldr	r2, [pc, #496]	; (8005d18 <DMA_SetConfig+0x244>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d059      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a7b      	ldr	r2, [pc, #492]	; (8005d1c <DMA_SetConfig+0x248>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d054      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a79      	ldr	r2, [pc, #484]	; (8005d20 <DMA_SetConfig+0x24c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d04f      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a78      	ldr	r2, [pc, #480]	; (8005d24 <DMA_SetConfig+0x250>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d04a      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a76      	ldr	r2, [pc, #472]	; (8005d28 <DMA_SetConfig+0x254>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d045      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a75      	ldr	r2, [pc, #468]	; (8005d2c <DMA_SetConfig+0x258>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d040      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a73      	ldr	r2, [pc, #460]	; (8005d30 <DMA_SetConfig+0x25c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d03b      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a72      	ldr	r2, [pc, #456]	; (8005d34 <DMA_SetConfig+0x260>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d036      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a70      	ldr	r2, [pc, #448]	; (8005d38 <DMA_SetConfig+0x264>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d031      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a6f      	ldr	r2, [pc, #444]	; (8005d3c <DMA_SetConfig+0x268>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d02c      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a6d      	ldr	r2, [pc, #436]	; (8005d40 <DMA_SetConfig+0x26c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d027      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a6c      	ldr	r2, [pc, #432]	; (8005d44 <DMA_SetConfig+0x270>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a6a      	ldr	r2, [pc, #424]	; (8005d48 <DMA_SetConfig+0x274>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01d      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <DMA_SetConfig+0x278>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a67      	ldr	r2, [pc, #412]	; (8005d50 <DMA_SetConfig+0x27c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a66      	ldr	r2, [pc, #408]	; (8005d54 <DMA_SetConfig+0x280>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a64      	ldr	r2, [pc, #400]	; (8005d58 <DMA_SetConfig+0x284>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a63      	ldr	r2, [pc, #396]	; (8005d5c <DMA_SetConfig+0x288>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <DMA_SetConfig+0x10a>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a61      	ldr	r2, [pc, #388]	; (8005d60 <DMA_SetConfig+0x28c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d101      	bne.n	8005be2 <DMA_SetConfig+0x10e>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <DMA_SetConfig+0x110>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00d      	beq.n	8005c04 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bf0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c02:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3e      	ldr	r2, [pc, #248]	; (8005d04 <DMA_SetConfig+0x230>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d04a      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3d      	ldr	r2, [pc, #244]	; (8005d08 <DMA_SetConfig+0x234>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d045      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3b      	ldr	r2, [pc, #236]	; (8005d0c <DMA_SetConfig+0x238>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d040      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <DMA_SetConfig+0x23c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d03b      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a38      	ldr	r2, [pc, #224]	; (8005d14 <DMA_SetConfig+0x240>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d036      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <DMA_SetConfig+0x244>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d031      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a35      	ldr	r2, [pc, #212]	; (8005d1c <DMA_SetConfig+0x248>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d02c      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <DMA_SetConfig+0x24c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d027      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a32      	ldr	r2, [pc, #200]	; (8005d24 <DMA_SetConfig+0x250>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <DMA_SetConfig+0x254>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d01d      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2f      	ldr	r2, [pc, #188]	; (8005d2c <DMA_SetConfig+0x258>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <DMA_SetConfig+0x25c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2c      	ldr	r2, [pc, #176]	; (8005d34 <DMA_SetConfig+0x260>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2b      	ldr	r2, [pc, #172]	; (8005d38 <DMA_SetConfig+0x264>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a29      	ldr	r2, [pc, #164]	; (8005d3c <DMA_SetConfig+0x268>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <DMA_SetConfig+0x1d0>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a28      	ldr	r2, [pc, #160]	; (8005d40 <DMA_SetConfig+0x26c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <DMA_SetConfig+0x1d4>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <DMA_SetConfig+0x1d6>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d05a      	beq.n	8005d64 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	223f      	movs	r2, #63	; 0x3f
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ccc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b40      	cmp	r3, #64	; 0x40
 8005cdc:	d108      	bne.n	8005cf0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cee:	e087      	b.n	8005e00 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
}
 8005d00:	e07e      	b.n	8005e00 <DMA_SetConfig+0x32c>
 8005d02:	bf00      	nop
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
 8005d44:	58025408 	.word	0x58025408
 8005d48:	5802541c 	.word	0x5802541c
 8005d4c:	58025430 	.word	0x58025430
 8005d50:	58025444 	.word	0x58025444
 8005d54:	58025458 	.word	0x58025458
 8005d58:	5802546c 	.word	0x5802546c
 8005d5c:	58025480 	.word	0x58025480
 8005d60:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <DMA_SetConfig+0x338>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d022      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <DMA_SetConfig+0x33c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d01d      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <DMA_SetConfig+0x340>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d018      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a24      	ldr	r2, [pc, #144]	; (8005e18 <DMA_SetConfig+0x344>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <DMA_SetConfig+0x348>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00e      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <DMA_SetConfig+0x34c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d009      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <DMA_SetConfig+0x350>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <DMA_SetConfig+0x2e0>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <DMA_SetConfig+0x354>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d101      	bne.n	8005db8 <DMA_SetConfig+0x2e4>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <DMA_SetConfig+0x2e6>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d108      	bne.n	8005df0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	60da      	str	r2, [r3, #12]
}
 8005dee:	e007      	b.n	8005e00 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	58025408 	.word	0x58025408
 8005e10:	5802541c 	.word	0x5802541c
 8005e14:	58025430 	.word	0x58025430
 8005e18:	58025444 	.word	0x58025444
 8005e1c:	58025458 	.word	0x58025458
 8005e20:	5802546c 	.word	0x5802546c
 8005e24:	58025480 	.word	0x58025480
 8005e28:	58025494 	.word	0x58025494

08005e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a42      	ldr	r2, [pc, #264]	; (8005f44 <DMA_CalcBaseAndBitshift+0x118>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a41      	ldr	r2, [pc, #260]	; (8005f48 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3f      	ldr	r2, [pc, #252]	; (8005f4c <DMA_CalcBaseAndBitshift+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a3e      	ldr	r2, [pc, #248]	; (8005f50 <DMA_CalcBaseAndBitshift+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a3c      	ldr	r2, [pc, #240]	; (8005f54 <DMA_CalcBaseAndBitshift+0x128>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3b      	ldr	r2, [pc, #236]	; (8005f58 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a39      	ldr	r2, [pc, #228]	; (8005f5c <DMA_CalcBaseAndBitshift+0x130>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a38      	ldr	r2, [pc, #224]	; (8005f60 <DMA_CalcBaseAndBitshift+0x134>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a36      	ldr	r2, [pc, #216]	; (8005f64 <DMA_CalcBaseAndBitshift+0x138>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a35      	ldr	r2, [pc, #212]	; (8005f68 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <DMA_CalcBaseAndBitshift+0x140>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <DMA_CalcBaseAndBitshift+0x144>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <DMA_CalcBaseAndBitshift+0x148>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2f      	ldr	r2, [pc, #188]	; (8005f78 <DMA_CalcBaseAndBitshift+0x14c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2d      	ldr	r2, [pc, #180]	; (8005f7c <DMA_CalcBaseAndBitshift+0x150>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <DMA_CalcBaseAndBitshift+0xa8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2c      	ldr	r2, [pc, #176]	; (8005f80 <DMA_CalcBaseAndBitshift+0x154>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <DMA_CalcBaseAndBitshift+0xac>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <DMA_CalcBaseAndBitshift+0xae>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d024      	beq.n	8005f28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	3b10      	subs	r3, #16
 8005ee6:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <DMA_CalcBaseAndBitshift+0x158>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	4a24      	ldr	r2, [pc, #144]	; (8005f88 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ef8:	5cd3      	ldrb	r3, [r2, r3]
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d908      	bls.n	8005f18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <DMA_CalcBaseAndBitshift+0x160>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	1d1a      	adds	r2, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	659a      	str	r2, [r3, #88]	; 0x58
 8005f16:	e00d      	b.n	8005f34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <DMA_CalcBaseAndBitshift+0x160>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6593      	str	r3, [r2, #88]	; 0x58
 8005f26:	e005      	b.n	8005f34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40020010 	.word	0x40020010
 8005f48:	40020028 	.word	0x40020028
 8005f4c:	40020040 	.word	0x40020040
 8005f50:	40020058 	.word	0x40020058
 8005f54:	40020070 	.word	0x40020070
 8005f58:	40020088 	.word	0x40020088
 8005f5c:	400200a0 	.word	0x400200a0
 8005f60:	400200b8 	.word	0x400200b8
 8005f64:	40020410 	.word	0x40020410
 8005f68:	40020428 	.word	0x40020428
 8005f6c:	40020440 	.word	0x40020440
 8005f70:	40020458 	.word	0x40020458
 8005f74:	40020470 	.word	0x40020470
 8005f78:	40020488 	.word	0x40020488
 8005f7c:	400204a0 	.word	0x400204a0
 8005f80:	400204b8 	.word	0x400204b8
 8005f84:	aaaaaaab 	.word	0xaaaaaaab
 8005f88:	0800c1c8 	.word	0x0800c1c8
 8005f8c:	fffffc00 	.word	0xfffffc00

08005f90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d120      	bne.n	8005fe6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d858      	bhi.n	800605e <DMA_CheckFifoParam+0xce>
 8005fac:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <DMA_CheckFifoParam+0x24>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd7 	.word	0x08005fd7
 8005fbc:	08005fc5 	.word	0x08005fc5
 8005fc0:	0800605f 	.word	0x0800605f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d048      	beq.n	8006062 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fd4:	e045      	b.n	8006062 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fde:	d142      	bne.n	8006066 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fe4:	e03f      	b.n	8006066 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fee:	d123      	bne.n	8006038 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d838      	bhi.n	800606a <DMA_CheckFifoParam+0xda>
 8005ff8:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <DMA_CheckFifoParam+0x70>)
 8005ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffe:	bf00      	nop
 8006000:	08006011 	.word	0x08006011
 8006004:	08006017 	.word	0x08006017
 8006008:	08006011 	.word	0x08006011
 800600c:	08006029 	.word	0x08006029
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
        break;
 8006014:	e030      	b.n	8006078 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d025      	beq.n	800606e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006026:	e022      	b.n	800606e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006030:	d11f      	bne.n	8006072 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006036:	e01c      	b.n	8006072 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	2b02      	cmp	r3, #2
 800603e:	d902      	bls.n	8006046 <DMA_CheckFifoParam+0xb6>
 8006040:	2b03      	cmp	r3, #3
 8006042:	d003      	beq.n	800604c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006044:	e018      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	73fb      	strb	r3, [r7, #15]
        break;
 800604a:	e015      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
    break;
 800605c:	e00b      	b.n	8006076 <DMA_CheckFifoParam+0xe6>
        break;
 800605e:	bf00      	nop
 8006060:	e00a      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        break;
 8006062:	bf00      	nop
 8006064:	e008      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        break;
 8006066:	bf00      	nop
 8006068:	e006      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        break;
 800606a:	bf00      	nop
 800606c:	e004      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        break;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <DMA_CheckFifoParam+0xe8>
    break;
 8006076:	bf00      	nop
    }
  }

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop

08006088 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a38      	ldr	r2, [pc, #224]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a36      	ldr	r2, [pc, #216]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a35      	ldr	r2, [pc, #212]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a33      	ldr	r2, [pc, #204]	; (8006188 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a32      	ldr	r2, [pc, #200]	; (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a30      	ldr	r2, [pc, #192]	; (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2f      	ldr	r2, [pc, #188]	; (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2d      	ldr	r2, [pc, #180]	; (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d101      	bne.n	80060ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01a      	beq.n	8006126 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	3b08      	subs	r3, #8
 80060f8:	4a28      	ldr	r2, [pc, #160]	; (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4b26      	ldr	r3, [pc, #152]	; (80061a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a24      	ldr	r2, [pc, #144]	; (80061a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006114:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006124:	e024      	b.n	8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3b10      	subs	r3, #16
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006130:	fba2 2303 	umull	r2, r3, r2, r3
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d806      	bhi.n	800614e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d902      	bls.n	800614e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3308      	adds	r3, #8
 800614c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006160:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	58025408 	.word	0x58025408
 8006180:	5802541c 	.word	0x5802541c
 8006184:	58025430 	.word	0x58025430
 8006188:	58025444 	.word	0x58025444
 800618c:	58025458 	.word	0x58025458
 8006190:	5802546c 	.word	0x5802546c
 8006194:	58025480 	.word	0x58025480
 8006198:	58025494 	.word	0x58025494
 800619c:	cccccccd 	.word	0xcccccccd
 80061a0:	16009600 	.word	0x16009600
 80061a4:	58025880 	.word	0x58025880
 80061a8:	aaaaaaab 	.word	0xaaaaaaab
 80061ac:	400204b8 	.word	0x400204b8
 80061b0:	4002040f 	.word	0x4002040f
 80061b4:	10008200 	.word	0x10008200
 80061b8:	40020880 	.word	0x40020880

080061bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d04a      	beq.n	8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d847      	bhi.n	8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4b17      	ldr	r3, [pc, #92]	; (8006294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a15      	ldr	r2, [pc, #84]	; (8006298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006244:	671a      	str	r2, [r3, #112]	; 0x70
 8006246:	e009      	b.n	800625c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4b14      	ldr	r3, [pc, #80]	; (800629c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800625a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3b01      	subs	r3, #1
 8006260:	2201      	movs	r2, #1
 8006262:	409a      	lsls	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	58025408 	.word	0x58025408
 8006278:	5802541c 	.word	0x5802541c
 800627c:	58025430 	.word	0x58025430
 8006280:	58025444 	.word	0x58025444
 8006284:	58025458 	.word	0x58025458
 8006288:	5802546c 	.word	0x5802546c
 800628c:	58025480 	.word	0x58025480
 8006290:	58025494 	.word	0x58025494
 8006294:	1600963f 	.word	0x1600963f
 8006298:	58025940 	.word	0x58025940
 800629c:	1000823f 	.word	0x1000823f
 80062a0:	40020940 	.word	0x40020940

080062a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	; 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062b2:	4b86      	ldr	r3, [pc, #536]	; (80064cc <HAL_GPIO_Init+0x228>)
 80062b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062b6:	e18c      	b.n	80065d2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2101      	movs	r1, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 817e 	beq.w	80065cc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d00b      	beq.n	80062f0 <HAL_GPIO_Init+0x4c>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d007      	beq.n	80062f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062e4:	2b11      	cmp	r3, #17
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b12      	cmp	r3, #18
 80062ee:	d130      	bne.n	8006352 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	2203      	movs	r2, #3
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006326:	2201      	movs	r2, #1
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	091b      	lsrs	r3, r3, #4
 800633c:	f003 0201 	and.w	r2, r3, #1
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	2203      	movs	r2, #3
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_Init+0xee>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b12      	cmp	r3, #18
 8006390:	d123      	bne.n	80063da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	08da      	lsrs	r2, r3, #3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3208      	adds	r2, #8
 800639a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	220f      	movs	r2, #15
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	08da      	lsrs	r2, r3, #3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3208      	adds	r2, #8
 80063d4:	69b9      	ldr	r1, [r7, #24]
 80063d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	2203      	movs	r2, #3
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4013      	ands	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 0203 	and.w	r2, r3, #3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 80d8 	beq.w	80065cc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641c:	4b2c      	ldr	r3, [pc, #176]	; (80064d0 <HAL_GPIO_Init+0x22c>)
 800641e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006422:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <HAL_GPIO_Init+0x22c>)
 8006424:	f043 0302 	orr.w	r3, r3, #2
 8006428:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800642c:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_GPIO_Init+0x22c>)
 800642e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <HAL_GPIO_Init+0x230>)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	3302      	adds	r3, #2
 8006442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	220f      	movs	r2, #15
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4013      	ands	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <HAL_GPIO_Init+0x234>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d04a      	beq.n	80064fc <HAL_GPIO_Init+0x258>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1c      	ldr	r2, [pc, #112]	; (80064dc <HAL_GPIO_Init+0x238>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02b      	beq.n	80064c6 <HAL_GPIO_Init+0x222>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_GPIO_Init+0x23c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d025      	beq.n	80064c2 <HAL_GPIO_Init+0x21e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <HAL_GPIO_Init+0x240>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01f      	beq.n	80064be <HAL_GPIO_Init+0x21a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <HAL_GPIO_Init+0x244>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d019      	beq.n	80064ba <HAL_GPIO_Init+0x216>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_GPIO_Init+0x248>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_GPIO_Init+0x212>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <HAL_GPIO_Init+0x24c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00d      	beq.n	80064b2 <HAL_GPIO_Init+0x20e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_GPIO_Init+0x250>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d007      	beq.n	80064ae <HAL_GPIO_Init+0x20a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <HAL_GPIO_Init+0x254>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d101      	bne.n	80064aa <HAL_GPIO_Init+0x206>
 80064a6:	2309      	movs	r3, #9
 80064a8:	e029      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064aa:	230a      	movs	r3, #10
 80064ac:	e027      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064ae:	2307      	movs	r3, #7
 80064b0:	e025      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064b2:	2306      	movs	r3, #6
 80064b4:	e023      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064b6:	2305      	movs	r3, #5
 80064b8:	e021      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064ba:	2304      	movs	r3, #4
 80064bc:	e01f      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064be:	2303      	movs	r3, #3
 80064c0:	e01d      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e01b      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e019      	b.n	80064fe <HAL_GPIO_Init+0x25a>
 80064ca:	bf00      	nop
 80064cc:	58000080 	.word	0x58000080
 80064d0:	58024400 	.word	0x58024400
 80064d4:	58000400 	.word	0x58000400
 80064d8:	58020000 	.word	0x58020000
 80064dc:	58020400 	.word	0x58020400
 80064e0:	58020800 	.word	0x58020800
 80064e4:	58020c00 	.word	0x58020c00
 80064e8:	58021000 	.word	0x58021000
 80064ec:	58021400 	.word	0x58021400
 80064f0:	58021800 	.word	0x58021800
 80064f4:	58021c00 	.word	0x58021c00
 80064f8:	58022400 	.word	0x58022400
 80064fc:	2300      	movs	r3, #0
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	f002 0203 	and.w	r2, r2, #3
 8006504:	0092      	lsls	r2, r2, #2
 8006506:	4093      	lsls	r3, r2
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800650e:	4938      	ldr	r1, [pc, #224]	; (80065f0 <HAL_GPIO_Init+0x34c>)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	3302      	adds	r3, #2
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	43db      	mvns	r3, r3
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	43db      	mvns	r3, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4013      	ands	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	43db      	mvns	r3, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4013      	ands	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f ae6b 	bne.w	80062b8 <HAL_GPIO_Init+0x14>
  }
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	3724      	adds	r7, #36	; 0x24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	58000400 	.word	0x58000400

080065f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	807b      	strh	r3, [r7, #2]
 8006600:	4613      	mov	r3, r2
 8006602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006604:	787b      	ldrb	r3, [r7, #1]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800660a:	887a      	ldrh	r2, [r7, #2]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006610:	e003      	b.n	800661a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006612:	887b      	ldrh	r3, [r7, #2]
 8006614:	041a      	lsls	r2, r3, #16
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	619a      	str	r2, [r3, #24]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_PWREx_ConfigSupply+0x70>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b04      	cmp	r3, #4
 800663a:	d00a      	beq.n	8006652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800663c:	4b16      	ldr	r3, [pc, #88]	; (8006698 <HAL_PWREx_ConfigSupply+0x70>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d001      	beq.n	800664e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e01f      	b.n	800668e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e01d      	b.n	800668e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <HAL_PWREx_ConfigSupply+0x70>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f023 0207 	bic.w	r2, r3, #7
 800665a:	490f      	ldr	r1, [pc, #60]	; (8006698 <HAL_PWREx_ConfigSupply+0x70>)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4313      	orrs	r3, r2
 8006660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006662:	f7fa ff25 	bl	80014b0 <HAL_GetTick>
 8006666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006668:	e009      	b.n	800667e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800666a:	f7fa ff21 	bl	80014b0 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006678:	d901      	bls.n	800667e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e007      	b.n	800668e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_PWREx_ConfigSupply+0x70>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668a:	d1ee      	bne.n	800666a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	58024800 	.word	0x58024800

0800669c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08c      	sub	sp, #48	; 0x30
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e37a      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8087 	beq.w	80067ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066bc:	4ba0      	ldr	r3, [pc, #640]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066c6:	4b9e      	ldr	r3, [pc, #632]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d007      	beq.n	80066e2 <HAL_RCC_OscConfig+0x46>
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	2b18      	cmp	r3, #24
 80066d6:	d110      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e>
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d10b      	bne.n	80066fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e2:	4b97      	ldr	r3, [pc, #604]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d06c      	beq.n	80067c8 <HAL_RCC_OscConfig+0x12c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d168      	bne.n	80067c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e354      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006702:	d106      	bne.n	8006712 <HAL_RCC_OscConfig+0x76>
 8006704:	4b8e      	ldr	r3, [pc, #568]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a8d      	ldr	r2, [pc, #564]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800670a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e02e      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10c      	bne.n	8006734 <HAL_RCC_OscConfig+0x98>
 800671a:	4b89      	ldr	r3, [pc, #548]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a88      	ldr	r2, [pc, #544]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	4b86      	ldr	r3, [pc, #536]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a85      	ldr	r2, [pc, #532]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800672c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	e01d      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800673c:	d10c      	bne.n	8006758 <HAL_RCC_OscConfig+0xbc>
 800673e:	4b80      	ldr	r3, [pc, #512]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7f      	ldr	r2, [pc, #508]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4b7d      	ldr	r3, [pc, #500]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a7c      	ldr	r2, [pc, #496]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_OscConfig+0xd4>
 8006758:	4b79      	ldr	r3, [pc, #484]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a78      	ldr	r2, [pc, #480]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4b76      	ldr	r3, [pc, #472]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a75      	ldr	r2, [pc, #468]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800676a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fa fe9a 	bl	80014b0 <HAL_GetTick>
 800677c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006780:	f7fa fe96 	bl	80014b0 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b64      	cmp	r3, #100	; 0x64
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e308      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006792:	4b6b      	ldr	r3, [pc, #428]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0f0      	beq.n	8006780 <HAL_RCC_OscConfig+0xe4>
 800679e:	e014      	b.n	80067ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fa fe86 	bl	80014b0 <HAL_GetTick>
 80067a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a8:	f7fa fe82 	bl	80014b0 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e2f4      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067ba:	4b61      	ldr	r3, [pc, #388]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1f0      	bne.n	80067a8 <HAL_RCC_OscConfig+0x10c>
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d06d      	beq.n	80068b2 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d6:	4b5a      	ldr	r3, [pc, #360]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067e0:	4b57      	ldr	r3, [pc, #348]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d007      	beq.n	80067fc <HAL_RCC_OscConfig+0x160>
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	2b18      	cmp	r3, #24
 80067f0:	d11b      	bne.n	800682a <HAL_RCC_OscConfig+0x18e>
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d116      	bne.n	800682a <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067fc:	4b50      	ldr	r3, [pc, #320]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_RCC_OscConfig+0x178>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e2c7      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006814:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	061b      	lsls	r3, r3, #24
 8006822:	4947      	ldr	r1, [pc, #284]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006828:	e043      	b.n	80068b2 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d026      	beq.n	8006880 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 0219 	bic.w	r2, r3, #25
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	4940      	ldr	r1, [pc, #256]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006840:	4313      	orrs	r3, r2
 8006842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fa fe34 	bl	80014b0 <HAL_GetTick>
 8006848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800684c:	f7fa fe30 	bl	80014b0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e2a2      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800685e:	4b38      	ldr	r3, [pc, #224]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	4b35      	ldr	r3, [pc, #212]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	061b      	lsls	r3, r3, #24
 8006878:	4931      	ldr	r1, [pc, #196]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800687a:	4313      	orrs	r3, r2
 800687c:	604b      	str	r3, [r1, #4]
 800687e:	e018      	b.n	80068b2 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006880:	4b2f      	ldr	r3, [pc, #188]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2e      	ldr	r2, [pc, #184]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fa fe10 	bl	80014b0 <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006894:	f7fa fe0c 	bl	80014b0 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e27e      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80068a6:	4b26      	ldr	r3, [pc, #152]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06c      	beq.n	8006998 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d007      	beq.n	80068e4 <HAL_RCC_OscConfig+0x248>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b18      	cmp	r3, #24
 80068d8:	d11b      	bne.n	8006912 <HAL_RCC_OscConfig+0x276>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d116      	bne.n	8006912 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068e4:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_OscConfig+0x260>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e253      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068fc:	4b10      	ldr	r3, [pc, #64]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	490d      	ldr	r1, [pc, #52]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800690c:	4313      	orrs	r3, r2
 800690e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006910:	e042      	b.n	8006998 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d025      	beq.n	8006966 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a08      	ldr	r2, [pc, #32]	; (8006940 <HAL_RCC_OscConfig+0x2a4>)
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006926:	f7fa fdc3 	bl	80014b0 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800692c:	e00a      	b.n	8006944 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800692e:	f7fa fdbf 	bl	80014b0 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d903      	bls.n	8006944 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e231      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
 8006940:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006944:	4ba3      	ldr	r3, [pc, #652]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ee      	beq.n	800692e <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006950:	4ba0      	ldr	r3, [pc, #640]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	499d      	ldr	r1, [pc, #628]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006960:	4313      	orrs	r3, r2
 8006962:	60cb      	str	r3, [r1, #12]
 8006964:	e018      	b.n	8006998 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006966:	4b9b      	ldr	r3, [pc, #620]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a9a      	ldr	r2, [pc, #616]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 800696c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006972:	f7fa fd9d 	bl	80014b0 <HAL_GetTick>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006978:	e008      	b.n	800698c <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800697a:	f7fa fd99 	bl	80014b0 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e20b      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800698c:	4b91      	ldr	r3, [pc, #580]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f0      	bne.n	800697a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d036      	beq.n	8006a12 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d019      	beq.n	80069e0 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ac:	4b89      	ldr	r3, [pc, #548]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	4a88      	ldr	r2, [pc, #544]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fa fd7a 	bl	80014b0 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c0:	f7fa fd76 	bl	80014b0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1e8      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069d2:	4b80      	ldr	r3, [pc, #512]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x324>
 80069de:	e018      	b.n	8006a12 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069e0:	4b7c      	ldr	r3, [pc, #496]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 80069e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e4:	4a7b      	ldr	r2, [pc, #492]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fa fd60 	bl	80014b0 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f4:	f7fa fd5c 	bl	80014b0 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1ce      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a06:	4b73      	ldr	r3, [pc, #460]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d036      	beq.n	8006a8c <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d019      	beq.n	8006a5a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a26:	4b6b      	ldr	r3, [pc, #428]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a6a      	ldr	r2, [pc, #424]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a32:	f7fa fd3d 	bl	80014b0 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a3a:	f7fa fd39 	bl	80014b0 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e1ab      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a4c:	4b61      	ldr	r3, [pc, #388]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCC_OscConfig+0x39e>
 8006a58:	e018      	b.n	8006a8c <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a5a:	4b5e      	ldr	r3, [pc, #376]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a5d      	ldr	r2, [pc, #372]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a66:	f7fa fd23 	bl	80014b0 <HAL_GetTick>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a6e:	f7fa fd1f 	bl	80014b0 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e191      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a80:	4b54      	ldr	r3, [pc, #336]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8081 	beq.w	8006b9c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a9a:	4b4f      	ldr	r3, [pc, #316]	; (8006bd8 <HAL_RCC_OscConfig+0x53c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a4e      	ldr	r2, [pc, #312]	; (8006bd8 <HAL_RCC_OscConfig+0x53c>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa6:	f7fa fd03 	bl	80014b0 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006aae:	f7fa fcff 	bl	80014b0 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b64      	cmp	r3, #100	; 0x64
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e171      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ac0:	4b45      	ldr	r3, [pc, #276]	; (8006bd8 <HAL_RCC_OscConfig+0x53c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x446>
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	4a3e      	ldr	r2, [pc, #248]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae0:	e02d      	b.n	8006b3e <HAL_RCC_OscConfig+0x4a2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCC_OscConfig+0x468>
 8006aea:	4b3a      	ldr	r3, [pc, #232]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a39      	ldr	r2, [pc, #228]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	4b37      	ldr	r3, [pc, #220]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a36      	ldr	r2, [pc, #216]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
 8006b02:	e01c      	b.n	8006b3e <HAL_RCC_OscConfig+0x4a2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d10c      	bne.n	8006b26 <HAL_RCC_OscConfig+0x48a>
 8006b0c:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4a30      	ldr	r2, [pc, #192]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	6713      	str	r3, [r2, #112]	; 0x70
 8006b18:	4b2e      	ldr	r3, [pc, #184]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	6713      	str	r3, [r2, #112]	; 0x70
 8006b24:	e00b      	b.n	8006b3e <HAL_RCC_OscConfig+0x4a2>
 8006b26:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	6713      	str	r3, [r2, #112]	; 0x70
 8006b32:	4b28      	ldr	r3, [pc, #160]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	4a27      	ldr	r2, [pc, #156]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b38:	f023 0304 	bic.w	r3, r3, #4
 8006b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d015      	beq.n	8006b72 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fa fcb3 	bl	80014b0 <HAL_GetTick>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4e:	f7fa fcaf 	bl	80014b0 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e11f      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b64:	4b1b      	ldr	r3, [pc, #108]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ee      	beq.n	8006b4e <HAL_RCC_OscConfig+0x4b2>
 8006b70:	e014      	b.n	8006b9c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b72:	f7fa fc9d 	bl	80014b0 <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b78:	e00a      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b7a:	f7fa fc99 	bl	80014b0 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e109      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b90:	4b10      	ldr	r3, [pc, #64]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1ee      	bne.n	8006b7a <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80fe 	beq.w	8006da2 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bae:	2b18      	cmp	r3, #24
 8006bb0:	f000 80b9 	beq.w	8006d26 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	f040 809a 	bne.w	8006cf2 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <HAL_RCC_OscConfig+0x538>)
 8006bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fa fc71 	bl	80014b0 <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bd0:	e00d      	b.n	8006bee <HAL_RCC_OscConfig+0x552>
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fa fc68 	bl	80014b0 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e0da      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bee:	4b6f      	ldr	r3, [pc, #444]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f0      	bne.n	8006bdc <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bfa:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfe:	4b6c      	ldr	r3, [pc, #432]	; (8006db0 <HAL_RCC_OscConfig+0x714>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c0a:	0112      	lsls	r2, r2, #4
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	4967      	ldr	r1, [pc, #412]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	628b      	str	r3, [r1, #40]	; 0x28
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c22:	3b01      	subs	r3, #1
 8006c24:	025b      	lsls	r3, r3, #9
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	061b      	lsls	r3, r3, #24
 8006c40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c44:	4959      	ldr	r1, [pc, #356]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c4a:	4b58      	ldr	r3, [pc, #352]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4a57      	ldr	r2, [pc, #348]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c50:	f023 0301 	bic.w	r3, r3, #1
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c56:	4b55      	ldr	r3, [pc, #340]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c5a:	4b56      	ldr	r3, [pc, #344]	; (8006db4 <HAL_RCC_OscConfig+0x718>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c62:	00d2      	lsls	r2, r2, #3
 8006c64:	4951      	ldr	r1, [pc, #324]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c6a:	4b50      	ldr	r3, [pc, #320]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	f023 020c 	bic.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	494d      	ldr	r1, [pc, #308]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f023 0202 	bic.w	r2, r3, #2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	4948      	ldr	r1, [pc, #288]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c8e:	4b47      	ldr	r3, [pc, #284]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	4a46      	ldr	r2, [pc, #280]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9a:	4b44      	ldr	r3, [pc, #272]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	4a40      	ldr	r2, [pc, #256]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006cb2:	4b3e      	ldr	r3, [pc, #248]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	4a3d      	ldr	r2, [pc, #244]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cbe:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a3a      	ldr	r2, [pc, #232]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fa fbf1 	bl	80014b0 <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd2:	f7fa fbed 	bl	80014b0 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e05f      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ce4:	4b31      	ldr	r3, [pc, #196]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x636>
 8006cf0:	e057      	b.n	8006da2 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfe:	f7fa fbd7 	bl	80014b0 <HAL_GetTick>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d06:	f7fa fbd3 	bl	80014b0 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e045      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f0      	bne.n	8006d06 <HAL_RCC_OscConfig+0x66a>
 8006d24:	e03d      	b.n	8006da2 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d26:	4b21      	ldr	r3, [pc, #132]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d2c:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <HAL_RCC_OscConfig+0x710>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d031      	beq.n	8006d9e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0203 	and.w	r2, r3, #3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d12a      	bne.n	8006d9e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	091b      	lsrs	r3, r3, #4
 8006d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d122      	bne.n	8006d9e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d62:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d11a      	bne.n	8006d9e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0a5b      	lsrs	r3, r3, #9
 8006d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d111      	bne.n	8006d9e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d108      	bne.n	8006d9e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	0e1b      	lsrs	r3, r3, #24
 8006d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d001      	beq.n	8006da2 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58024400 	.word	0x58024400
 8006db0:	fffffc0c 	.word	0xfffffc0c
 8006db4:	ffff0007 	.word	0xffff0007

08006db8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e19c      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dcc:	4b8a      	ldr	r3, [pc, #552]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d910      	bls.n	8006dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dda:	4b87      	ldr	r3, [pc, #540]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 020f 	bic.w	r2, r3, #15
 8006de2:	4985      	ldr	r1, [pc, #532]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dea:	4b83      	ldr	r3, [pc, #524]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d001      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e184      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	4b7b      	ldr	r3, [pc, #492]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d908      	bls.n	8006e2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e18:	4b78      	ldr	r3, [pc, #480]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	4975      	ldr	r1, [pc, #468]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d010      	beq.n	8006e58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	4b70      	ldr	r3, [pc, #448]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d908      	bls.n	8006e58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e46:	4b6d      	ldr	r3, [pc, #436]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	496a      	ldr	r1, [pc, #424]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	4b64      	ldr	r3, [pc, #400]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d908      	bls.n	8006e86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e74:	4b61      	ldr	r3, [pc, #388]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	495e      	ldr	r1, [pc, #376]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69da      	ldr	r2, [r3, #28]
 8006e96:	4b59      	ldr	r3, [pc, #356]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d908      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ea2:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	4953      	ldr	r1, [pc, #332]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	4b4d      	ldr	r3, [pc, #308]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d908      	bls.n	8006ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed0:	4b4a      	ldr	r3, [pc, #296]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f023 020f 	bic.w	r2, r3, #15
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4947      	ldr	r1, [pc, #284]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d055      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006eee:	4b43      	ldr	r3, [pc, #268]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4940      	ldr	r1, [pc, #256]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d107      	bne.n	8006f18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f08:	4b3c      	ldr	r3, [pc, #240]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d121      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0f6      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f20:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d115      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0ea      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d107      	bne.n	8006f48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f38:	4b30      	ldr	r3, [pc, #192]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e0de      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f48:	4b2c      	ldr	r3, [pc, #176]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0d6      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f58:	4b28      	ldr	r3, [pc, #160]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f023 0207 	bic.w	r2, r3, #7
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4925      	ldr	r1, [pc, #148]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f6a:	f7fa faa1 	bl	80014b0 <HAL_GetTick>
 8006f6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f72:	f7fa fa9d 	bl	80014b0 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e0be      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d1eb      	bne.n	8006f72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d010      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d208      	bcs.n	8006fc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f023 020f 	bic.w	r2, r3, #15
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <HAL_RCC_ClockConfig+0x244>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d214      	bcs.n	8007000 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 020f 	bic.w	r2, r3, #15
 8006fde:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <HAL_RCC_ClockConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d005      	beq.n	8007000 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e086      	b.n	8007106 <HAL_RCC_ClockConfig+0x34e>
 8006ff8:	52002000 	.word	0x52002000
 8006ffc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d010      	beq.n	800702e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	4b3f      	ldr	r3, [pc, #252]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007018:	429a      	cmp	r2, r3
 800701a:	d208      	bcs.n	800702e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800701c:	4b3c      	ldr	r3, [pc, #240]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	4939      	ldr	r1, [pc, #228]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800702a:	4313      	orrs	r3, r2
 800702c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	4b34      	ldr	r3, [pc, #208]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007046:	429a      	cmp	r2, r3
 8007048:	d208      	bcs.n	800705c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	492e      	ldr	r1, [pc, #184]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 8007058:	4313      	orrs	r3, r2
 800705a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	4b28      	ldr	r3, [pc, #160]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007074:	429a      	cmp	r2, r3
 8007076:	d208      	bcs.n	800708a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	4922      	ldr	r1, [pc, #136]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 8007086:	4313      	orrs	r3, r2
 8007088:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69da      	ldr	r2, [r3, #28]
 800709a:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d208      	bcs.n	80070b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80070a6:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	4917      	ldr	r1, [pc, #92]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070b8:	f000 f834 	bl	8007124 <HAL_RCC_GetSysClockFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b14      	ldr	r3, [pc, #80]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4912      	ldr	r1, [pc, #72]	; (8007114 <HAL_RCC_ClockConfig+0x35c>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
 80070d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <HAL_RCC_ClockConfig+0x358>)
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <HAL_RCC_ClockConfig+0x35c>)
 80070e0:	5cd3      	ldrb	r3, [r2, r3]
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ec:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <HAL_RCC_ClockConfig+0x360>)
 80070ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070f0:	4a0a      	ldr	r2, [pc, #40]	; (800711c <HAL_RCC_ClockConfig+0x364>)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <HAL_RCC_ClockConfig+0x368>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fa f98e 	bl	800141c <HAL_InitTick>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	0800c1b8 	.word	0x0800c1b8
 8007118:	24000014 	.word	0x24000014
 800711c:	24000010 	.word	0x24000010
 8007120:	24000018 	.word	0x24000018

08007124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800712a:	4bb3      	ldr	r3, [pc, #716]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007132:	2b18      	cmp	r3, #24
 8007134:	f200 8155 	bhi.w	80073e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <HAL_RCC_GetSysClockFreq+0x1c>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	080071a5 	.word	0x080071a5
 8007144:	080073e3 	.word	0x080073e3
 8007148:	080073e3 	.word	0x080073e3
 800714c:	080073e3 	.word	0x080073e3
 8007150:	080073e3 	.word	0x080073e3
 8007154:	080073e3 	.word	0x080073e3
 8007158:	080073e3 	.word	0x080073e3
 800715c:	080073e3 	.word	0x080073e3
 8007160:	080071cb 	.word	0x080071cb
 8007164:	080073e3 	.word	0x080073e3
 8007168:	080073e3 	.word	0x080073e3
 800716c:	080073e3 	.word	0x080073e3
 8007170:	080073e3 	.word	0x080073e3
 8007174:	080073e3 	.word	0x080073e3
 8007178:	080073e3 	.word	0x080073e3
 800717c:	080073e3 	.word	0x080073e3
 8007180:	080071d1 	.word	0x080071d1
 8007184:	080073e3 	.word	0x080073e3
 8007188:	080073e3 	.word	0x080073e3
 800718c:	080073e3 	.word	0x080073e3
 8007190:	080073e3 	.word	0x080073e3
 8007194:	080073e3 	.word	0x080073e3
 8007198:	080073e3 	.word	0x080073e3
 800719c:	080073e3 	.word	0x080073e3
 80071a0:	080071d7 	.word	0x080071d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a4:	4b94      	ldr	r3, [pc, #592]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071b0:	4b91      	ldr	r3, [pc, #580]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	08db      	lsrs	r3, r3, #3
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	4a90      	ldr	r2, [pc, #576]	; (80073fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
 80071c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071c2:	e111      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071c4:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071c6:	61bb      	str	r3, [r7, #24]
    break;
 80071c8:	e10e      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80071ca:	4b8d      	ldr	r3, [pc, #564]	; (8007400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071cc:	61bb      	str	r3, [r7, #24]
    break;
 80071ce:	e10b      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071d0:	4b8c      	ldr	r3, [pc, #560]	; (8007404 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071d2:	61bb      	str	r3, [r7, #24]
    break;
 80071d4:	e108      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071d6:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071e0:	4b85      	ldr	r3, [pc, #532]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071ec:	4b82      	ldr	r3, [pc, #520]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071f6:	4b80      	ldr	r3, [pc, #512]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fa:	08db      	lsrs	r3, r3, #3
 80071fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80e1 	beq.w	80073dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b02      	cmp	r3, #2
 800721e:	f000 8083 	beq.w	8007328 <HAL_RCC_GetSysClockFreq+0x204>
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b02      	cmp	r3, #2
 8007226:	f200 80a1 	bhi.w	800736c <HAL_RCC_GetSysClockFreq+0x248>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x114>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d056      	beq.n	80072e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007236:	e099      	b.n	800736c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007238:	4b6f      	ldr	r3, [pc, #444]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d02d      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007244:	4b6c      	ldr	r3, [pc, #432]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	4a6b      	ldr	r2, [pc, #428]	; (80073fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
 8007254:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b62      	ldr	r3, [pc, #392]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007282:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800729e:	e087      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800740c <HAL_RCC_GetSysClockFreq+0x2e8>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b51      	ldr	r3, [pc, #324]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	e065      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007410 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b40      	ldr	r3, [pc, #256]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a02 	vldr	s12, [r7, #8]
 800730a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2e4>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007326:	e043      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007414 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b2f      	ldr	r3, [pc, #188]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a02 	vldr	s12, [r7, #8]
 800734e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736a:	e021      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007410 <HAL_RCC_GetSysClockFreq+0x2ec>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007392:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073b0:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	0a5b      	lsrs	r3, r3, #9
 80073b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ba:	3301      	adds	r3, #1
 80073bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80073cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073d4:	ee17 3a90 	vmov	r3, s15
 80073d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073da:	e005      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	61bb      	str	r3, [r7, #24]
    break;
 80073e0:	e002      	b.n	80073e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073e4:	61bb      	str	r3, [r7, #24]
    break;
 80073e6:	bf00      	nop
  }

  return sysclockfreq;
 80073e8:	69bb      	ldr	r3, [r7, #24]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3724      	adds	r7, #36	; 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	58024400 	.word	0x58024400
 80073fc:	03d09000 	.word	0x03d09000
 8007400:	003d0900 	.word	0x003d0900
 8007404:	007a1200 	.word	0x007a1200
 8007408:	46000000 	.word	0x46000000
 800740c:	4c742400 	.word	0x4c742400
 8007410:	4a742400 	.word	0x4a742400
 8007414:	4af42400 	.word	0x4af42400

08007418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800741e:	f7ff fe81 	bl	8007124 <HAL_RCC_GetSysClockFreq>
 8007422:	4602      	mov	r2, r0
 8007424:	4b10      	ldr	r3, [pc, #64]	; (8007468 <HAL_RCC_GetHCLKFreq+0x50>)
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	490f      	ldr	r1, [pc, #60]	; (800746c <HAL_RCC_GetHCLKFreq+0x54>)
 8007430:	5ccb      	ldrb	r3, [r1, r3]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	fa22 f303 	lsr.w	r3, r2, r3
 800743a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <HAL_RCC_GetHCLKFreq+0x50>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	4a09      	ldr	r2, [pc, #36]	; (800746c <HAL_RCC_GetHCLKFreq+0x54>)
 8007446:	5cd3      	ldrb	r3, [r2, r3]
 8007448:	f003 031f 	and.w	r3, r3, #31
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	fa22 f303 	lsr.w	r3, r2, r3
 8007452:	4a07      	ldr	r2, [pc, #28]	; (8007470 <HAL_RCC_GetHCLKFreq+0x58>)
 8007454:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007456:	4a07      	ldr	r2, [pc, #28]	; (8007474 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <HAL_RCC_GetHCLKFreq+0x58>)
 800745e:	681b      	ldr	r3, [r3, #0]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	58024400 	.word	0x58024400
 800746c:	0800c1b8 	.word	0x0800c1b8
 8007470:	24000014 	.word	0x24000014
 8007474:	24000010 	.word	0x24000010

08007478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800747c:	f7ff ffcc 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4904      	ldr	r1, [pc, #16]	; (80074a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	0800c1b8 	.word	0x0800c1b8

080074a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80074a8:	f7ff ffb6 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	0a1b      	lsrs	r3, r3, #8
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4904      	ldr	r1, [pc, #16]	; (80074cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80074ba:	5ccb      	ldrb	r3, [r1, r3]
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	58024400 	.word	0x58024400
 80074cc:	0800c1b8 	.word	0x0800c1b8

080074d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074d8:	2300      	movs	r3, #0
 80074da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074dc:	2300      	movs	r3, #0
 80074de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d03f      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074f4:	d02a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80074f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074fa:	d824      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007500:	d018      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007506:	d81e      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800750c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007510:	d007      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007512:	e018      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4bab      	ldr	r3, [pc, #684]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4aaa      	ldr	r2, [pc, #680]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007520:	e015      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 feff 	bl	800932c <RCCEx_PLL2_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007532:	e00c      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	2102      	movs	r1, #2
 800753a:	4618      	mov	r0, r3
 800753c:	f001 ffa8 	bl	8009490 <RCCEx_PLL3_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007544:	e003      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]
      break;
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800754c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007554:	4b9b      	ldr	r3, [pc, #620]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007560:	4998      	ldr	r1, [pc, #608]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	650b      	str	r3, [r1, #80]	; 0x50
 8007566:	e001      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d03d      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	2b04      	cmp	r3, #4
 800757e:	d826      	bhi.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	0800759d 	.word	0x0800759d
 800758c:	080075ab 	.word	0x080075ab
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075d5 	.word	0x080075d5
 8007598:	080075d5 	.word	0x080075d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800759c:	4b89      	ldr	r3, [pc, #548]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	4a88      	ldr	r2, [pc, #544]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075a8:	e015      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3304      	adds	r3, #4
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 febb 	bl	800932c <RCCEx_PLL2_Config>
 80075b6:	4603      	mov	r3, r0
 80075b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ba:	e00c      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3324      	adds	r3, #36	; 0x24
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 ff64 	bl	8009490 <RCCEx_PLL3_Config>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075cc:	e003      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
      break;
 80075d2:	e000      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075dc:	4b79      	ldr	r3, [pc, #484]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e0:	f023 0207 	bic.w	r2, r3, #7
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	4976      	ldr	r1, [pc, #472]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	650b      	str	r3, [r1, #80]	; 0x50
 80075ee:	e001      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d051      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007606:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800760a:	d036      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800760c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007610:	d830      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007616:	d032      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800761c:	d82a      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800761e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007622:	d02e      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007624:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007628:	d824      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800762a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800762e:	d018      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007634:	d81e      	bhi.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800763a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800763e:	d007      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007640:	e018      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007642:	4b60      	ldr	r3, [pc, #384]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a5f      	ldr	r2, [pc, #380]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800764e:	e019      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fe68 	bl	800932c <RCCEx_PLL2_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007660:	e010      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3324      	adds	r3, #36	; 0x24
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 ff11 	bl	8009490 <RCCEx_PLL3_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007672:	e007      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	e004      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800768a:	4b4e      	ldr	r3, [pc, #312]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007698:	494a      	ldr	r1, [pc, #296]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800769a:	4313      	orrs	r3, r2
 800769c:	658b      	str	r3, [r1, #88]	; 0x58
 800769e:	e001      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d051      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80076ba:	d036      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80076bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80076c0:	d830      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80076c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076c6:	d032      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80076c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076cc:	d82a      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80076ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076d2:	d02e      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80076d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076d8:	d824      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80076da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076de:	d018      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80076e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e4:	d81e      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80076ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ee:	d007      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80076f0:	e018      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f2:	4b34      	ldr	r3, [pc, #208]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a33      	ldr	r2, [pc, #204]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076fe:	e019      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f001 fe10 	bl	800932c <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007710:	e010      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f001 feb9 	bl	8009490 <RCCEx_PLL3_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007722:	e007      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	e004      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800772a:	bf00      	nop
 800772c:	e002      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800772e:	bf00      	nop
 8007730:	e000      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007748:	491e      	ldr	r1, [pc, #120]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	658b      	str	r3, [r1, #88]	; 0x58
 800774e:	e001      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d035      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d01c      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007768:	2b30      	cmp	r3, #48	; 0x30
 800776a:	d817      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800776c:	2b20      	cmp	r3, #32
 800776e:	d00c      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007770:	2b20      	cmp	r3, #32
 8007772:	d813      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d016      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8007778:	2b10      	cmp	r3, #16
 800777a:	d10f      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4b11      	ldr	r3, [pc, #68]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a10      	ldr	r2, [pc, #64]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007788:	e00e      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f001 fdcb 	bl	800932c <RCCEx_PLL2_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800779a:	e005      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
      break;
 80077a0:	e002      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80077a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ba:	4902      	ldr	r1, [pc, #8]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077c0:	e004      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d047      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e0:	d030      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80077e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e6:	d82a      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80077e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ec:	d02c      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80077ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f2:	d824      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80077f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077f8:	d018      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80077fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fe:	d81e      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d007      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800780a:	e018      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780c:	4bac      	ldr	r3, [pc, #688]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	4aab      	ldr	r2, [pc, #684]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007818:	e017      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3304      	adds	r3, #4
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fd83 	bl	800932c <RCCEx_PLL2_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800782a:	e00e      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3324      	adds	r3, #36	; 0x24
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fe2c 	bl	8009490 <RCCEx_PLL3_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800783c:	e005      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
      break;
 8007842:	e002      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007844:	bf00      	nop
 8007846:	e000      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007850:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007854:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	4998      	ldr	r1, [pc, #608]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800785e:	4313      	orrs	r3, r2
 8007860:	650b      	str	r3, [r1, #80]	; 0x50
 8007862:	e001      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d049      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800787c:	d02e      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800787e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007882:	d828      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007884:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007888:	d02a      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800788a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800788e:	d822      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007890:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007894:	d026      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8007896:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800789a:	d81c      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800789c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a0:	d010      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80078a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078a6:	d816      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01d      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d111      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3304      	adds	r3, #4
 80078b6:	2101      	movs	r1, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fd37 	bl	800932c <RCCEx_PLL2_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078c2:	e012      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3324      	adds	r3, #36	; 0x24
 80078c8:	2101      	movs	r1, #1
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 fde0 	bl	8009490 <RCCEx_PLL3_Config>
 80078d0:	4603      	mov	r3, r0
 80078d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078d4:	e009      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	75fb      	strb	r3, [r7, #23]
      break;
 80078da:	e006      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80078dc:	bf00      	nop
 80078de:	e004      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80078e0:	bf00      	nop
 80078e2:	e002      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80078e4:	bf00      	nop
 80078e6:	e000      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80078e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078f0:	4b73      	ldr	r3, [pc, #460]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	4970      	ldr	r1, [pc, #448]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	650b      	str	r3, [r1, #80]	; 0x50
 8007902:	e001      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d04b      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800791a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800791e:	d02e      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007924:	d828      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d02a      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800792c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007930:	d822      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007936:	d026      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800793c:	d81c      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800793e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007942:	d010      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007948:	d816      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01d      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800794e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007952:	d111      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	2101      	movs	r1, #1
 800795a:	4618      	mov	r0, r3
 800795c:	f001 fce6 	bl	800932c <RCCEx_PLL2_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007964:	e012      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3324      	adds	r3, #36	; 0x24
 800796a:	2101      	movs	r1, #1
 800796c:	4618      	mov	r0, r3
 800796e:	f001 fd8f 	bl	8009490 <RCCEx_PLL3_Config>
 8007972:	4603      	mov	r3, r0
 8007974:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007976:	e009      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	e006      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800797e:	bf00      	nop
 8007980:	e004      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800798a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007992:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007996:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079a0:	4947      	ldr	r1, [pc, #284]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	658b      	str	r3, [r1, #88]	; 0x58
 80079a6:	e001      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d02f      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d00e      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80079c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c6:	d814      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d015      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80079cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d0:	d10f      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d2:	4b3b      	ldr	r3, [pc, #236]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079de:	e00c      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	2101      	movs	r1, #1
 80079e6:	4618      	mov	r0, r3
 80079e8:	f001 fca0 	bl	800932c <RCCEx_PLL2_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079f0:	e003      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
      break;
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80079f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d109      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a00:	4b2f      	ldr	r3, [pc, #188]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0c:	492c      	ldr	r1, [pc, #176]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	650b      	str	r3, [r1, #80]	; 0x50
 8007a12:	e001      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d032      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d81b      	bhi.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a6b 	.word	0x08007a6b
 8007a38:	08007a45 	.word	0x08007a45
 8007a3c:	08007a53 	.word	0x08007a53
 8007a40:	08007a6b 	.word	0x08007a6b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a44:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	4a1d      	ldr	r2, [pc, #116]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a50:	e00c      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	2102      	movs	r1, #2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 fc67 	bl	800932c <RCCEx_PLL2_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a62:	e003      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	75fb      	strb	r3, [r7, #23]
      break;
 8007a68:	e000      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a76:	f023 0203 	bic.w	r2, r3, #3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	4910      	ldr	r1, [pc, #64]	; (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a84:	e001      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 808a 	beq.w	8007bac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aa4:	f7f9 fd04 	bl	80014b0 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aaa:	e00d      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aac:	f7f9 fd00 	bl	80014b0 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b64      	cmp	r3, #100	; 0x64
 8007ab8:	d906      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	75fb      	strb	r3, [r7, #23]
        break;
 8007abe:	e009      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac8:	4bb9      	ldr	r3, [pc, #740]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0eb      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d166      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ada:	4bb6      	ldr	r3, [pc, #728]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007adc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ae4:	4053      	eors	r3, r2
 8007ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aee:	4bb1      	ldr	r3, [pc, #708]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af8:	4bae      	ldr	r3, [pc, #696]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	4aad      	ldr	r2, [pc, #692]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b02:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b04:	4bab      	ldr	r3, [pc, #684]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	4aaa      	ldr	r2, [pc, #680]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b0e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b10:	4aa8      	ldr	r2, [pc, #672]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b20:	d115      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7f9 fcc5 	bl	80014b0 <HAL_GetTick>
 8007b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b28:	e00b      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2a:	f7f9 fcc1 	bl	80014b0 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d902      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b40:	e005      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b42:	4b9c      	ldr	r3, [pc, #624]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0ed      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d126      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b62:	d10d      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007b64:	4b93      	ldr	r3, [pc, #588]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b72:	0919      	lsrs	r1, r3, #4
 8007b74:	4b90      	ldr	r3, [pc, #576]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007b76:	400b      	ands	r3, r1
 8007b78:	498e      	ldr	r1, [pc, #568]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
 8007b7e:	e005      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007b80:	4b8c      	ldr	r3, [pc, #560]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	4a8b      	ldr	r2, [pc, #556]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b8a:	6113      	str	r3, [r2, #16]
 8007b8c:	4b89      	ldr	r3, [pc, #548]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9a:	4986      	ldr	r1, [pc, #536]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	670b      	str	r3, [r1, #112]	; 0x70
 8007ba0:	e004      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	75bb      	strb	r3, [r7, #22]
 8007ba6:	e001      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d07e      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	2b28      	cmp	r3, #40	; 0x28
 8007bbe:	d867      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007c97 	.word	0x08007c97
 8007bcc:	08007c91 	.word	0x08007c91
 8007bd0:	08007c91 	.word	0x08007c91
 8007bd4:	08007c91 	.word	0x08007c91
 8007bd8:	08007c91 	.word	0x08007c91
 8007bdc:	08007c91 	.word	0x08007c91
 8007be0:	08007c91 	.word	0x08007c91
 8007be4:	08007c91 	.word	0x08007c91
 8007be8:	08007c6d 	.word	0x08007c6d
 8007bec:	08007c91 	.word	0x08007c91
 8007bf0:	08007c91 	.word	0x08007c91
 8007bf4:	08007c91 	.word	0x08007c91
 8007bf8:	08007c91 	.word	0x08007c91
 8007bfc:	08007c91 	.word	0x08007c91
 8007c00:	08007c91 	.word	0x08007c91
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007c7f 	.word	0x08007c7f
 8007c0c:	08007c91 	.word	0x08007c91
 8007c10:	08007c91 	.word	0x08007c91
 8007c14:	08007c91 	.word	0x08007c91
 8007c18:	08007c91 	.word	0x08007c91
 8007c1c:	08007c91 	.word	0x08007c91
 8007c20:	08007c91 	.word	0x08007c91
 8007c24:	08007c91 	.word	0x08007c91
 8007c28:	08007c97 	.word	0x08007c97
 8007c2c:	08007c91 	.word	0x08007c91
 8007c30:	08007c91 	.word	0x08007c91
 8007c34:	08007c91 	.word	0x08007c91
 8007c38:	08007c91 	.word	0x08007c91
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007c91 	.word	0x08007c91
 8007c44:	08007c91 	.word	0x08007c91
 8007c48:	08007c97 	.word	0x08007c97
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007c91 	.word	0x08007c91
 8007c54:	08007c91 	.word	0x08007c91
 8007c58:	08007c91 	.word	0x08007c91
 8007c5c:	08007c91 	.word	0x08007c91
 8007c60:	08007c91 	.word	0x08007c91
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	08007c97 	.word	0x08007c97
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	2101      	movs	r1, #1
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fb5a 	bl	800932c <RCCEx_PLL2_Config>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c7c:	e00c      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3324      	adds	r3, #36	; 0x24
 8007c82:	2101      	movs	r1, #1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 fc03 	bl	8009490 <RCCEx_PLL3_Config>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c8e:	e003      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e000      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007c9e:	4b45      	ldr	r3, [pc, #276]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007caa:	4942      	ldr	r1, [pc, #264]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	654b      	str	r3, [r1, #84]	; 0x54
 8007cb0:	e001      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d037      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d820      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007d13 	.word	0x08007d13
 8007cd4:	08007ce9 	.word	0x08007ce9
 8007cd8:	08007cfb 	.word	0x08007cfb
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d13 	.word	0x08007d13
 8007ce4:	08007d13 	.word	0x08007d13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fb1c 	bl	800932c <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007cf8:	e00c      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	; 0x24
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 fbc5 	bl	8009490 <RCCEx_PLL3_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d0a:	e003      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d1a:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	f023 0207 	bic.w	r2, r3, #7
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d26:	4923      	ldr	r1, [pc, #140]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d2c:	e001      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d040      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d821      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d93 	.word	0x08007d93
 8007d54:	08007d69 	.word	0x08007d69
 8007d58:	08007d7b 	.word	0x08007d7b
 8007d5c:	08007d93 	.word	0x08007d93
 8007d60:	08007d93 	.word	0x08007d93
 8007d64:	08007d93 	.word	0x08007d93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fadc 	bl	800932c <RCCEx_PLL2_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d78:	e00c      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3324      	adds	r3, #36	; 0x24
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fb85 	bl	8009490 <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d8a:	e003      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d110      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f023 0207 	bic.w	r2, r3, #7
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da8:	4902      	ldr	r1, [pc, #8]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	658b      	str	r3, [r1, #88]	; 0x58
 8007dae:	e007      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007db0:	58024800 	.word	0x58024800
 8007db4:	58024400 	.word	0x58024400
 8007db8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d04b      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dd6:	d02e      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ddc:	d828      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de2:	d02a      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de8:	d822      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dee:	d026      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007df4:	d81c      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfa:	d010      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e00:	d816      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01d      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0a:	d111      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fa8a 	bl	800932c <RCCEx_PLL2_Config>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e1c:	e012      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3324      	adds	r3, #36	; 0x24
 8007e22:	2102      	movs	r1, #2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fb33 	bl	8009490 <RCCEx_PLL3_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e2e:	e009      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	75fb      	strb	r3, [r7, #23]
      break;
 8007e34:	e006      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e36:	bf00      	nop
 8007e38:	e004      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e4a:	4bb2      	ldr	r3, [pc, #712]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e58:	49ae      	ldr	r1, [pc, #696]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	654b      	str	r3, [r1, #84]	; 0x54
 8007e5e:	e001      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d04b      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e7a:	d02e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007e7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e80:	d828      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e86:	d02a      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8c:	d822      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e92:	d026      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e98:	d81c      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea4:	d816      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eae:	d111      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fa38 	bl	800932c <RCCEx_PLL2_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ec0:	e012      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3324      	adds	r3, #36	; 0x24
 8007ec6:	2102      	movs	r1, #2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fae1 	bl	8009490 <RCCEx_PLL3_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ed2:	e009      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed8:	e006      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007eda:	bf00      	nop
 8007edc:	e004      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007ede:	bf00      	nop
 8007ee0:	e002      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007eee:	4b89      	ldr	r3, [pc, #548]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007efc:	4985      	ldr	r1, [pc, #532]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	658b      	str	r3, [r1, #88]	; 0x58
 8007f02:	e001      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d04b      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f1e:	d02e      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007f20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f24:	d828      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f2a:	d02a      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f30:	d822      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f36:	d026      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007f38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f3c:	d81c      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f42:	d010      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f48:	d816      	bhi.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01d      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f52:	d111      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3304      	adds	r3, #4
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 f9e6 	bl	800932c <RCCEx_PLL2_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f64:	e012      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3324      	adds	r3, #36	; 0x24
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fa8f 	bl	8009490 <RCCEx_PLL3_Config>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f76:	e009      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7c:	e006      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007f7e:	bf00      	nop
 8007f80:	e004      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007f82:	bf00      	nop
 8007f84:	e002      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007f86:	bf00      	nop
 8007f88:	e000      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f92:	4b60      	ldr	r3, [pc, #384]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fa0:	495c      	ldr	r1, [pc, #368]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8007fa6:	e001      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d018      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc0:	d10a      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3324      	adds	r3, #36	; 0x24
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f001 fa61 	bl	8009490 <RCCEx_PLL3_Config>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007fd8:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe4:	494b      	ldr	r1, [pc, #300]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01a      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008000:	d10a      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3324      	adds	r3, #36	; 0x24
 8008006:	2102      	movs	r1, #2
 8008008:	4618      	mov	r0, r3
 800800a:	f001 fa41 	bl	8009490 <RCCEx_PLL3_Config>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008018:	4b3e      	ldr	r3, [pc, #248]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800801a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008026:	493b      	ldr	r1, [pc, #236]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008028:	4313      	orrs	r3, r2
 800802a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d034      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800803e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008042:	d01d      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008048:	d817      	bhi.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800804e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008052:	d009      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008054:	e011      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3304      	adds	r3, #4
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f965 	bl	800932c <RCCEx_PLL2_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008066:	e00c      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3324      	adds	r3, #36	; 0x24
 800806c:	2102      	movs	r1, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f001 fa0e 	bl	8009490 <RCCEx_PLL3_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
      break;
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008088:	4b22      	ldr	r3, [pc, #136]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800808a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008096:	491f      	ldr	r1, [pc, #124]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008098:	4313      	orrs	r3, r2
 800809a:	658b      	str	r3, [r1, #88]	; 0x58
 800809c:	e001      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d036      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080b8:	d01c      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80080ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080be:	d816      	bhi.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80080c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c4:	d003      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80080c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ca:	d007      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80080cc:	e00f      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	4a10      	ldr	r2, [pc, #64]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80080da:	e00c      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3324      	adds	r3, #36	; 0x24
 80080e0:	2101      	movs	r1, #1
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 f9d4 	bl	8009490 <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080ec:	e003      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	75fb      	strb	r3, [r7, #23]
      break;
 80080f2:	e000      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80080f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10d      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810a:	4902      	ldr	r1, [pc, #8]	; (8008114 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800810c:	4313      	orrs	r3, r2
 800810e:	654b      	str	r3, [r1, #84]	; 0x54
 8008110:	e004      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008112:	bf00      	nop
 8008114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d029      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008134:	d007      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008136:	e00f      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008138:	4b61      	ldr	r3, [pc, #388]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a60      	ldr	r2, [pc, #384]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800813e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008144:	e00b      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3304      	adds	r3, #4
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f8ed 	bl	800932c <RCCEx_PLL2_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008156:	e002      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
      break;
 800815c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d109      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008164:	4b56      	ldr	r3, [pc, #344]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008170:	4953      	ldr	r1, [pc, #332]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008172:	4313      	orrs	r3, r2
 8008174:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008176:	e001      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3324      	adds	r3, #36	; 0x24
 800818c:	2102      	movs	r1, #2
 800818e:	4618      	mov	r0, r3
 8008190:	f001 f97e 	bl	8009490 <RCCEx_PLL3_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d030      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b2:	d017      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b8:	d811      	bhi.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80081ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081be:	d013      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80081c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c4:	d80b      	bhi.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d010      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d106      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d0:	4b3b      	ldr	r3, [pc, #236]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	4a3a      	ldr	r2, [pc, #232]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80081dc:	e007      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
      break;
 80081e2:	e004      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081e4:	bf00      	nop
 80081e6:	e002      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081e8:	bf00      	nop
 80081ea:	e000      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80081ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081f4:	4b32      	ldr	r3, [pc, #200]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008200:	492f      	ldr	r1, [pc, #188]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	654b      	str	r3, [r1, #84]	; 0x54
 8008206:	e001      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008218:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	4926      	ldr	r1, [pc, #152]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008226:	4313      	orrs	r3, r2
 8008228:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008236:	4b22      	ldr	r3, [pc, #136]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008242:	491f      	ldr	r1, [pc, #124]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008244:	4313      	orrs	r3, r2
 8008246:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00d      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008254:	4b1a      	ldr	r3, [pc, #104]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800825a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800825e:	6113      	str	r3, [r2, #16]
 8008260:	4b17      	ldr	r3, [pc, #92]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800826a:	4915      	ldr	r1, [pc, #84]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800826c:	4313      	orrs	r3, r2
 800826e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	da08      	bge.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008278:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800827a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	490e      	ldr	r1, [pc, #56]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008286:	4313      	orrs	r3, r2
 8008288:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a4:	4906      	ldr	r1, [pc, #24]	; (80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	e000      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	58024400 	.word	0x58024400

080082c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b090      	sub	sp, #64	; 0x40
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d2:	f040 8089 	bne.w	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80082d6:	4b95      	ldr	r3, [pc, #596]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80082d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d87d      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008301 	.word	0x08008301
 80082f0:	08008325 	.word	0x08008325
 80082f4:	08008349 	.word	0x08008349
 80082f8:	080083dd 	.word	0x080083dd
 80082fc:	0800836d 	.word	0x0800836d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008300:	4b8a      	ldr	r3, [pc, #552]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800830c:	d107      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800830e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008312:	4618      	mov	r0, r3
 8008314:	f000 feb8 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800831c:	e3ed      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008322:	e3ea      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008324:	4b81      	ldr	r3, [pc, #516]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800832c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008330:	d107      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008332:	f107 0318 	add.w	r3, r7, #24
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fbfe 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008340:	e3db      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008346:	e3d8      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008348:	4b78      	ldr	r3, [pc, #480]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008354:	d107      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008356:	f107 030c 	add.w	r3, r7, #12
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fd40 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008364:	e3c9      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800836a:	e3c6      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800836c:	4b6f      	ldr	r3, [pc, #444]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800836e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008374:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008376:	4b6d      	ldr	r3, [pc, #436]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b04      	cmp	r3, #4
 8008380:	d10c      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008388:	4b68      	ldr	r3, [pc, #416]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	08db      	lsrs	r3, r3, #3
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	4a67      	ldr	r2, [pc, #412]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800839a:	e01e      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800839c:	4b63      	ldr	r3, [pc, #396]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80083b2:	4b60      	ldr	r3, [pc, #384]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b6:	e010      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b8:	4b5c      	ldr	r3, [pc, #368]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80083ce:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d2:	e002      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80083d8:	e38f      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80083da:	e38e      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80083dc:	4b57      	ldr	r3, [pc, #348]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e0:	e38b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	e388      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ee:	f040 80a7 	bne.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80083f2:	4b4e      	ldr	r3, [pc, #312]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80083fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008402:	d054      	beq.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800840a:	f200 808b 	bhi.w	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008414:	f000 8083 	beq.w	800851e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800841e:	f200 8081 	bhi.w	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008428:	d02f      	beq.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008430:	d878      	bhi.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	2b00      	cmp	r3, #0
 8008436:	d004      	beq.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800843e:	d012      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008440:	e070      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008442:	4b3a      	ldr	r3, [pc, #232]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800844e:	d107      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fe17 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800845e:	e34c      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008460:	2300      	movs	r3, #0
 8008462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008464:	e349      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008466:	4b31      	ldr	r3, [pc, #196]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008472:	d107      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008474:	f107 0318 	add.w	r3, r7, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fb5d 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008482:	e33a      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008488:	e337      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800848a:	4b28      	ldr	r3, [pc, #160]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008496:	d107      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fc9f 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084a6:	e328      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ac:	e325      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084b6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084b8:	4b1c      	ldr	r3, [pc, #112]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d10c      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80084c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d109      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084ca:	4b18      	ldr	r3, [pc, #96]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	08db      	lsrs	r3, r3, #3
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	4a16      	ldr	r2, [pc, #88]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80084d6:	fa22 f303 	lsr.w	r3, r2, r3
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084dc:	e01e      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ea:	d106      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f2:	d102      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084f4:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f8:	e010      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008506:	d106      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008514:	e002      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800851a:	e2ee      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800851c:	e2ed      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800851e:	4b07      	ldr	r3, [pc, #28]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008522:	e2ea      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008528:	e2e7      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	03d09000 	.word	0x03d09000
 8008534:	003d0900 	.word	0x003d0900
 8008538:	007a1200 	.word	0x007a1200
 800853c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008546:	f040 809c 	bne.w	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800854a:	4b9e      	ldr	r3, [pc, #632]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800854c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008552:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800855a:	d054      	beq.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008562:	f200 808b 	bhi.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800856c:	f000 8083 	beq.w	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008576:	f200 8081 	bhi.w	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008580:	d02f      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008588:	d878      	bhi.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008596:	d012      	beq.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008598:	e070      	b.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800859a:	4b8a      	ldr	r3, [pc, #552]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085a6:	d107      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fd6b 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085b6:	e2a0      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085bc:	e29d      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085be:	4b81      	ldr	r3, [pc, #516]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ca:	d107      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085cc:	f107 0318 	add.w	r3, r7, #24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fab1 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80085da:	e28e      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80085dc:	2300      	movs	r3, #0
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085e0:	e28b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085e2:	4b78      	ldr	r3, [pc, #480]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ee:	d107      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fbf3 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085fe:	e27c      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008604:	e279      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008606:	4b6f      	ldr	r3, [pc, #444]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800860e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008610:	4b6c      	ldr	r3, [pc, #432]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b04      	cmp	r3, #4
 800861a:	d10c      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008622:	4b68      	ldr	r3, [pc, #416]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	4a66      	ldr	r2, [pc, #408]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008634:	e01e      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008636:	4b63      	ldr	r3, [pc, #396]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008642:	d106      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800864a:	d102      	bne.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800864c:	4b5f      	ldr	r3, [pc, #380]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008650:	e010      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008652:	4b5c      	ldr	r3, [pc, #368]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800865e:	d106      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008666:	d102      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008668:	4b59      	ldr	r3, [pc, #356]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800866c:	e002      	b.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008672:	e242      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008674:	e241      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008676:	4b57      	ldr	r3, [pc, #348]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800867a:	e23e      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008680:	e23b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	f040 80a6 	bne.w	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800868c:	4b4d      	ldr	r3, [pc, #308]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800868e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008690:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800869c:	d054      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a4:	f200 808b 	bhi.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086ae:	f000 8083 	beq.w	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086b8:	f200 8081 	bhi.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c2:	d02f      	beq.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ca:	d878      	bhi.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d8:	d012      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80086da:	e070      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086dc:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086e8:	d107      	bne.n	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fcca 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086f8:	e1ff      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086fe:	e1fc      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008700:	4b30      	ldr	r3, [pc, #192]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800870c:	d107      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800870e:	f107 0318 	add.w	r3, r7, #24
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fa10 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800871c:	e1ed      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008722:	e1ea      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008730:	d107      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fb52 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008740:	e1db      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008746:	e1d8      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008748:	4b1e      	ldr	r3, [pc, #120]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800874a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008750:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 0304 	and.w	r3, r3, #4
 800875a:	2b04      	cmp	r3, #4
 800875c:	d10c      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008764:	4b17      	ldr	r3, [pc, #92]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	08db      	lsrs	r3, r3, #3
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	4a16      	ldr	r2, [pc, #88]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008770:	fa22 f303 	lsr.w	r3, r2, r3
 8008774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008776:	e01e      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008778:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008784:	d106      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800878c:	d102      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008792:	e010      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008794:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a0:	d106      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a8:	d102      	bne.n	80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ae:	e002      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087b4:	e1a1      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087b6:	e1a0      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087bc:	e19d      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c2:	e19a      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80087c4:	58024400 	.word	0x58024400
 80087c8:	03d09000 	.word	0x03d09000
 80087cc:	003d0900 	.word	0x003d0900
 80087d0:	007a1200 	.word	0x007a1200
 80087d4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087de:	d173      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80087e0:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80087e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f0:	d02f      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f8:	d863      	bhi.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8008800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008806:	d012      	beq.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8008808:	e05b      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800880a:	4b90      	ldr	r3, [pc, #576]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008816:	d107      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008818:	f107 0318 	add.w	r3, r7, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f98b 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008826:	e168      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800882c:	e165      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800882e:	4b87      	ldr	r3, [pc, #540]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f000 facd 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800884a:	e156      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008850:	e153      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008852:	4b7e      	ldr	r3, [pc, #504]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800885a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800885c:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d10c      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800886e:	4b77      	ldr	r3, [pc, #476]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	4a75      	ldr	r2, [pc, #468]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800887a:	fa22 f303 	lsr.w	r3, r2, r3
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008880:	e01e      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008882:	4b72      	ldr	r3, [pc, #456]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888e:	d106      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8008890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008896:	d102      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008898:	4b6e      	ldr	r3, [pc, #440]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800889c:	e010      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800889e:	4b6b      	ldr	r3, [pc, #428]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80088b4:	4b68      	ldr	r3, [pc, #416]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088b8:	e002      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80088be:	e11c      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80088c0:	e11b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c6:	e118      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ce:	d133      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80088d0:	4b5e      	ldr	r3, [pc, #376]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088e6:	d012      	beq.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80088e8:	e023      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ea:	4b58      	ldr	r3, [pc, #352]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f6:	d107      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fbc3 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008906:	e0f8      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800890c:	e0f5      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890e:	4b4f      	ldr	r3, [pc, #316]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800891a:	d107      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891c:	f107 0318 	add.w	r3, r7, #24
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f909 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800892a:	e0e6      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008930:	e0e3      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008936:	e0e0      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800893e:	f040 808d 	bne.w	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008942:	4b42      	ldr	r3, [pc, #264]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008946:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800894a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008952:	d06b      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895a:	d874      	bhi.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008962:	d056      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896a:	d86c      	bhi.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008972:	d03b      	beq.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800897a:	d864      	bhi.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008982:	d021      	beq.n	80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d85c      	bhi.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008998:	d004      	beq.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800899a:	e054      	b.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800899c:	f000 f8b6 	bl	8008b0c <HAL_RCCEx_GetD3PCLK1Freq>
 80089a0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80089a2:	e0aa      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089a4:	4b29      	ldr	r3, [pc, #164]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089b0:	d107      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b2:	f107 0318 	add.w	r3, r7, #24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f8be 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089c0:	e09b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80089c2:	2300      	movs	r3, #0
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c6:	e098      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089c8:	4b20      	ldr	r3, [pc, #128]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d4:	d107      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d6:	f107 030c 	add.w	r3, r7, #12
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fa00 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089e4:	e089      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ea:	e086      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089ec:	4b17      	ldr	r3, [pc, #92]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d109      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089f8:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	08db      	lsrs	r3, r3, #3
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008a04:	fa22 f303 	lsr.w	r3, r2, r3
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a0a:	e076      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a10:	e073      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1e:	d102      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8008a20:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a24:	e069      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a2a:	e066      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a2c:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a38:	d102      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a3e:	e05c      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a44:	e059      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a4a:	e056      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	03d09000 	.word	0x03d09000
 8008a54:	003d0900 	.word	0x003d0900
 8008a58:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a62:	d148      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008a64:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a6c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a74:	d02a      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7c:	d838      	bhi.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a8a:	d00d      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8008a8c:	e030      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a8e:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aa0:	e02b      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa6:	e028      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aa8:	4b16      	ldr	r3, [pc, #88]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fae4 	bl	8009088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ac4:	e019      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aca:	e016      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008acc:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ad8:	d107      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ada:	f107 0318 	add.w	r3, r7, #24
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f82a 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ae8:	e007      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aee:	e004      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af4:	e001      	b.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3740      	adds	r7, #64	; 0x40
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	58024400 	.word	0x58024400
 8008b08:	007a1200 	.word	0x007a1200

08008b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b10:	f7fe fc82 	bl	8007418 <HAL_RCC_GetHCLKFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	4904      	ldr	r1, [pc, #16]	; (8008b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	58024400 	.word	0x58024400
 8008b34:	0800c1b8 	.word	0x0800c1b8

08008b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b089      	sub	sp, #36	; 0x24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b40:	4ba1      	ldr	r3, [pc, #644]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b4a:	4b9f      	ldr	r3, [pc, #636]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	0b1b      	lsrs	r3, r3, #12
 8008b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b56:	4b9c      	ldr	r3, [pc, #624]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	091b      	lsrs	r3, r3, #4
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b62:	4b99      	ldr	r3, [pc, #612]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	fb02 f303 	mul.w	r3, r2, r3
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8111 	beq.w	8008da8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	f000 8083 	beq.w	8008c94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	f200 80a1 	bhi.w	8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d056      	beq.n	8008c50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ba2:	e099      	b.n	8008cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ba4:	4b88      	ldr	r3, [pc, #544]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d02d      	beq.n	8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bb0:	4b85      	ldr	r3, [pc, #532]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	08db      	lsrs	r3, r3, #3
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	4a84      	ldr	r2, [pc, #528]	; (8008dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b7b      	ldr	r3, [pc, #492]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c0a:	e087      	b.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1e:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c4e:	e065      	b.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	ee07 3a90 	vmov	s15, r3
 8008c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c62:	4b59      	ldr	r3, [pc, #356]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c92:	e043      	b.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b48      	ldr	r3, [pc, #288]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cd6:	e021      	b.n	8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008d1c:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d20:	0a5b      	lsrs	r3, r3, #9
 8008d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d42:	ee17 2a90 	vmov	r2, s15
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d4a:	4b1f      	ldr	r3, [pc, #124]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d70:	ee17 2a90 	vmov	r2, s15
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d78:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7c:	0e1b      	lsrs	r3, r3, #24
 8008d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d82:	ee07 3a90 	vmov	s15, r3
 8008d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d9e:	ee17 2a90 	vmov	r2, s15
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008da6:	e008      	b.n	8008dba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	609a      	str	r2, [r3, #8]
}
 8008dba:	bf00      	nop
 8008dbc:	3724      	adds	r7, #36	; 0x24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	58024400 	.word	0x58024400
 8008dcc:	03d09000 	.word	0x03d09000
 8008dd0:	46000000 	.word	0x46000000
 8008dd4:	4c742400 	.word	0x4c742400
 8008dd8:	4a742400 	.word	0x4a742400
 8008ddc:	4af42400 	.word	0x4af42400

08008de0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b089      	sub	sp, #36	; 0x24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008de8:	4ba1      	ldr	r3, [pc, #644]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008df2:	4b9f      	ldr	r3, [pc, #636]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	0d1b      	lsrs	r3, r3, #20
 8008df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dfe:	4b9c      	ldr	r3, [pc, #624]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008e0a:	4b99      	ldr	r3, [pc, #612]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	08db      	lsrs	r3, r3, #3
 8008e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	fb02 f303 	mul.w	r3, r2, r3
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8111 	beq.w	8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	f000 8083 	beq.w	8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	f200 80a1 	bhi.w	8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d003      	beq.n	8008e4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d056      	beq.n	8008ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e4a:	e099      	b.n	8008f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e4c:	4b88      	ldr	r3, [pc, #544]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d02d      	beq.n	8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e58:	4b85      	ldr	r3, [pc, #532]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	08db      	lsrs	r3, r3, #3
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	4a84      	ldr	r2, [pc, #528]	; (8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
 8008e68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	ee07 3a90 	vmov	s15, r3
 8008e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b7b      	ldr	r3, [pc, #492]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008eb2:	e087      	b.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800907c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b6a      	ldr	r3, [pc, #424]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ef6:	e065      	b.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	4b59      	ldr	r3, [pc, #356]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f3a:	e043      	b.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4e:	4b48      	ldr	r3, [pc, #288]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f7e:	e021      	b.n	8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f92:	4b37      	ldr	r3, [pc, #220]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008fc4:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	0a5b      	lsrs	r3, r3, #9
 8008fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fce:	ee07 3a90 	vmov	s15, r3
 8008fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fea:	ee17 2a90 	vmov	r2, s15
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008ff2:	4b1f      	ldr	r3, [pc, #124]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	0c1b      	lsrs	r3, r3, #16
 8008ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffc:	ee07 3a90 	vmov	s15, r3
 8009000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800900c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009018:	ee17 2a90 	vmov	r2, s15
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009020:	4b13      	ldr	r3, [pc, #76]	; (8009070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	0e1b      	lsrs	r3, r3, #24
 8009026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902a:	ee07 3a90 	vmov	s15, r3
 800902e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800903a:	edd7 6a07 	vldr	s13, [r7, #28]
 800903e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009046:	ee17 2a90 	vmov	r2, s15
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800904e:	e008      	b.n	8009062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	609a      	str	r2, [r3, #8]
}
 8009062:	bf00      	nop
 8009064:	3724      	adds	r7, #36	; 0x24
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	46000000 	.word	0x46000000
 800907c:	4c742400 	.word	0x4c742400
 8009080:	4a742400 	.word	0x4a742400
 8009084:	4af42400 	.word	0x4af42400

08009088 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009088:	b480      	push	{r7}
 800908a:	b089      	sub	sp, #36	; 0x24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009090:	4ba0      	ldr	r3, [pc, #640]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800909a:	4b9e      	ldr	r3, [pc, #632]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	091b      	lsrs	r3, r3, #4
 80090a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090a6:	4b9b      	ldr	r3, [pc, #620]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090b0:	4b98      	ldr	r3, [pc, #608]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 8111 	beq.w	80092f6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	f000 8083 	beq.w	80091e2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	f200 80a1 	bhi.w	8009226 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d056      	beq.n	800919e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80090f0:	e099      	b.n	8009226 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f2:	4b88      	ldr	r3, [pc, #544]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d02d      	beq.n	800915a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090fe:	4b85      	ldr	r3, [pc, #532]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	08db      	lsrs	r3, r3, #3
 8009104:	f003 0303 	and.w	r3, r3, #3
 8009108:	4a83      	ldr	r2, [pc, #524]	; (8009318 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800910a:	fa22 f303 	lsr.w	r3, r2, r3
 800910e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	ee07 3a90 	vmov	s15, r3
 8009120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009128:	4b7a      	ldr	r3, [pc, #488]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	ed97 6a03 	vldr	s12, [r7, #12]
 800913c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800931c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009154:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009158:	e087      	b.n	800926a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009164:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916c:	4b69      	ldr	r3, [pc, #420]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009180:	eddf 5a66 	vldr	s11, [pc, #408]	; 800931c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009198:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800919c:	e065      	b.n	800926a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	ee07 3a90 	vmov	s15, r3
 80091a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009324 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091b0:	4b58      	ldr	r3, [pc, #352]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800931c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091e0:	e043      	b.n	800926a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	ee07 3a90 	vmov	s15, r3
 80091e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009328 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80091f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f4:	4b47      	ldr	r3, [pc, #284]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fc:	ee07 3a90 	vmov	s15, r3
 8009200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009204:	ed97 6a03 	vldr	s12, [r7, #12]
 8009208:	eddf 5a44 	vldr	s11, [pc, #272]	; 800931c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800920c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009224:	e021      	b.n	800926a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	ee07 3a90 	vmov	s15, r3
 800922c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009230:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009320 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009238:	4b36      	ldr	r3, [pc, #216]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009248:	ed97 6a03 	vldr	s12, [r7, #12]
 800924c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800931c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009268:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800926a:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926e:	0a5b      	lsrs	r3, r3, #9
 8009270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009280:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009284:	edd7 6a07 	vldr	s13, [r7, #28]
 8009288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800928c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009290:	ee17 2a90 	vmov	r2, s15
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009298:	4b1e      	ldr	r3, [pc, #120]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	0c1b      	lsrs	r3, r3, #16
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092be:	ee17 2a90 	vmov	r2, s15
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80092c6:	4b13      	ldr	r3, [pc, #76]	; (8009314 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	0e1b      	lsrs	r3, r3, #24
 80092cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ec:	ee17 2a90 	vmov	r2, s15
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80092f4:	e008      	b.n	8009308 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	609a      	str	r2, [r3, #8]
}
 8009308:	bf00      	nop
 800930a:	3724      	adds	r7, #36	; 0x24
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	58024400 	.word	0x58024400
 8009318:	03d09000 	.word	0x03d09000
 800931c:	46000000 	.word	0x46000000
 8009320:	4c742400 	.word	0x4c742400
 8009324:	4a742400 	.word	0x4a742400
 8009328:	4af42400 	.word	0x4af42400

0800932c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800933a:	4b53      	ldr	r3, [pc, #332]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d101      	bne.n	800934a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e099      	b.n	800947e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800934a:	4b4f      	ldr	r3, [pc, #316]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a4e      	ldr	r2, [pc, #312]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009356:	f7f8 f8ab 	bl	80014b0 <HAL_GetTick>
 800935a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800935c:	e008      	b.n	8009370 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800935e:	f7f8 f8a7 	bl	80014b0 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b02      	cmp	r3, #2
 800936a:	d901      	bls.n	8009370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e086      	b.n	800947e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f0      	bne.n	800935e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800937c:	4b42      	ldr	r3, [pc, #264]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	031b      	lsls	r3, r3, #12
 800938a:	493f      	ldr	r1, [pc, #252]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	628b      	str	r3, [r1, #40]	; 0x28
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	3b01      	subs	r3, #1
 8009396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	025b      	lsls	r3, r3, #9
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	061b      	lsls	r3, r3, #24
 80093bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093c0:	4931      	ldr	r1, [pc, #196]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093c6:	4b30      	ldr	r3, [pc, #192]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	492d      	ldr	r1, [pc, #180]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093d8:	4b2b      	ldr	r3, [pc, #172]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	f023 0220 	bic.w	r2, r3, #32
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4928      	ldr	r1, [pc, #160]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a26      	ldr	r2, [pc, #152]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093f0:	f023 0310 	bic.w	r3, r3, #16
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093f6:	4b24      	ldr	r3, [pc, #144]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093fa:	4b24      	ldr	r3, [pc, #144]	; (800948c <RCCEx_PLL2_Config+0x160>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	69d2      	ldr	r2, [r2, #28]
 8009402:	00d2      	lsls	r2, r2, #3
 8009404:	4920      	ldr	r1, [pc, #128]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800940a:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009410:	f043 0310 	orr.w	r3, r3, #16
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	4a19      	ldr	r2, [pc, #100]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009428:	e00f      	b.n	800944a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d106      	bne.n	800943e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009430:	4b15      	ldr	r3, [pc, #84]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a14      	ldr	r2, [pc, #80]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800943c:	e005      	b.n	800944a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	4a11      	ldr	r2, [pc, #68]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a0e      	ldr	r2, [pc, #56]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7f8 f82b 	bl	80014b0 <HAL_GetTick>
 800945a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800945c:	e008      	b.n	8009470 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800945e:	f7f8 f827 	bl	80014b0 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e006      	b.n	800947e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0f0      	beq.n	800945e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
 800948c:	ffff0007 	.word	0xffff0007

08009490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800949e:	4b53      	ldr	r3, [pc, #332]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	f003 0303 	and.w	r3, r3, #3
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d101      	bne.n	80094ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e099      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094ae:	4b4f      	ldr	r3, [pc, #316]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a4e      	ldr	r2, [pc, #312]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ba:	f7f7 fff9 	bl	80014b0 <HAL_GetTick>
 80094be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094c0:	e008      	b.n	80094d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094c2:	f7f7 fff5 	bl	80014b0 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e086      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094d4:	4b45      	ldr	r3, [pc, #276]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f0      	bne.n	80094c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80094e0:	4b42      	ldr	r3, [pc, #264]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	051b      	lsls	r3, r3, #20
 80094ee:	493f      	ldr	r1, [pc, #252]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	628b      	str	r3, [r1, #40]	; 0x28
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	3b01      	subs	r3, #1
 8009504:	025b      	lsls	r3, r3, #9
 8009506:	b29b      	uxth	r3, r3
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	3b01      	subs	r3, #1
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	3b01      	subs	r3, #1
 800951e:	061b      	lsls	r3, r3, #24
 8009520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009524:	4931      	ldr	r1, [pc, #196]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009526:	4313      	orrs	r3, r2
 8009528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800952a:	4b30      	ldr	r3, [pc, #192]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	492d      	ldr	r1, [pc, #180]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009538:	4313      	orrs	r3, r2
 800953a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800953c:	4b2b      	ldr	r3, [pc, #172]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	4928      	ldr	r1, [pc, #160]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800954e:	4b27      	ldr	r3, [pc, #156]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	4a26      	ldr	r2, [pc, #152]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800955a:	4b24      	ldr	r3, [pc, #144]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800955c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800955e:	4b24      	ldr	r3, [pc, #144]	; (80095f0 <RCCEx_PLL3_Config+0x160>)
 8009560:	4013      	ands	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	69d2      	ldr	r2, [r2, #28]
 8009566:	00d2      	lsls	r2, r2, #3
 8009568:	4920      	ldr	r1, [pc, #128]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800956a:	4313      	orrs	r3, r2
 800956c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800956e:	4b1f      	ldr	r3, [pc, #124]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a1e      	ldr	r2, [pc, #120]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009580:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a19      	ldr	r2, [pc, #100]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800958c:	e00f      	b.n	80095ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d106      	bne.n	80095a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009594:	4b15      	ldr	r3, [pc, #84]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	4a14      	ldr	r2, [pc, #80]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800959a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800959e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095a0:	e005      	b.n	80095ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	4a11      	ldr	r2, [pc, #68]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095ae:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a0e      	ldr	r2, [pc, #56]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ba:	f7f7 ff79 	bl	80014b0 <HAL_GetTick>
 80095be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095c0:	e008      	b.n	80095d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095c2:	f7f7 ff75 	bl	80014b0 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e006      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	58024400 	.word	0x58024400
 80095f0:	ffff0007 	.word	0xffff0007

080095f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e049      	b.n	800969a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7f7 fcd0 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	4619      	mov	r1, r3
 8009632:	4610      	mov	r0, r2
 8009634:	f000 fbec 	bl	8009e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d001      	beq.n	80096bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e05e      	b.n	800977a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0201 	orr.w	r2, r2, #1
 80096d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a2b      	ldr	r2, [pc, #172]	; (8009788 <HAL_TIM_Base_Start_IT+0xe4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d02c      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e6:	d027      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a27      	ldr	r2, [pc, #156]	; (800978c <HAL_TIM_Base_Start_IT+0xe8>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d022      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a26      	ldr	r2, [pc, #152]	; (8009790 <HAL_TIM_Base_Start_IT+0xec>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d01d      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <HAL_TIM_Base_Start_IT+0xf0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d018      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a23      	ldr	r2, [pc, #140]	; (8009798 <HAL_TIM_Base_Start_IT+0xf4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d013      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a21      	ldr	r2, [pc, #132]	; (800979c <HAL_TIM_Base_Start_IT+0xf8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00e      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a20      	ldr	r2, [pc, #128]	; (80097a0 <HAL_TIM_Base_Start_IT+0xfc>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d009      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1e      	ldr	r2, [pc, #120]	; (80097a4 <HAL_TIM_Base_Start_IT+0x100>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_TIM_Base_Start_IT+0x94>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1d      	ldr	r2, [pc, #116]	; (80097a8 <HAL_TIM_Base_Start_IT+0x104>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d115      	bne.n	8009764 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <HAL_TIM_Base_Start_IT+0x108>)
 8009740:	4013      	ands	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b06      	cmp	r3, #6
 8009748:	d015      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xd2>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009750:	d011      	beq.n	8009776 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	e008      	b.n	8009776 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e000      	b.n	8009778 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000
 800978c:	40000400 	.word	0x40000400
 8009790:	40000800 	.word	0x40000800
 8009794:	40000c00 	.word	0x40000c00
 8009798:	40010400 	.word	0x40010400
 800979c:	40001800 	.word	0x40001800
 80097a0:	40014000 	.word	0x40014000
 80097a4:	4000e000 	.word	0x4000e000
 80097a8:	4000e400 	.word	0x4000e400
 80097ac:	00010007 	.word	0x00010007

080097b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e049      	b.n	8009856 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f841 	bl	800985e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	f000 fb0e 	bl	8009e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b02      	cmp	r3, #2
 8009886:	d122      	bne.n	80098ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d11b      	bne.n	80098ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0202 	mvn.w	r2, #2
 800989e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fa8d 	bl	8009dd4 <HAL_TIM_IC_CaptureCallback>
 80098ba:	e005      	b.n	80098c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fa7f 	bl	8009dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa90 	bl	8009de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d122      	bne.n	8009922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d11b      	bne.n	8009922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0204 	mvn.w	r2, #4
 80098f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fa63 	bl	8009dd4 <HAL_TIM_IC_CaptureCallback>
 800990e:	e005      	b.n	800991c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fa55 	bl	8009dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa66 	bl	8009de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d122      	bne.n	8009976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b08      	cmp	r3, #8
 800993c:	d11b      	bne.n	8009976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0208 	mvn.w	r2, #8
 8009946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2204      	movs	r2, #4
 800994c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fa39 	bl	8009dd4 <HAL_TIM_IC_CaptureCallback>
 8009962:	e005      	b.n	8009970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa2b 	bl	8009dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa3c 	bl	8009de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b10      	cmp	r3, #16
 8009982:	d122      	bne.n	80099ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b10      	cmp	r3, #16
 8009990:	d11b      	bne.n	80099ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f06f 0210 	mvn.w	r2, #16
 800999a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2208      	movs	r2, #8
 80099a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fa0f 	bl	8009dd4 <HAL_TIM_IC_CaptureCallback>
 80099b6:	e005      	b.n	80099c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fa01 	bl	8009dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa12 	bl	8009de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d10e      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d107      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f06f 0201 	mvn.w	r2, #1
 80099ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7f6 fe0f 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a00:	2b80      	cmp	r3, #128	; 0x80
 8009a02:	d10e      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0e:	2b80      	cmp	r3, #128	; 0x80
 8009a10:	d107      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fd17 	bl	800a450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a30:	d10e      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d107      	bne.n	8009a50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fd0a 	bl	800a464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5a:	2b40      	cmp	r3, #64	; 0x40
 8009a5c:	d10e      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	d107      	bne.n	8009a7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f9c0 	bl	8009dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0320 	and.w	r3, r3, #32
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d10e      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	d107      	bne.n	8009aa8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f06f 0220 	mvn.w	r2, #32
 8009aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fcca 	bl	800a43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa8:	bf00      	nop
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_TIM_IC_ConfigChannel+0x1a>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e082      	b.n	8009bd0 <HAL_TIM_IC_ConfigChannel+0x120>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d11b      	bne.n	8009b10 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6818      	ldr	r0, [r3, #0]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6819      	ldr	r1, [r3, #0]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f000 fa38 	bl	8009f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699a      	ldr	r2, [r3, #24]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f022 020c 	bic.w	r2, r2, #12
 8009afa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6999      	ldr	r1, [r3, #24]
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	619a      	str	r2, [r3, #24]
 8009b0e:	e05a      	b.n	8009bc6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d11c      	bne.n	8009b50 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	6819      	ldr	r1, [r3, #0]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f000 fac8 	bl	800a0ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699a      	ldr	r2, [r3, #24]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6999      	ldr	r1, [r3, #24]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	021a      	lsls	r2, r3, #8
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	619a      	str	r2, [r3, #24]
 8009b4e:	e03a      	b.n	8009bc6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d11b      	bne.n	8009b8e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6819      	ldr	r1, [r3, #0]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f000 fb15 	bl	800a194 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	69da      	ldr	r2, [r3, #28]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 020c 	bic.w	r2, r2, #12
 8009b78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	69d9      	ldr	r1, [r3, #28]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	61da      	str	r2, [r3, #28]
 8009b8c:	e01b      	b.n	8009bc6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	6819      	ldr	r1, [r3, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f000 fb35 	bl	800a20c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009bb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69d9      	ldr	r1, [r3, #28]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	021a      	lsls	r2, r3, #8
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <HAL_TIM_ConfigClockSource+0x18>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e0db      	b.n	8009da8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4b69      	ldr	r3, [pc, #420]	; (8009db0 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a63      	ldr	r2, [pc, #396]	; (8009db4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	f000 80a9 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c2c:	4a61      	ldr	r2, [pc, #388]	; (8009db4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	f200 80ae 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c34:	4a60      	ldr	r2, [pc, #384]	; (8009db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	f000 80a1 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c3c:	4a5e      	ldr	r2, [pc, #376]	; (8009db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	f200 80a6 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c44:	4a5d      	ldr	r2, [pc, #372]	; (8009dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	f000 8099 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c4c:	4a5b      	ldr	r2, [pc, #364]	; (8009dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	f200 809e 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c58:	f000 8091 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c60:	f200 8096 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c68:	f000 8089 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c70:	f200 808e 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c78:	d03e      	beq.n	8009cf8 <HAL_TIM_ConfigClockSource+0x120>
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	f200 8087 	bhi.w	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c86:	f000 8085 	beq.w	8009d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c8e:	d87f      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c90:	2b70      	cmp	r3, #112	; 0x70
 8009c92:	d01a      	beq.n	8009cca <HAL_TIM_ConfigClockSource+0xf2>
 8009c94:	2b70      	cmp	r3, #112	; 0x70
 8009c96:	d87b      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c98:	2b60      	cmp	r3, #96	; 0x60
 8009c9a:	d050      	beq.n	8009d3e <HAL_TIM_ConfigClockSource+0x166>
 8009c9c:	2b60      	cmp	r3, #96	; 0x60
 8009c9e:	d877      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009ca0:	2b50      	cmp	r3, #80	; 0x50
 8009ca2:	d03c      	beq.n	8009d1e <HAL_TIM_ConfigClockSource+0x146>
 8009ca4:	2b50      	cmp	r3, #80	; 0x50
 8009ca6:	d873      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009ca8:	2b40      	cmp	r3, #64	; 0x40
 8009caa:	d058      	beq.n	8009d5e <HAL_TIM_ConfigClockSource+0x186>
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d86f      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009cb0:	2b30      	cmp	r3, #48	; 0x30
 8009cb2:	d064      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009cb4:	2b30      	cmp	r3, #48	; 0x30
 8009cb6:	d86b      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d060      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009cbc:	2b20      	cmp	r3, #32
 8009cbe:	d867      	bhi.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d05c      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
 8009cc4:	2b10      	cmp	r3, #16
 8009cc6:	d05a      	beq.n	8009d7e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009cc8:	e062      	b.n	8009d90 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	6899      	ldr	r1, [r3, #8]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f000 faf3 	bl	800a2c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	609a      	str	r2, [r3, #8]
      break;
 8009cf6:	e04e      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	6899      	ldr	r1, [r3, #8]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f000 fadc 	bl	800a2c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d1a:	609a      	str	r2, [r3, #8]
      break;
 8009d1c:	e03b      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	6859      	ldr	r1, [r3, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f000 f996 	bl	800a05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2150      	movs	r1, #80	; 0x50
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 faa6 	bl	800a288 <TIM_ITRx_SetConfig>
      break;
 8009d3c:	e02b      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6859      	ldr	r1, [r3, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	f000 f9f2 	bl	800a134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2160      	movs	r1, #96	; 0x60
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fa96 	bl	800a288 <TIM_ITRx_SetConfig>
      break;
 8009d5c:	e01b      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	6859      	ldr	r1, [r3, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f000 f976 	bl	800a05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2140      	movs	r1, #64	; 0x40
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fa86 	bl	800a288 <TIM_ITRx_SetConfig>
      break;
 8009d7c:	e00b      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f000 fa7d 	bl	800a288 <TIM_ITRx_SetConfig>
        break;
 8009d8e:	e002      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009d90:	bf00      	nop
 8009d92:	e000      	b.n	8009d96 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009d94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	ffceff88 	.word	0xffceff88
 8009db4:	00100040 	.word	0x00100040
 8009db8:	00100030 	.word	0x00100030
 8009dbc:	00100020 	.word	0x00100020

08009dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a44      	ldr	r2, [pc, #272]	; (8009f34 <TIM_Base_SetConfig+0x124>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d013      	beq.n	8009e50 <TIM_Base_SetConfig+0x40>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2e:	d00f      	beq.n	8009e50 <TIM_Base_SetConfig+0x40>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a41      	ldr	r2, [pc, #260]	; (8009f38 <TIM_Base_SetConfig+0x128>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00b      	beq.n	8009e50 <TIM_Base_SetConfig+0x40>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a40      	ldr	r2, [pc, #256]	; (8009f3c <TIM_Base_SetConfig+0x12c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d007      	beq.n	8009e50 <TIM_Base_SetConfig+0x40>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a3f      	ldr	r2, [pc, #252]	; (8009f40 <TIM_Base_SetConfig+0x130>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a3e      	ldr	r2, [pc, #248]	; (8009f44 <TIM_Base_SetConfig+0x134>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d108      	bne.n	8009e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a33      	ldr	r2, [pc, #204]	; (8009f34 <TIM_Base_SetConfig+0x124>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d027      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e70:	d023      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a30      	ldr	r2, [pc, #192]	; (8009f38 <TIM_Base_SetConfig+0x128>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d01f      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a2f      	ldr	r2, [pc, #188]	; (8009f3c <TIM_Base_SetConfig+0x12c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d01b      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a2e      	ldr	r2, [pc, #184]	; (8009f40 <TIM_Base_SetConfig+0x130>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d017      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a2d      	ldr	r2, [pc, #180]	; (8009f44 <TIM_Base_SetConfig+0x134>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d013      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a2c      	ldr	r2, [pc, #176]	; (8009f48 <TIM_Base_SetConfig+0x138>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00f      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a2b      	ldr	r2, [pc, #172]	; (8009f4c <TIM_Base_SetConfig+0x13c>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00b      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a2a      	ldr	r2, [pc, #168]	; (8009f50 <TIM_Base_SetConfig+0x140>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d007      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a29      	ldr	r2, [pc, #164]	; (8009f54 <TIM_Base_SetConfig+0x144>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d003      	beq.n	8009eba <TIM_Base_SetConfig+0xaa>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a28      	ldr	r2, [pc, #160]	; (8009f58 <TIM_Base_SetConfig+0x148>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d108      	bne.n	8009ecc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <TIM_Base_SetConfig+0x124>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00f      	beq.n	8009f18 <TIM_Base_SetConfig+0x108>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a12      	ldr	r2, [pc, #72]	; (8009f44 <TIM_Base_SetConfig+0x134>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <TIM_Base_SetConfig+0x108>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a11      	ldr	r2, [pc, #68]	; (8009f48 <TIM_Base_SetConfig+0x138>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d007      	beq.n	8009f18 <TIM_Base_SetConfig+0x108>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a10      	ldr	r2, [pc, #64]	; (8009f4c <TIM_Base_SetConfig+0x13c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_Base_SetConfig+0x108>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a0f      	ldr	r2, [pc, #60]	; (8009f50 <TIM_Base_SetConfig+0x140>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d103      	bne.n	8009f20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	615a      	str	r2, [r3, #20]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40010000 	.word	0x40010000
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40010400 	.word	0x40010400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	4000e000 	.word	0x4000e000
 8009f58:	4000e400 	.word	0x4000e400

08009f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	f023 0201 	bic.w	r2, r3, #1
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4a2c      	ldr	r2, [pc, #176]	; (800a038 <TIM_TI1_SetConfig+0xdc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d023      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d01f      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4a29      	ldr	r2, [pc, #164]	; (800a03c <TIM_TI1_SetConfig+0xe0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d01b      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	4a28      	ldr	r2, [pc, #160]	; (800a040 <TIM_TI1_SetConfig+0xe4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d017      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4a27      	ldr	r2, [pc, #156]	; (800a044 <TIM_TI1_SetConfig+0xe8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d013      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4a26      	ldr	r2, [pc, #152]	; (800a048 <TIM_TI1_SetConfig+0xec>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00f      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4a25      	ldr	r2, [pc, #148]	; (800a04c <TIM_TI1_SetConfig+0xf0>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d00b      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	4a24      	ldr	r2, [pc, #144]	; (800a050 <TIM_TI1_SetConfig+0xf4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d007      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a23      	ldr	r2, [pc, #140]	; (800a054 <TIM_TI1_SetConfig+0xf8>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d003      	beq.n	8009fd2 <TIM_TI1_SetConfig+0x76>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4a22      	ldr	r2, [pc, #136]	; (800a058 <TIM_TI1_SetConfig+0xfc>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d101      	bne.n	8009fd6 <TIM_TI1_SetConfig+0x7a>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e000      	b.n	8009fd8 <TIM_TI1_SetConfig+0x7c>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d008      	beq.n	8009fee <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	e003      	b.n	8009ff6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f043 0301 	orr.w	r3, r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	011b      	lsls	r3, r3, #4
 800a002:	b2db      	uxtb	r3, r3
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	4313      	orrs	r3, r2
 800a008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f023 030a 	bic.w	r3, r3, #10
 800a010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f003 030a 	and.w	r3, r3, #10
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	bf00      	nop
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40010000 	.word	0x40010000
 800a03c:	40000400 	.word	0x40000400
 800a040:	40000800 	.word	0x40000800
 800a044:	40000c00 	.word	0x40000c00
 800a048:	40010400 	.word	0x40010400
 800a04c:	40001800 	.word	0x40001800
 800a050:	40014000 	.word	0x40014000
 800a054:	4000e000 	.word	0x4000e000
 800a058:	4000e400 	.word	0x4000e400

0800a05c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f023 0201 	bic.w	r2, r3, #1
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	011b      	lsls	r3, r3, #4
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	4313      	orrs	r3, r2
 800a090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 030a 	bic.w	r3, r3, #10
 800a098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	621a      	str	r2, [r3, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b087      	sub	sp, #28
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
 800a0c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	f023 0210 	bic.w	r2, r3, #16
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	031b      	lsls	r3, r3, #12
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	4313      	orrs	r3, r2
 800a104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a10c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	621a      	str	r2, [r3, #32]
}
 800a128:	bf00      	nop
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f023 0210 	bic.w	r2, r3, #16
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a15e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	031b      	lsls	r3, r3, #12
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	4313      	orrs	r3, r2
 800a168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4313      	orrs	r3, r2
 800a17a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	621a      	str	r2, [r3, #32]
}
 800a188:	bf00      	nop
 800a18a:	371c      	adds	r7, #28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a194:	b480      	push	{r7}
 800a196:	b087      	sub	sp, #28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f023 0303 	bic.w	r3, r3, #3
 800a1c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a1e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	021b      	lsls	r3, r3, #8
 800a1ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	621a      	str	r2, [r3, #32]
}
 800a200:	bf00      	nop
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a1b      	ldr	r3, [r3, #32]
 800a21e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a238:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	4313      	orrs	r3, r2
 800a242:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a24a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	031b      	lsls	r3, r3, #12
 800a250:	b29b      	uxth	r3, r3
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a25e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	031b      	lsls	r3, r3, #12
 800a264:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	621a      	str	r2, [r3, #32]
}
 800a27a:	bf00      	nop
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
	...

0800a288 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <TIM_ITRx_SetConfig+0x38>)
 800a29c:	4013      	ands	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	f043 0307 	orr.w	r3, r3, #7
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	609a      	str	r2, [r3, #8]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	ffcfff8f 	.word	0xffcfff8f

0800a2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	021a      	lsls	r2, r3, #8
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	609a      	str	r2, [r3, #8]
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a318:	2302      	movs	r3, #2
 800a31a:	e077      	b.n	800a40c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a35      	ldr	r2, [pc, #212]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d004      	beq.n	800a350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a34      	ldr	r2, [pc, #208]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d108      	bne.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4313      	orrs	r3, r2
 800a360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a25      	ldr	r2, [pc, #148]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d02c      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38e:	d027      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a22      	ldr	r2, [pc, #136]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d022      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a21      	ldr	r2, [pc, #132]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d01d      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1f      	ldr	r2, [pc, #124]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d018      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1a      	ldr	r2, [pc, #104]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d013      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00e      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a1a      	ldr	r2, [pc, #104]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d009      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a18      	ldr	r2, [pc, #96]	; (800a434 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d004      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a17      	ldr	r2, [pc, #92]	; (800a438 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d10c      	bne.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	40010000 	.word	0x40010000
 800a41c:	40010400 	.word	0x40010400
 800a420:	40000400 	.word	0x40000400
 800a424:	40000800 	.word	0x40000800
 800a428:	40000c00 	.word	0x40000c00
 800a42c:	40001800 	.word	0x40001800
 800a430:	40014000 	.word	0x40014000
 800a434:	4000e000 	.word	0x4000e000
 800a438:	4000e400 	.word	0x4000e400

0800a43c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e042      	b.n	800a510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7f6 fde1 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2224      	movs	r2, #36	; 0x24
 800a4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0201 	bic.w	r2, r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fb80 	bl	800abc0 <UART_SetConfig>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e022      	b.n	800a510 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f001 f9d2 	bl	800b87c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689a      	ldr	r2, [r3, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f042 0201 	orr.w	r2, r2, #1
 800a506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 fa59 	bl	800b9c0 <UART_CheckIdleState>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d168      	bne.n	800a602 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_UART_Transmit_IT+0x24>
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e061      	b.n	800a604 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <HAL_UART_Transmit_IT+0x36>
 800a54a:	2302      	movs	r3, #2
 800a54c:	e05a      	b.n	800a604 <HAL_UART_Transmit_IT+0xec>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	88fa      	ldrh	r2, [r7, #6]
 800a560:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	88fa      	ldrh	r2, [r7, #6]
 800a568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2221      	movs	r2, #33	; 0x21
 800a57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a58a:	d11c      	bne.n	800a5c6 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a594:	d107      	bne.n	800a5a6 <HAL_UART_Transmit_IT+0x8e>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d103      	bne.n	800a5a6 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <HAL_UART_Transmit_IT+0xf8>)
 800a5a2:	675a      	str	r2, [r3, #116]	; 0x74
 800a5a4:	e002      	b.n	800a5ac <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4a1a      	ldr	r2, [pc, #104]	; (800a614 <HAL_UART_Transmit_IT+0xfc>)
 800a5aa:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a5c2:	609a      	str	r2, [r3, #8]
 800a5c4:	e01b      	b.n	800a5fe <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ce:	d107      	bne.n	800a5e0 <HAL_UART_Transmit_IT+0xc8>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d103      	bne.n	800a5e0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4a0f      	ldr	r2, [pc, #60]	; (800a618 <HAL_UART_Transmit_IT+0x100>)
 800a5dc:	675a      	str	r2, [r3, #116]	; 0x74
 800a5de:	e002      	b.n	800a5e6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4a0e      	ldr	r2, [pc, #56]	; (800a61c <HAL_UART_Transmit_IT+0x104>)
 800a5e4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5fc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e000      	b.n	800a604 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800a602:	2302      	movs	r3, #2
  }
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	0800bd75 	.word	0x0800bd75
 800a614:	0800bcdb 	.word	0x0800bcdb
 800a618:	0800bc5d 	.word	0x0800bc5d
 800a61c:	0800bbe9 	.word	0x0800bbe9

0800a620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a640:	69fa      	ldr	r2, [r7, #28]
 800a642:	f640 030f 	movw	r3, #2063	; 0x80f
 800a646:	4013      	ands	r3, r2
 800a648:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d118      	bne.n	800a682 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f003 0320 	and.w	r3, r3, #32
 800a656:	2b00      	cmp	r3, #0
 800a658:	d013      	beq.n	800a682 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 8282 	beq.w	800ab7c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
      }
      return;
 800a680:	e27c      	b.n	800ab7c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80ef 	beq.w	800a868 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4b73      	ldr	r3, [pc, #460]	; (800a85c <HAL_UART_IRQHandler+0x23c>)
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	4b72      	ldr	r3, [pc, #456]	; (800a860 <HAL_UART_IRQHandler+0x240>)
 800a698:	4013      	ands	r3, r2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80e4 	beq.w	800a868 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d010      	beq.n	800a6cc <HAL_UART_IRQHandler+0xac>
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c2:	f043 0201 	orr.w	r2, r3, #1
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d010      	beq.n	800a6f8 <HAL_UART_IRQHandler+0xd8>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ee:	f043 0204 	orr.w	r2, r3, #4
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d010      	beq.n	800a724 <HAL_UART_IRQHandler+0x104>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2204      	movs	r2, #4
 800a712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a71a:	f043 0202 	orr.w	r2, r3, #2
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d015      	beq.n	800a75a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	f003 0320 	and.w	r3, r3, #32
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	4b48      	ldr	r3, [pc, #288]	; (800a85c <HAL_UART_IRQHandler+0x23c>)
 800a73c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00b      	beq.n	800a75a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2208      	movs	r2, #8
 800a748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a750:	f043 0208 	orr.w	r2, r3, #8
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a760:	2b00      	cmp	r3, #0
 800a762:	d011      	beq.n	800a788 <HAL_UART_IRQHandler+0x168>
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77e:	f043 0220 	orr.w	r2, r3, #32
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 81f6 	beq.w	800ab80 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d011      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d104      	bne.n	800a7b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d4:	2b40      	cmp	r3, #64	; 0x40
 800a7d6:	d004      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d031      	beq.n	800a846 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 f9b8 	bl	800bb58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d123      	bne.n	800a83e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a804:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d013      	beq.n	800a836 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a812:	4a14      	ldr	r2, [pc, #80]	; (800a864 <HAL_UART_IRQHandler+0x244>)
 800a814:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7f9 ffec 	bl	80047f8 <HAL_DMA_Abort_IT>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d017      	beq.n	800a856 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a830:	4610      	mov	r0, r2
 800a832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a834:	e00f      	b.n	800a856 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f9ac 	bl	800ab94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a83c:	e00b      	b.n	800a856 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f9a8 	bl	800ab94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a844:	e007      	b.n	800a856 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f9a4 	bl	800ab94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a854:	e194      	b.n	800ab80 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a856:	bf00      	nop
    return;
 800a858:	e192      	b.n	800ab80 <HAL_UART_IRQHandler+0x560>
 800a85a:	bf00      	nop
 800a85c:	10000001 	.word	0x10000001
 800a860:	04000120 	.word	0x04000120
 800a864:	0800bbbd 	.word	0x0800bbbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	f040 810f 	bne.w	800aa90 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	f003 0310 	and.w	r3, r3, #16
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 8109 	beq.w	800aa90 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 8103 	beq.w	800aa90 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2210      	movs	r2, #16
 800a890:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	f040 80bb 	bne.w	800aa18 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a96      	ldr	r2, [pc, #600]	; (800ab04 <HAL_UART_IRQHandler+0x4e4>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d059      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a94      	ldr	r2, [pc, #592]	; (800ab08 <HAL_UART_IRQHandler+0x4e8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d053      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a92      	ldr	r2, [pc, #584]	; (800ab0c <HAL_UART_IRQHandler+0x4ec>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d04d      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a90      	ldr	r2, [pc, #576]	; (800ab10 <HAL_UART_IRQHandler+0x4f0>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d047      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a8e      	ldr	r2, [pc, #568]	; (800ab14 <HAL_UART_IRQHandler+0x4f4>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d041      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a8c      	ldr	r2, [pc, #560]	; (800ab18 <HAL_UART_IRQHandler+0x4f8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d03b      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a8a      	ldr	r2, [pc, #552]	; (800ab1c <HAL_UART_IRQHandler+0x4fc>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d035      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a88      	ldr	r2, [pc, #544]	; (800ab20 <HAL_UART_IRQHandler+0x500>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d02f      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a86      	ldr	r2, [pc, #536]	; (800ab24 <HAL_UART_IRQHandler+0x504>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d029      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a84      	ldr	r2, [pc, #528]	; (800ab28 <HAL_UART_IRQHandler+0x508>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d023      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a82      	ldr	r2, [pc, #520]	; (800ab2c <HAL_UART_IRQHandler+0x50c>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d01d      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a80      	ldr	r2, [pc, #512]	; (800ab30 <HAL_UART_IRQHandler+0x510>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d017      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a7e      	ldr	r2, [pc, #504]	; (800ab34 <HAL_UART_IRQHandler+0x514>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d011      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a7c      	ldr	r2, [pc, #496]	; (800ab38 <HAL_UART_IRQHandler+0x518>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00b      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a7a      	ldr	r2, [pc, #488]	; (800ab3c <HAL_UART_IRQHandler+0x51c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d005      	beq.n	800a962 <HAL_UART_IRQHandler+0x342>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a78      	ldr	r2, [pc, #480]	; (800ab40 <HAL_UART_IRQHandler+0x520>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d105      	bne.n	800a96e <HAL_UART_IRQHandler+0x34e>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	e004      	b.n	800a978 <HAL_UART_IRQHandler+0x358>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	b29b      	uxth	r3, r3
 800a978:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a97a:	893b      	ldrh	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8101 	beq.w	800ab84 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a988:	893a      	ldrh	r2, [r7, #8]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	f080 80fa 	bcs.w	800ab84 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	893a      	ldrh	r2, [r7, #8]
 800a994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9a2:	d02b      	beq.n	800a9fc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689a      	ldr	r2, [r3, #8]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0201 	bic.w	r2, r2, #1
 800a9c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689a      	ldr	r2, [r3, #8]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0210 	bic.w	r2, r2, #16
 800a9f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f9 fbe0 	bl	80041bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f8c9 	bl	800aba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa16:	e0b5      	b.n	800ab84 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f000 80a8 	beq.w	800ab88 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800aa38:	897b      	ldrh	r3, [r7, #10]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 80a4 	beq.w	800ab88 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6899      	ldr	r1, [r3, #8]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <HAL_UART_IRQHandler+0x524>)
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0210 	bic.w	r2, r2, #16
 800aa82:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa84:	897b      	ldrh	r3, [r7, #10]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 f88d 	bl	800aba8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa8e:	e07b      	b.n	800ab88 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00d      	beq.n	800aab6 <HAL_UART_IRQHandler+0x496>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d008      	beq.n	800aab6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aaac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f9cc 	bl	800be4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aab4:	e06b      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d012      	beq.n	800aae6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d008      	beq.n	800aae6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d057      	beq.n	800ab8c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
    }
    return;
 800aae4:	e052      	b.n	800ab8c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d02b      	beq.n	800ab48 <HAL_UART_IRQHandler+0x528>
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d026      	beq.n	800ab48 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 f98c 	bl	800be18 <UART_EndTransmit_IT>
    return;
 800ab00:	e045      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
 800ab02:	bf00      	nop
 800ab04:	40020010 	.word	0x40020010
 800ab08:	40020028 	.word	0x40020028
 800ab0c:	40020040 	.word	0x40020040
 800ab10:	40020058 	.word	0x40020058
 800ab14:	40020070 	.word	0x40020070
 800ab18:	40020088 	.word	0x40020088
 800ab1c:	400200a0 	.word	0x400200a0
 800ab20:	400200b8 	.word	0x400200b8
 800ab24:	40020410 	.word	0x40020410
 800ab28:	40020428 	.word	0x40020428
 800ab2c:	40020440 	.word	0x40020440
 800ab30:	40020458 	.word	0x40020458
 800ab34:	40020470 	.word	0x40020470
 800ab38:	40020488 	.word	0x40020488
 800ab3c:	400204a0 	.word	0x400204a0
 800ab40:	400204b8 	.word	0x400204b8
 800ab44:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d008      	beq.n	800ab64 <HAL_UART_IRQHandler+0x544>
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 f989 	bl	800be74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab62:	e014      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00f      	beq.n	800ab8e <HAL_UART_IRQHandler+0x56e>
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da0c      	bge.n	800ab8e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f001 f973 	bl	800be60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab7a:	e008      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
      return;
 800ab7c:	bf00      	nop
 800ab7e:	e006      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
    return;
 800ab80:	bf00      	nop
 800ab82:	e004      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
      return;
 800ab84:	bf00      	nop
 800ab86:	e002      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
      return;
 800ab88:	bf00      	nop
 800ab8a:	e000      	b.n	800ab8e <HAL_UART_IRQHandler+0x56e>
    return;
 800ab8c:	bf00      	nop
  }
}
 800ab8e:	3720      	adds	r7, #32
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abc0:	b5b0      	push	{r4, r5, r7, lr}
 800abc2:	b08e      	sub	sp, #56	; 0x38
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	431a      	orrs	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	431a      	orrs	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4bbf      	ldr	r3, [pc, #764]	; (800aeec <UART_SetConfig+0x32c>)
 800abee:	4013      	ands	r3, r2
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6812      	ldr	r2, [r2, #0]
 800abf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abf6:	430b      	orrs	r3, r1
 800abf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68da      	ldr	r2, [r3, #12]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4ab5      	ldr	r2, [pc, #724]	; (800aef0 <UART_SetConfig+0x330>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac26:	4313      	orrs	r3, r2
 800ac28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	4bb0      	ldr	r3, [pc, #704]	; (800aef4 <UART_SetConfig+0x334>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac3a:	430b      	orrs	r3, r1
 800ac3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	f023 010f 	bic.w	r1, r3, #15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4aa7      	ldr	r2, [pc, #668]	; (800aef8 <UART_SetConfig+0x338>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d176      	bne.n	800ad4c <UART_SetConfig+0x18c>
 800ac5e:	4ba7      	ldr	r3, [pc, #668]	; (800aefc <UART_SetConfig+0x33c>)
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac66:	2b28      	cmp	r3, #40	; 0x28
 800ac68:	d86c      	bhi.n	800ad44 <UART_SetConfig+0x184>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <UART_SetConfig+0xb0>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ad15 	.word	0x0800ad15
 800ac74:	0800ad45 	.word	0x0800ad45
 800ac78:	0800ad45 	.word	0x0800ad45
 800ac7c:	0800ad45 	.word	0x0800ad45
 800ac80:	0800ad45 	.word	0x0800ad45
 800ac84:	0800ad45 	.word	0x0800ad45
 800ac88:	0800ad45 	.word	0x0800ad45
 800ac8c:	0800ad45 	.word	0x0800ad45
 800ac90:	0800ad1d 	.word	0x0800ad1d
 800ac94:	0800ad45 	.word	0x0800ad45
 800ac98:	0800ad45 	.word	0x0800ad45
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad45 	.word	0x0800ad45
 800aca4:	0800ad45 	.word	0x0800ad45
 800aca8:	0800ad45 	.word	0x0800ad45
 800acac:	0800ad45 	.word	0x0800ad45
 800acb0:	0800ad25 	.word	0x0800ad25
 800acb4:	0800ad45 	.word	0x0800ad45
 800acb8:	0800ad45 	.word	0x0800ad45
 800acbc:	0800ad45 	.word	0x0800ad45
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ad45 	.word	0x0800ad45
 800acc8:	0800ad45 	.word	0x0800ad45
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad2d 	.word	0x0800ad2d
 800acd4:	0800ad45 	.word	0x0800ad45
 800acd8:	0800ad45 	.word	0x0800ad45
 800acdc:	0800ad45 	.word	0x0800ad45
 800ace0:	0800ad45 	.word	0x0800ad45
 800ace4:	0800ad45 	.word	0x0800ad45
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ad45 	.word	0x0800ad45
 800acf0:	0800ad35 	.word	0x0800ad35
 800acf4:	0800ad45 	.word	0x0800ad45
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad45 	.word	0x0800ad45
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad45 	.word	0x0800ad45
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1a:	e326      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e322      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2a:	e31e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad32:	e31a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3a:	e316      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad42:	e312      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4a:	e30e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a6b      	ldr	r2, [pc, #428]	; (800af00 <UART_SetConfig+0x340>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x1f8>
 800ad56:	4b69      	ldr	r3, [pc, #420]	; (800aefc <UART_SetConfig+0x33c>)
 800ad58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x1f0>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <UART_SetConfig+0x1a8>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad86:	e2f0      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8e:	e2ec      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad96:	e2e8      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9e:	e2e4      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada6:	e2e0      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adae:	e2dc      	b.n	800b36a <UART_SetConfig+0x7aa>
 800adb0:	2380      	movs	r3, #128	; 0x80
 800adb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb6:	e2d8      	b.n	800b36a <UART_SetConfig+0x7aa>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a51      	ldr	r2, [pc, #324]	; (800af04 <UART_SetConfig+0x344>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d130      	bne.n	800ae24 <UART_SetConfig+0x264>
 800adc2:	4b4e      	ldr	r3, [pc, #312]	; (800aefc <UART_SetConfig+0x33c>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	f003 0307 	and.w	r3, r3, #7
 800adca:	2b05      	cmp	r3, #5
 800adcc:	d826      	bhi.n	800ae1c <UART_SetConfig+0x25c>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x214>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800aded 	.word	0x0800aded
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800adfd 	.word	0x0800adfd
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae15 	.word	0x0800ae15
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adf2:	e2ba      	b.n	800b36a <UART_SetConfig+0x7aa>
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adfa:	e2b6      	b.n	800b36a <UART_SetConfig+0x7aa>
 800adfc:	2308      	movs	r3, #8
 800adfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae02:	e2b2      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae0a:	e2ae      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae12:	e2aa      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae14:	2340      	movs	r3, #64	; 0x40
 800ae16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1a:	e2a6      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae1c:	2380      	movs	r3, #128	; 0x80
 800ae1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae22:	e2a2      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a37      	ldr	r2, [pc, #220]	; (800af08 <UART_SetConfig+0x348>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d130      	bne.n	800ae90 <UART_SetConfig+0x2d0>
 800ae2e:	4b33      	ldr	r3, [pc, #204]	; (800aefc <UART_SetConfig+0x33c>)
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	f003 0307 	and.w	r3, r3, #7
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d826      	bhi.n	800ae88 <UART_SetConfig+0x2c8>
 800ae3a:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <UART_SetConfig+0x280>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800ae59 	.word	0x0800ae59
 800ae44:	0800ae61 	.word	0x0800ae61
 800ae48:	0800ae69 	.word	0x0800ae69
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae79 	.word	0x0800ae79
 800ae54:	0800ae81 	.word	0x0800ae81
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae5e:	e284      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae60:	2304      	movs	r3, #4
 800ae62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae66:	e280      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae68:	2308      	movs	r3, #8
 800ae6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae6e:	e27c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae70:	2310      	movs	r3, #16
 800ae72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae76:	e278      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae78:	2320      	movs	r3, #32
 800ae7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae7e:	e274      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae86:	e270      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae8e:	e26c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a1d      	ldr	r2, [pc, #116]	; (800af0c <UART_SetConfig+0x34c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d142      	bne.n	800af20 <UART_SetConfig+0x360>
 800ae9a:	4b18      	ldr	r3, [pc, #96]	; (800aefc <UART_SetConfig+0x33c>)
 800ae9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9e:	f003 0307 	and.w	r3, r3, #7
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	d838      	bhi.n	800af18 <UART_SetConfig+0x358>
 800aea6:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <UART_SetConfig+0x2ec>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800aec5 	.word	0x0800aec5
 800aeb0:	0800aecd 	.word	0x0800aecd
 800aeb4:	0800aed5 	.word	0x0800aed5
 800aeb8:	0800aedd 	.word	0x0800aedd
 800aebc:	0800aee5 	.word	0x0800aee5
 800aec0:	0800af11 	.word	0x0800af11
 800aec4:	2300      	movs	r3, #0
 800aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeca:	e24e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aecc:	2304      	movs	r3, #4
 800aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed2:	e24a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aed4:	2308      	movs	r3, #8
 800aed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeda:	e246      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aedc:	2310      	movs	r3, #16
 800aede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee2:	e242      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aee4:	2320      	movs	r3, #32
 800aee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeea:	e23e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aeec:	cfff69f3 	.word	0xcfff69f3
 800aef0:	58000c00 	.word	0x58000c00
 800aef4:	11fff4ff 	.word	0x11fff4ff
 800aef8:	40011000 	.word	0x40011000
 800aefc:	58024400 	.word	0x58024400
 800af00:	40004400 	.word	0x40004400
 800af04:	40004800 	.word	0x40004800
 800af08:	40004c00 	.word	0x40004c00
 800af0c:	40005000 	.word	0x40005000
 800af10:	2340      	movs	r3, #64	; 0x40
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e228      	b.n	800b36a <UART_SetConfig+0x7aa>
 800af18:	2380      	movs	r3, #128	; 0x80
 800af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1e:	e224      	b.n	800b36a <UART_SetConfig+0x7aa>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4ab1      	ldr	r2, [pc, #708]	; (800b1ec <UART_SetConfig+0x62c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d176      	bne.n	800b018 <UART_SetConfig+0x458>
 800af2a:	4bb1      	ldr	r3, [pc, #708]	; (800b1f0 <UART_SetConfig+0x630>)
 800af2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af32:	2b28      	cmp	r3, #40	; 0x28
 800af34:	d86c      	bhi.n	800b010 <UART_SetConfig+0x450>
 800af36:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <UART_SetConfig+0x37c>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800afe1 	.word	0x0800afe1
 800af40:	0800b011 	.word	0x0800b011
 800af44:	0800b011 	.word	0x0800b011
 800af48:	0800b011 	.word	0x0800b011
 800af4c:	0800b011 	.word	0x0800b011
 800af50:	0800b011 	.word	0x0800b011
 800af54:	0800b011 	.word	0x0800b011
 800af58:	0800b011 	.word	0x0800b011
 800af5c:	0800afe9 	.word	0x0800afe9
 800af60:	0800b011 	.word	0x0800b011
 800af64:	0800b011 	.word	0x0800b011
 800af68:	0800b011 	.word	0x0800b011
 800af6c:	0800b011 	.word	0x0800b011
 800af70:	0800b011 	.word	0x0800b011
 800af74:	0800b011 	.word	0x0800b011
 800af78:	0800b011 	.word	0x0800b011
 800af7c:	0800aff1 	.word	0x0800aff1
 800af80:	0800b011 	.word	0x0800b011
 800af84:	0800b011 	.word	0x0800b011
 800af88:	0800b011 	.word	0x0800b011
 800af8c:	0800b011 	.word	0x0800b011
 800af90:	0800b011 	.word	0x0800b011
 800af94:	0800b011 	.word	0x0800b011
 800af98:	0800b011 	.word	0x0800b011
 800af9c:	0800aff9 	.word	0x0800aff9
 800afa0:	0800b011 	.word	0x0800b011
 800afa4:	0800b011 	.word	0x0800b011
 800afa8:	0800b011 	.word	0x0800b011
 800afac:	0800b011 	.word	0x0800b011
 800afb0:	0800b011 	.word	0x0800b011
 800afb4:	0800b011 	.word	0x0800b011
 800afb8:	0800b011 	.word	0x0800b011
 800afbc:	0800b001 	.word	0x0800b001
 800afc0:	0800b011 	.word	0x0800b011
 800afc4:	0800b011 	.word	0x0800b011
 800afc8:	0800b011 	.word	0x0800b011
 800afcc:	0800b011 	.word	0x0800b011
 800afd0:	0800b011 	.word	0x0800b011
 800afd4:	0800b011 	.word	0x0800b011
 800afd8:	0800b011 	.word	0x0800b011
 800afdc:	0800b009 	.word	0x0800b009
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e1c0      	b.n	800b36a <UART_SetConfig+0x7aa>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e1bc      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e1b8      	b.n	800b36a <UART_SetConfig+0x7aa>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e1b4      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b000:	2320      	movs	r3, #32
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e1b0      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e1ac      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b010:	2380      	movs	r3, #128	; 0x80
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b016:	e1a8      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a75      	ldr	r2, [pc, #468]	; (800b1f4 <UART_SetConfig+0x634>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d130      	bne.n	800b084 <UART_SetConfig+0x4c4>
 800b022:	4b73      	ldr	r3, [pc, #460]	; (800b1f0 <UART_SetConfig+0x630>)
 800b024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	d826      	bhi.n	800b07c <UART_SetConfig+0x4bc>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0x474>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b04d 	.word	0x0800b04d
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b075 	.word	0x0800b075
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e18a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e186      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e182      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e17e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b06c:	2320      	movs	r3, #32
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e17a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e176      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b07c:	2380      	movs	r3, #128	; 0x80
 800b07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b082:	e172      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a5b      	ldr	r2, [pc, #364]	; (800b1f8 <UART_SetConfig+0x638>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d130      	bne.n	800b0f0 <UART_SetConfig+0x530>
 800b08e:	4b58      	ldr	r3, [pc, #352]	; (800b1f0 <UART_SetConfig+0x630>)
 800b090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	2b05      	cmp	r3, #5
 800b098:	d826      	bhi.n	800b0e8 <UART_SetConfig+0x528>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <UART_SetConfig+0x4e0>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0c1 	.word	0x0800b0c1
 800b0a8:	0800b0c9 	.word	0x0800b0c9
 800b0ac:	0800b0d1 	.word	0x0800b0d1
 800b0b0:	0800b0d9 	.word	0x0800b0d9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e154      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e150      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e14c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e148      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0d8:	2320      	movs	r3, #32
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e144      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e140      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0e8:	2380      	movs	r3, #128	; 0x80
 800b0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ee:	e13c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a41      	ldr	r2, [pc, #260]	; (800b1fc <UART_SetConfig+0x63c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	f040 8082 	bne.w	800b200 <UART_SetConfig+0x640>
 800b0fc:	4b3c      	ldr	r3, [pc, #240]	; (800b1f0 <UART_SetConfig+0x630>)
 800b0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b104:	2b28      	cmp	r3, #40	; 0x28
 800b106:	d86d      	bhi.n	800b1e4 <UART_SetConfig+0x624>
 800b108:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <UART_SetConfig+0x550>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b1b5 	.word	0x0800b1b5
 800b114:	0800b1e5 	.word	0x0800b1e5
 800b118:	0800b1e5 	.word	0x0800b1e5
 800b11c:	0800b1e5 	.word	0x0800b1e5
 800b120:	0800b1e5 	.word	0x0800b1e5
 800b124:	0800b1e5 	.word	0x0800b1e5
 800b128:	0800b1e5 	.word	0x0800b1e5
 800b12c:	0800b1e5 	.word	0x0800b1e5
 800b130:	0800b1bd 	.word	0x0800b1bd
 800b134:	0800b1e5 	.word	0x0800b1e5
 800b138:	0800b1e5 	.word	0x0800b1e5
 800b13c:	0800b1e5 	.word	0x0800b1e5
 800b140:	0800b1e5 	.word	0x0800b1e5
 800b144:	0800b1e5 	.word	0x0800b1e5
 800b148:	0800b1e5 	.word	0x0800b1e5
 800b14c:	0800b1e5 	.word	0x0800b1e5
 800b150:	0800b1c5 	.word	0x0800b1c5
 800b154:	0800b1e5 	.word	0x0800b1e5
 800b158:	0800b1e5 	.word	0x0800b1e5
 800b15c:	0800b1e5 	.word	0x0800b1e5
 800b160:	0800b1e5 	.word	0x0800b1e5
 800b164:	0800b1e5 	.word	0x0800b1e5
 800b168:	0800b1e5 	.word	0x0800b1e5
 800b16c:	0800b1e5 	.word	0x0800b1e5
 800b170:	0800b1cd 	.word	0x0800b1cd
 800b174:	0800b1e5 	.word	0x0800b1e5
 800b178:	0800b1e5 	.word	0x0800b1e5
 800b17c:	0800b1e5 	.word	0x0800b1e5
 800b180:	0800b1e5 	.word	0x0800b1e5
 800b184:	0800b1e5 	.word	0x0800b1e5
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b1e5 	.word	0x0800b1e5
 800b190:	0800b1d5 	.word	0x0800b1d5
 800b194:	0800b1e5 	.word	0x0800b1e5
 800b198:	0800b1e5 	.word	0x0800b1e5
 800b19c:	0800b1e5 	.word	0x0800b1e5
 800b1a0:	0800b1e5 	.word	0x0800b1e5
 800b1a4:	0800b1e5 	.word	0x0800b1e5
 800b1a8:	0800b1e5 	.word	0x0800b1e5
 800b1ac:	0800b1e5 	.word	0x0800b1e5
 800b1b0:	0800b1dd 	.word	0x0800b1dd
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ba:	e0d6      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1bc:	2304      	movs	r3, #4
 800b1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c2:	e0d2      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1c4:	2308      	movs	r3, #8
 800b1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ca:	e0ce      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1cc:	2310      	movs	r3, #16
 800b1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d2:	e0ca      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1d4:	2320      	movs	r3, #32
 800b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1da:	e0c6      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1dc:	2340      	movs	r3, #64	; 0x40
 800b1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e2:	e0c2      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ea:	e0be      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b1ec:	40011400 	.word	0x40011400
 800b1f0:	58024400 	.word	0x58024400
 800b1f4:	40007800 	.word	0x40007800
 800b1f8:	40007c00 	.word	0x40007c00
 800b1fc:	40011800 	.word	0x40011800
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4aad      	ldr	r2, [pc, #692]	; (800b4bc <UART_SetConfig+0x8fc>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d176      	bne.n	800b2f8 <UART_SetConfig+0x738>
 800b20a:	4bad      	ldr	r3, [pc, #692]	; (800b4c0 <UART_SetConfig+0x900>)
 800b20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b212:	2b28      	cmp	r3, #40	; 0x28
 800b214:	d86c      	bhi.n	800b2f0 <UART_SetConfig+0x730>
 800b216:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <UART_SetConfig+0x65c>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b2c1 	.word	0x0800b2c1
 800b220:	0800b2f1 	.word	0x0800b2f1
 800b224:	0800b2f1 	.word	0x0800b2f1
 800b228:	0800b2f1 	.word	0x0800b2f1
 800b22c:	0800b2f1 	.word	0x0800b2f1
 800b230:	0800b2f1 	.word	0x0800b2f1
 800b234:	0800b2f1 	.word	0x0800b2f1
 800b238:	0800b2f1 	.word	0x0800b2f1
 800b23c:	0800b2c9 	.word	0x0800b2c9
 800b240:	0800b2f1 	.word	0x0800b2f1
 800b244:	0800b2f1 	.word	0x0800b2f1
 800b248:	0800b2f1 	.word	0x0800b2f1
 800b24c:	0800b2f1 	.word	0x0800b2f1
 800b250:	0800b2f1 	.word	0x0800b2f1
 800b254:	0800b2f1 	.word	0x0800b2f1
 800b258:	0800b2f1 	.word	0x0800b2f1
 800b25c:	0800b2d1 	.word	0x0800b2d1
 800b260:	0800b2f1 	.word	0x0800b2f1
 800b264:	0800b2f1 	.word	0x0800b2f1
 800b268:	0800b2f1 	.word	0x0800b2f1
 800b26c:	0800b2f1 	.word	0x0800b2f1
 800b270:	0800b2f1 	.word	0x0800b2f1
 800b274:	0800b2f1 	.word	0x0800b2f1
 800b278:	0800b2f1 	.word	0x0800b2f1
 800b27c:	0800b2d9 	.word	0x0800b2d9
 800b280:	0800b2f1 	.word	0x0800b2f1
 800b284:	0800b2f1 	.word	0x0800b2f1
 800b288:	0800b2f1 	.word	0x0800b2f1
 800b28c:	0800b2f1 	.word	0x0800b2f1
 800b290:	0800b2f1 	.word	0x0800b2f1
 800b294:	0800b2f1 	.word	0x0800b2f1
 800b298:	0800b2f1 	.word	0x0800b2f1
 800b29c:	0800b2e1 	.word	0x0800b2e1
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b2f1 	.word	0x0800b2f1
 800b2a8:	0800b2f1 	.word	0x0800b2f1
 800b2ac:	0800b2f1 	.word	0x0800b2f1
 800b2b0:	0800b2f1 	.word	0x0800b2f1
 800b2b4:	0800b2f1 	.word	0x0800b2f1
 800b2b8:	0800b2f1 	.word	0x0800b2f1
 800b2bc:	0800b2e9 	.word	0x0800b2e9
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c6:	e050      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2c8:	2304      	movs	r3, #4
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e04c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2d0:	2308      	movs	r3, #8
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	e048      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2d8:	2310      	movs	r3, #16
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	e044      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2e0:	2320      	movs	r3, #32
 800b2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e6:	e040      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2e8:	2340      	movs	r3, #64	; 0x40
 800b2ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ee:	e03c      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2f0:	2380      	movs	r3, #128	; 0x80
 800b2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f6:	e038      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a71      	ldr	r2, [pc, #452]	; (800b4c4 <UART_SetConfig+0x904>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d130      	bne.n	800b364 <UART_SetConfig+0x7a4>
 800b302:	4b6f      	ldr	r3, [pc, #444]	; (800b4c0 <UART_SetConfig+0x900>)
 800b304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	2b05      	cmp	r3, #5
 800b30c:	d826      	bhi.n	800b35c <UART_SetConfig+0x79c>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <UART_SetConfig+0x754>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b32d 	.word	0x0800b32d
 800b318:	0800b335 	.word	0x0800b335
 800b31c:	0800b33d 	.word	0x0800b33d
 800b320:	0800b345 	.word	0x0800b345
 800b324:	0800b34d 	.word	0x0800b34d
 800b328:	0800b355 	.word	0x0800b355
 800b32c:	2302      	movs	r3, #2
 800b32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b332:	e01a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b334:	2304      	movs	r3, #4
 800b336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33a:	e016      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b33c:	2308      	movs	r3, #8
 800b33e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b342:	e012      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b344:	2310      	movs	r3, #16
 800b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34a:	e00e      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b34c:	2320      	movs	r3, #32
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b352:	e00a      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35a:	e006      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	e002      	b.n	800b36a <UART_SetConfig+0x7aa>
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a55      	ldr	r2, [pc, #340]	; (800b4c4 <UART_SetConfig+0x904>)
 800b370:	4293      	cmp	r3, r2
 800b372:	f040 80f0 	bne.w	800b556 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b37a:	2b20      	cmp	r3, #32
 800b37c:	dc46      	bgt.n	800b40c <UART_SetConfig+0x84c>
 800b37e:	2b02      	cmp	r3, #2
 800b380:	db75      	blt.n	800b46e <UART_SetConfig+0x8ae>
 800b382:	3b02      	subs	r3, #2
 800b384:	2b1e      	cmp	r3, #30
 800b386:	d872      	bhi.n	800b46e <UART_SetConfig+0x8ae>
 800b388:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <UART_SetConfig+0x7d0>)
 800b38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b38e:	bf00      	nop
 800b390:	0800b413 	.word	0x0800b413
 800b394:	0800b46f 	.word	0x0800b46f
 800b398:	0800b41b 	.word	0x0800b41b
 800b39c:	0800b46f 	.word	0x0800b46f
 800b3a0:	0800b46f 	.word	0x0800b46f
 800b3a4:	0800b46f 	.word	0x0800b46f
 800b3a8:	0800b42b 	.word	0x0800b42b
 800b3ac:	0800b46f 	.word	0x0800b46f
 800b3b0:	0800b46f 	.word	0x0800b46f
 800b3b4:	0800b46f 	.word	0x0800b46f
 800b3b8:	0800b46f 	.word	0x0800b46f
 800b3bc:	0800b46f 	.word	0x0800b46f
 800b3c0:	0800b46f 	.word	0x0800b46f
 800b3c4:	0800b46f 	.word	0x0800b46f
 800b3c8:	0800b43b 	.word	0x0800b43b
 800b3cc:	0800b46f 	.word	0x0800b46f
 800b3d0:	0800b46f 	.word	0x0800b46f
 800b3d4:	0800b46f 	.word	0x0800b46f
 800b3d8:	0800b46f 	.word	0x0800b46f
 800b3dc:	0800b46f 	.word	0x0800b46f
 800b3e0:	0800b46f 	.word	0x0800b46f
 800b3e4:	0800b46f 	.word	0x0800b46f
 800b3e8:	0800b46f 	.word	0x0800b46f
 800b3ec:	0800b46f 	.word	0x0800b46f
 800b3f0:	0800b46f 	.word	0x0800b46f
 800b3f4:	0800b46f 	.word	0x0800b46f
 800b3f8:	0800b46f 	.word	0x0800b46f
 800b3fc:	0800b46f 	.word	0x0800b46f
 800b400:	0800b46f 	.word	0x0800b46f
 800b404:	0800b46f 	.word	0x0800b46f
 800b408:	0800b461 	.word	0x0800b461
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d02a      	beq.n	800b466 <UART_SetConfig+0x8a6>
 800b410:	e02d      	b.n	800b46e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b412:	f7fd fb7b 	bl	8008b0c <HAL_RCCEx_GetD3PCLK1Freq>
 800b416:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b418:	e02f      	b.n	800b47a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41a:	f107 0314 	add.w	r3, r7, #20
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fd fb8a 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b428:	e027      	b.n	800b47a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd fcd6 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b438:	e01f      	b.n	800b47a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b43a:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <UART_SetConfig+0x900>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b00      	cmp	r3, #0
 800b444:	d009      	beq.n	800b45a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b446:	4b1e      	ldr	r3, [pc, #120]	; (800b4c0 <UART_SetConfig+0x900>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	08db      	lsrs	r3, r3, #3
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	4a1d      	ldr	r2, [pc, #116]	; (800b4c8 <UART_SetConfig+0x908>)
 800b452:	fa22 f303 	lsr.w	r3, r2, r3
 800b456:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b458:	e00f      	b.n	800b47a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800b45a:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <UART_SetConfig+0x908>)
 800b45c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b45e:	e00c      	b.n	800b47a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <UART_SetConfig+0x90c>)
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b464:	e009      	b.n	800b47a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b46c:	e005      	b.n	800b47a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f000 81e6 	beq.w	800b84e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	4a12      	ldr	r2, [pc, #72]	; (800b4d0 <UART_SetConfig+0x910>)
 800b488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b48c:	461a      	mov	r2, r3
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	fbb3 f3f2 	udiv	r3, r3, r2
 800b494:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	6a3a      	ldr	r2, [r7, #32]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d305      	bcc.n	800b4b2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d910      	bls.n	800b4d4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b4b8:	e1c9      	b.n	800b84e <UART_SetConfig+0xc8e>
 800b4ba:	bf00      	nop
 800b4bc:	40011c00 	.word	0x40011c00
 800b4c0:	58024400 	.word	0x58024400
 800b4c4:	58000c00 	.word	0x58000c00
 800b4c8:	03d09000 	.word	0x03d09000
 800b4cc:	003d0900 	.word	0x003d0900
 800b4d0:	0800c1d0 	.word	0x0800c1d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f04f 0100 	mov.w	r1, #0
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	4ac1      	ldr	r2, [pc, #772]	; (800b7e8 <UART_SetConfig+0xc28>)
 800b4e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	f7f4 ff16 	bl	800031c <__aeabi_uldivmod>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	020b      	lsls	r3, r1, #8
 800b502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b506:	0202      	lsls	r2, r0, #8
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	6849      	ldr	r1, [r1, #4]
 800b50c:	0849      	lsrs	r1, r1, #1
 800b50e:	4608      	mov	r0, r1
 800b510:	f04f 0100 	mov.w	r1, #0
 800b514:	1814      	adds	r4, r2, r0
 800b516:	eb43 0501 	adc.w	r5, r3, r1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	461a      	mov	r2, r3
 800b520:	f04f 0300 	mov.w	r3, #0
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f4 fef8 	bl	800031c <__aeabi_uldivmod>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4613      	mov	r3, r2
 800b532:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b53a:	d308      	bcc.n	800b54e <UART_SetConfig+0x98e>
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b542:	d204      	bcs.n	800b54e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b54a:	60da      	str	r2, [r3, #12]
 800b54c:	e17f      	b.n	800b84e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b554:	e17b      	b.n	800b84e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b55e:	f040 80be 	bne.w	800b6de <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800b562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b566:	2b20      	cmp	r3, #32
 800b568:	dc48      	bgt.n	800b5fc <UART_SetConfig+0xa3c>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	db7b      	blt.n	800b666 <UART_SetConfig+0xaa6>
 800b56e:	2b20      	cmp	r3, #32
 800b570:	d879      	bhi.n	800b666 <UART_SetConfig+0xaa6>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <UART_SetConfig+0x9b8>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b603 	.word	0x0800b603
 800b57c:	0800b60b 	.word	0x0800b60b
 800b580:	0800b667 	.word	0x0800b667
 800b584:	0800b667 	.word	0x0800b667
 800b588:	0800b613 	.word	0x0800b613
 800b58c:	0800b667 	.word	0x0800b667
 800b590:	0800b667 	.word	0x0800b667
 800b594:	0800b667 	.word	0x0800b667
 800b598:	0800b623 	.word	0x0800b623
 800b59c:	0800b667 	.word	0x0800b667
 800b5a0:	0800b667 	.word	0x0800b667
 800b5a4:	0800b667 	.word	0x0800b667
 800b5a8:	0800b667 	.word	0x0800b667
 800b5ac:	0800b667 	.word	0x0800b667
 800b5b0:	0800b667 	.word	0x0800b667
 800b5b4:	0800b667 	.word	0x0800b667
 800b5b8:	0800b633 	.word	0x0800b633
 800b5bc:	0800b667 	.word	0x0800b667
 800b5c0:	0800b667 	.word	0x0800b667
 800b5c4:	0800b667 	.word	0x0800b667
 800b5c8:	0800b667 	.word	0x0800b667
 800b5cc:	0800b667 	.word	0x0800b667
 800b5d0:	0800b667 	.word	0x0800b667
 800b5d4:	0800b667 	.word	0x0800b667
 800b5d8:	0800b667 	.word	0x0800b667
 800b5dc:	0800b667 	.word	0x0800b667
 800b5e0:	0800b667 	.word	0x0800b667
 800b5e4:	0800b667 	.word	0x0800b667
 800b5e8:	0800b667 	.word	0x0800b667
 800b5ec:	0800b667 	.word	0x0800b667
 800b5f0:	0800b667 	.word	0x0800b667
 800b5f4:	0800b667 	.word	0x0800b667
 800b5f8:	0800b659 	.word	0x0800b659
 800b5fc:	2b40      	cmp	r3, #64	; 0x40
 800b5fe:	d02e      	beq.n	800b65e <UART_SetConfig+0xa9e>
 800b600:	e031      	b.n	800b666 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b602:	f7fb ff39 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800b606:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b608:	e033      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b60a:	f7fb ff4b 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 800b60e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b610:	e02f      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b612:	f107 0314 	add.w	r3, r7, #20
 800b616:	4618      	mov	r0, r3
 800b618:	f7fd fa8e 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b620:	e027      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b622:	f107 0308 	add.w	r3, r7, #8
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd fbda 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b630:	e01f      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b632:	4b6e      	ldr	r3, [pc, #440]	; (800b7ec <UART_SetConfig+0xc2c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d009      	beq.n	800b652 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b63e:	4b6b      	ldr	r3, [pc, #428]	; (800b7ec <UART_SetConfig+0xc2c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	08db      	lsrs	r3, r3, #3
 800b644:	f003 0303 	and.w	r3, r3, #3
 800b648:	4a69      	ldr	r2, [pc, #420]	; (800b7f0 <UART_SetConfig+0xc30>)
 800b64a:	fa22 f303 	lsr.w	r3, r2, r3
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b650:	e00f      	b.n	800b672 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800b652:	4b67      	ldr	r3, [pc, #412]	; (800b7f0 <UART_SetConfig+0xc30>)
 800b654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b656:	e00c      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b658:	4b66      	ldr	r3, [pc, #408]	; (800b7f4 <UART_SetConfig+0xc34>)
 800b65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b65c:	e009      	b.n	800b672 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b664:	e005      	b.n	800b672 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800b666:	2300      	movs	r3, #0
 800b668:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 80ea 	beq.w	800b84e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	4a5a      	ldr	r2, [pc, #360]	; (800b7e8 <UART_SetConfig+0xc28>)
 800b680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b684:	461a      	mov	r2, r3
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	fbb3 f3f2 	udiv	r3, r3, r2
 800b68c:	005a      	lsls	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	085b      	lsrs	r3, r3, #1
 800b694:	441a      	add	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	2b0f      	cmp	r3, #15
 800b6a6:	d916      	bls.n	800b6d6 <UART_SetConfig+0xb16>
 800b6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ae:	d212      	bcs.n	800b6d6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	f023 030f 	bic.w	r3, r3, #15
 800b6b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	085b      	lsrs	r3, r3, #1
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b6d2:	60da      	str	r2, [r3, #12]
 800b6d4:	e0bb      	b.n	800b84e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6dc:	e0b7      	b.n	800b84e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	dc4a      	bgt.n	800b77c <UART_SetConfig+0xbbc>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f2c0 8086 	blt.w	800b7f8 <UART_SetConfig+0xc38>
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	f200 8083 	bhi.w	800b7f8 <UART_SetConfig+0xc38>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <UART_SetConfig+0xb38>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b783 	.word	0x0800b783
 800b6fc:	0800b78b 	.word	0x0800b78b
 800b700:	0800b7f9 	.word	0x0800b7f9
 800b704:	0800b7f9 	.word	0x0800b7f9
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b7f9 	.word	0x0800b7f9
 800b710:	0800b7f9 	.word	0x0800b7f9
 800b714:	0800b7f9 	.word	0x0800b7f9
 800b718:	0800b7a3 	.word	0x0800b7a3
 800b71c:	0800b7f9 	.word	0x0800b7f9
 800b720:	0800b7f9 	.word	0x0800b7f9
 800b724:	0800b7f9 	.word	0x0800b7f9
 800b728:	0800b7f9 	.word	0x0800b7f9
 800b72c:	0800b7f9 	.word	0x0800b7f9
 800b730:	0800b7f9 	.word	0x0800b7f9
 800b734:	0800b7f9 	.word	0x0800b7f9
 800b738:	0800b7b3 	.word	0x0800b7b3
 800b73c:	0800b7f9 	.word	0x0800b7f9
 800b740:	0800b7f9 	.word	0x0800b7f9
 800b744:	0800b7f9 	.word	0x0800b7f9
 800b748:	0800b7f9 	.word	0x0800b7f9
 800b74c:	0800b7f9 	.word	0x0800b7f9
 800b750:	0800b7f9 	.word	0x0800b7f9
 800b754:	0800b7f9 	.word	0x0800b7f9
 800b758:	0800b7f9 	.word	0x0800b7f9
 800b75c:	0800b7f9 	.word	0x0800b7f9
 800b760:	0800b7f9 	.word	0x0800b7f9
 800b764:	0800b7f9 	.word	0x0800b7f9
 800b768:	0800b7f9 	.word	0x0800b7f9
 800b76c:	0800b7f9 	.word	0x0800b7f9
 800b770:	0800b7f9 	.word	0x0800b7f9
 800b774:	0800b7f9 	.word	0x0800b7f9
 800b778:	0800b7d9 	.word	0x0800b7d9
 800b77c:	2b40      	cmp	r3, #64	; 0x40
 800b77e:	d02e      	beq.n	800b7de <UART_SetConfig+0xc1e>
 800b780:	e03a      	b.n	800b7f8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b782:	f7fb fe79 	bl	8007478 <HAL_RCC_GetPCLK1Freq>
 800b786:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b788:	e03c      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b78a:	f7fb fe8b 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 800b78e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b790:	e038      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b792:	f107 0314 	add.w	r3, r7, #20
 800b796:	4618      	mov	r0, r3
 800b798:	f7fd f9ce 	bl	8008b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7a0:	e030      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7a2:	f107 0308 	add.w	r3, r7, #8
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fd fb1a 	bl	8008de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7b0:	e028      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b2:	4b0e      	ldr	r3, [pc, #56]	; (800b7ec <UART_SetConfig+0xc2c>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d009      	beq.n	800b7d2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7be:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <UART_SetConfig+0xc2c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	08db      	lsrs	r3, r3, #3
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	4a09      	ldr	r2, [pc, #36]	; (800b7f0 <UART_SetConfig+0xc30>)
 800b7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7d0:	e018      	b.n	800b804 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800b7d2:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <UART_SetConfig+0xc30>)
 800b7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7d6:	e015      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7d8:	4b06      	ldr	r3, [pc, #24]	; (800b7f4 <UART_SetConfig+0xc34>)
 800b7da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7dc:	e012      	b.n	800b804 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7e4:	e00e      	b.n	800b804 <UART_SetConfig+0xc44>
 800b7e6:	bf00      	nop
 800b7e8:	0800c1d0 	.word	0x0800c1d0
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	03d09000 	.word	0x03d09000
 800b7f4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b802:	bf00      	nop
    }

    if (pclk != 0U)
 800b804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b806:	2b00      	cmp	r3, #0
 800b808:	d021      	beq.n	800b84e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	4a1a      	ldr	r2, [pc, #104]	; (800b878 <UART_SetConfig+0xcb8>)
 800b810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b814:	461a      	mov	r2, r3
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	fbb3 f2f2 	udiv	r2, r3, r2
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	441a      	add	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	2b0f      	cmp	r3, #15
 800b834:	d908      	bls.n	800b848 <UART_SetConfig+0xc88>
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83c:	d204      	bcs.n	800b848 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b844:	60da      	str	r2, [r3, #12]
 800b846:	e002      	b.n	800b84e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b86a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3738      	adds	r7, #56	; 0x38
 800b872:	46bd      	mov	sp, r7
 800b874:	bdb0      	pop	{r4, r5, r7, pc}
 800b876:	bf00      	nop
 800b878:	0800c1d0 	.word	0x0800c1d0

0800b87c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00a      	beq.n	800b8a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8aa:	f003 0302 	and.w	r3, r3, #2
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00a      	beq.n	800b8ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b910:	f003 0310 	and.w	r3, r3, #16
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00a      	beq.n	800b92e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01a      	beq.n	800b992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	430a      	orrs	r2, r1
 800b970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b97a:	d10a      	bne.n	800b992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	605a      	str	r2, [r3, #4]
  }
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af02      	add	r7, sp, #8
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9d0:	f7f5 fd6e 	bl	80014b0 <HAL_GetTick>
 800b9d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d10e      	bne.n	800ba02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f82f 	bl	800ba56 <UART_WaitOnFlagUntilTimeout>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e025      	b.n	800ba4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b04      	cmp	r3, #4
 800ba0e:	d10e      	bne.n	800ba2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f819 	bl	800ba56 <UART_WaitOnFlagUntilTimeout>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba2a:	2303      	movs	r3, #3
 800ba2c:	e00f      	b.n	800ba4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	603b      	str	r3, [r7, #0]
 800ba62:	4613      	mov	r3, r2
 800ba64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba66:	e062      	b.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d05e      	beq.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba70:	f7f5 fd1e 	bl	80014b0 <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d302      	bcc.n	800ba86 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d11d      	bne.n	800bac2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f022 0201 	bic.w	r2, r2, #1
 800baa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e045      	b.n	800bb4e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0304 	and.w	r3, r3, #4
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d02e      	beq.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bade:	d126      	bne.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baf8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689a      	ldr	r2, [r3, #8]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f022 0201 	bic.w	r2, r2, #1
 800bb08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e00f      	b.n	800bb4e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4013      	ands	r3, r2
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2301      	moveq	r3, #1
 800bb40:	2300      	movne	r3, #0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d08d      	beq.n	800ba68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6899      	ldr	r1, [r3, #8]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <UART_EndRxTransfer+0x60>)
 800bb7c:	400b      	ands	r3, r1
 800bb7e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d107      	bne.n	800bb98 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0210 	bic.w	r2, r2, #16
 800bb96:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr
 800bbb8:	effffffe 	.word	0xeffffffe

0800bbbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7fe ffda 	bl	800ab94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe0:	bf00      	nop
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbf6:	2b21      	cmp	r3, #33	; 0x21
 800bbf8:	d12a      	bne.n	800bc50 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d110      	bne.n	800bc28 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc14:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc24:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc26:	e013      	b.n	800bc50 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2c:	781a      	ldrb	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc38:	1c5a      	adds	r2, r3, #1
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc6a:	2b21      	cmp	r3, #33	; 0x21
 800bc6c:	d12f      	bne.n	800bcce <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d110      	bne.n	800bc9c <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc88:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc98:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bc9a:	e018      	b.n	800bcce <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcb0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb6:	1c9a      	adds	r2, r3, #2
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bcce:	bf00      	nop
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce8:	2b21      	cmp	r3, #33	; 0x21
 800bcea:	d13d      	bne.n	800bd68 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcf2:	81fb      	strh	r3, [r7, #14]
 800bcf4:	e035      	b.n	800bd62 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d111      	bne.n	800bd26 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	689a      	ldr	r2, [r3, #8]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bd10:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd20:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bd22:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bd24:	e020      	b.n	800bd68 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d013      	beq.n	800bd5c <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd38:	781a      	ldrb	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd5c:	89fb      	ldrh	r3, [r7, #14]
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	81fb      	strh	r3, [r7, #14]
 800bd62:	89fb      	ldrh	r3, [r7, #14]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1c6      	bne.n	800bcf6 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800bd68:	bf00      	nop
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd82:	2b21      	cmp	r3, #33	; 0x21
 800bd84:	d142      	bne.n	800be0c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd8c:	81fb      	strh	r3, [r7, #14]
 800bd8e:	e03a      	b.n	800be06 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d111      	bne.n	800bdc0 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bdaa:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdba:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800bdbc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800bdbe:	e025      	b.n	800be0c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d018      	beq.n	800be00 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd2:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bde2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde8:	1c9a      	adds	r2, r3, #2
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800be00:	89fb      	ldrh	r3, [r7, #14]
 800be02:	3b01      	subs	r3, #1
 800be04:	81fb      	strh	r3, [r7, #14]
 800be06:	89fb      	ldrh	r3, [r7, #14]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1c1      	bne.n	800bd90 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800be0c:	bf00      	nop
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be2e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2220      	movs	r2, #32
 800be34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7f4 fc32 	bl	80006a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be96:	2b01      	cmp	r3, #1
 800be98:	d101      	bne.n	800be9e <HAL_UARTEx_DisableFifoMode+0x16>
 800be9a:	2302      	movs	r3, #2
 800be9c:	e027      	b.n	800beee <HAL_UARTEx_DisableFifoMode+0x66>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2224      	movs	r2, #36	; 0x24
 800beaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f022 0201 	bic.w	r2, r2, #1
 800bec4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800becc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2220      	movs	r2, #32
 800bee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d101      	bne.n	800bf12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e02d      	b.n	800bf6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2224      	movs	r2, #36	; 0x24
 800bf1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0201 	bic.w	r2, r2, #1
 800bf38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f850 	bl	800bff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e02d      	b.n	800bfea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2224      	movs	r2, #36	; 0x24
 800bf9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f022 0201 	bic.w	r2, r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	430a      	orrs	r2, r1
 800bfc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 f812 	bl	800bff4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2220      	movs	r2, #32
 800bfdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c000:	2b00      	cmp	r3, #0
 800c002:	d108      	bne.n	800c016 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c014:	e031      	b.n	800c07a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c016:	2310      	movs	r3, #16
 800c018:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c01a:	2310      	movs	r3, #16
 800c01c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	0e5b      	lsrs	r3, r3, #25
 800c026:	b2db      	uxtb	r3, r3
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	0f5b      	lsrs	r3, r3, #29
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0307 	and.w	r3, r3, #7
 800c03c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	7b3a      	ldrb	r2, [r7, #12]
 800c042:	4911      	ldr	r1, [pc, #68]	; (800c088 <UARTEx_SetNbDataToProcess+0x94>)
 800c044:	5c8a      	ldrb	r2, [r1, r2]
 800c046:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c04a:	7b3a      	ldrb	r2, [r7, #12]
 800c04c:	490f      	ldr	r1, [pc, #60]	; (800c08c <UARTEx_SetNbDataToProcess+0x98>)
 800c04e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c050:	fb93 f3f2 	sdiv	r3, r3, r2
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	7b7a      	ldrb	r2, [r7, #13]
 800c060:	4909      	ldr	r1, [pc, #36]	; (800c088 <UARTEx_SetNbDataToProcess+0x94>)
 800c062:	5c8a      	ldrb	r2, [r1, r2]
 800c064:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c068:	7b7a      	ldrb	r2, [r7, #13]
 800c06a:	4908      	ldr	r1, [pc, #32]	; (800c08c <UARTEx_SetNbDataToProcess+0x98>)
 800c06c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c06e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c072:	b29a      	uxth	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	0800c1e8 	.word	0x0800c1e8
 800c08c:	0800c1f0 	.word	0x0800c1f0

0800c090 <__libc_init_array>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	4d0d      	ldr	r5, [pc, #52]	; (800c0c8 <__libc_init_array+0x38>)
 800c094:	4c0d      	ldr	r4, [pc, #52]	; (800c0cc <__libc_init_array+0x3c>)
 800c096:	1b64      	subs	r4, r4, r5
 800c098:	10a4      	asrs	r4, r4, #2
 800c09a:	2600      	movs	r6, #0
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	d109      	bne.n	800c0b4 <__libc_init_array+0x24>
 800c0a0:	4d0b      	ldr	r5, [pc, #44]	; (800c0d0 <__libc_init_array+0x40>)
 800c0a2:	4c0c      	ldr	r4, [pc, #48]	; (800c0d4 <__libc_init_array+0x44>)
 800c0a4:	f000 f87c 	bl	800c1a0 <_init>
 800c0a8:	1b64      	subs	r4, r4, r5
 800c0aa:	10a4      	asrs	r4, r4, #2
 800c0ac:	2600      	movs	r6, #0
 800c0ae:	42a6      	cmp	r6, r4
 800c0b0:	d105      	bne.n	800c0be <__libc_init_array+0x2e>
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}
 800c0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0b8:	4798      	blx	r3
 800c0ba:	3601      	adds	r6, #1
 800c0bc:	e7ee      	b.n	800c09c <__libc_init_array+0xc>
 800c0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c2:	4798      	blx	r3
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	e7f2      	b.n	800c0ae <__libc_init_array+0x1e>
 800c0c8:	0800c228 	.word	0x0800c228
 800c0cc:	0800c228 	.word	0x0800c228
 800c0d0:	0800c228 	.word	0x0800c228
 800c0d4:	0800c22c 	.word	0x0800c22c

0800c0d8 <__itoa>:
 800c0d8:	1e93      	subs	r3, r2, #2
 800c0da:	2b22      	cmp	r3, #34	; 0x22
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	460c      	mov	r4, r1
 800c0e0:	d904      	bls.n	800c0ec <__itoa+0x14>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	700b      	strb	r3, [r1, #0]
 800c0e6:	461c      	mov	r4, r3
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	bd10      	pop	{r4, pc}
 800c0ec:	2a0a      	cmp	r2, #10
 800c0ee:	d109      	bne.n	800c104 <__itoa+0x2c>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	da07      	bge.n	800c104 <__itoa+0x2c>
 800c0f4:	232d      	movs	r3, #45	; 0x2d
 800c0f6:	700b      	strb	r3, [r1, #0]
 800c0f8:	4240      	negs	r0, r0
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	4421      	add	r1, r4
 800c0fe:	f000 f80d 	bl	800c11c <__utoa>
 800c102:	e7f1      	b.n	800c0e8 <__itoa+0x10>
 800c104:	2100      	movs	r1, #0
 800c106:	e7f9      	b.n	800c0fc <__itoa+0x24>

0800c108 <itoa>:
 800c108:	f7ff bfe6 	b.w	800c0d8 <__itoa>

0800c10c <memset>:
 800c10c:	4402      	add	r2, r0
 800c10e:	4603      	mov	r3, r0
 800c110:	4293      	cmp	r3, r2
 800c112:	d100      	bne.n	800c116 <memset+0xa>
 800c114:	4770      	bx	lr
 800c116:	f803 1b01 	strb.w	r1, [r3], #1
 800c11a:	e7f9      	b.n	800c110 <memset+0x4>

0800c11c <__utoa>:
 800c11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c11e:	4c1f      	ldr	r4, [pc, #124]	; (800c19c <__utoa+0x80>)
 800c120:	b08b      	sub	sp, #44	; 0x2c
 800c122:	4605      	mov	r5, r0
 800c124:	460b      	mov	r3, r1
 800c126:	466e      	mov	r6, sp
 800c128:	f104 0c20 	add.w	ip, r4, #32
 800c12c:	6820      	ldr	r0, [r4, #0]
 800c12e:	6861      	ldr	r1, [r4, #4]
 800c130:	4637      	mov	r7, r6
 800c132:	c703      	stmia	r7!, {r0, r1}
 800c134:	3408      	adds	r4, #8
 800c136:	4564      	cmp	r4, ip
 800c138:	463e      	mov	r6, r7
 800c13a:	d1f7      	bne.n	800c12c <__utoa+0x10>
 800c13c:	7921      	ldrb	r1, [r4, #4]
 800c13e:	7139      	strb	r1, [r7, #4]
 800c140:	1e91      	subs	r1, r2, #2
 800c142:	6820      	ldr	r0, [r4, #0]
 800c144:	6038      	str	r0, [r7, #0]
 800c146:	2922      	cmp	r1, #34	; 0x22
 800c148:	f04f 0100 	mov.w	r1, #0
 800c14c:	d904      	bls.n	800c158 <__utoa+0x3c>
 800c14e:	7019      	strb	r1, [r3, #0]
 800c150:	460b      	mov	r3, r1
 800c152:	4618      	mov	r0, r3
 800c154:	b00b      	add	sp, #44	; 0x2c
 800c156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c158:	1e58      	subs	r0, r3, #1
 800c15a:	4684      	mov	ip, r0
 800c15c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c160:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c164:	fb02 5617 	mls	r6, r2, r7, r5
 800c168:	4476      	add	r6, lr
 800c16a:	460c      	mov	r4, r1
 800c16c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c170:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c174:	462e      	mov	r6, r5
 800c176:	42b2      	cmp	r2, r6
 800c178:	f101 0101 	add.w	r1, r1, #1
 800c17c:	463d      	mov	r5, r7
 800c17e:	d9ed      	bls.n	800c15c <__utoa+0x40>
 800c180:	2200      	movs	r2, #0
 800c182:	545a      	strb	r2, [r3, r1]
 800c184:	1919      	adds	r1, r3, r4
 800c186:	1aa5      	subs	r5, r4, r2
 800c188:	42aa      	cmp	r2, r5
 800c18a:	dae2      	bge.n	800c152 <__utoa+0x36>
 800c18c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c190:	780e      	ldrb	r6, [r1, #0]
 800c192:	7006      	strb	r6, [r0, #0]
 800c194:	3201      	adds	r2, #1
 800c196:	f801 5901 	strb.w	r5, [r1], #-1
 800c19a:	e7f4      	b.n	800c186 <__utoa+0x6a>
 800c19c:	0800c1f8 	.word	0x0800c1f8

0800c1a0 <_init>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	bf00      	nop
 800c1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a6:	bc08      	pop	{r3}
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	4770      	bx	lr

0800c1ac <_fini>:
 800c1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ae:	bf00      	nop
 800c1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b2:	bc08      	pop	{r3}
 800c1b4:	469e      	mov	lr, r3
 800c1b6:	4770      	bx	lr
