
Unit_H7_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a204  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001e8  24000010  0800a560  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001f8  0800a560  000201f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000234ee  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000334e  00000000  00000000  0004352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014c0  00000000  00000000  00046880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013d8  00000000  00000000  00047d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000349d0  00000000  00000000  00049118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000192c7  00000000  00000000  0007dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001611dd  00000000  00000000  00096daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f7f8c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ac4  00000000  00000000  001f7fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a4b8 	.word	0x0800a4b8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800a4b8 	.word	0x0800a4b8

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b96e 	b.w	8000610 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	4604      	mov	r4, r0
 8000354:	468c      	mov	ip, r1
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8083 	bne.w	8000462 <__udivmoddi4+0x116>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d947      	bls.n	80003f2 <__udivmoddi4+0xa6>
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	b142      	cbz	r2, 800037a <__udivmoddi4+0x2e>
 8000368:	f1c2 0020 	rsb	r0, r2, #32
 800036c:	fa24 f000 	lsr.w	r0, r4, r0
 8000370:	4091      	lsls	r1, r2
 8000372:	4097      	lsls	r7, r2
 8000374:	ea40 0c01 	orr.w	ip, r0, r1
 8000378:	4094      	lsls	r4, r2
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	0c23      	lsrs	r3, r4, #16
 8000380:	fbbc f6f8 	udiv	r6, ip, r8
 8000384:	fa1f fe87 	uxth.w	lr, r7
 8000388:	fb08 c116 	mls	r1, r8, r6, ip
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f10e 	mul.w	r1, r6, lr
 8000394:	4299      	cmp	r1, r3
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x60>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 30ff 	add.w	r0, r6, #4294967295
 800039e:	f080 8119 	bcs.w	80005d4 <__udivmoddi4+0x288>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 8116 	bls.w	80005d4 <__udivmoddi4+0x288>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x8c>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 8105 	bcs.w	80005d8 <__udivmoddi4+0x28c>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8102 	bls.w	80005d8 <__udivmoddi4+0x28c>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003dc:	eba4 040e 	sub.w	r4, r4, lr
 80003e0:	2600      	movs	r6, #0
 80003e2:	b11d      	cbz	r5, 80003ec <__udivmoddi4+0xa0>
 80003e4:	40d4      	lsrs	r4, r2
 80003e6:	2300      	movs	r3, #0
 80003e8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xaa>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d150      	bne.n	80004a0 <__udivmoddi4+0x154>
 80003fe:	1bcb      	subs	r3, r1, r7
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	2601      	movs	r6, #1
 800040a:	fbb3 fcfe 	udiv	ip, r3, lr
 800040e:	0c21      	lsrs	r1, r4, #16
 8000410:	fb0e 331c 	mls	r3, lr, ip, r3
 8000414:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000418:	fb08 f30c 	mul.w	r3, r8, ip
 800041c:	428b      	cmp	r3, r1
 800041e:	d907      	bls.n	8000430 <__udivmoddi4+0xe4>
 8000420:	1879      	adds	r1, r7, r1
 8000422:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0xe2>
 8000428:	428b      	cmp	r3, r1
 800042a:	f200 80e9 	bhi.w	8000600 <__udivmoddi4+0x2b4>
 800042e:	4684      	mov	ip, r0
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	b2a3      	uxth	r3, r4
 8000434:	fbb1 f0fe 	udiv	r0, r1, lr
 8000438:	fb0e 1110 	mls	r1, lr, r0, r1
 800043c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000440:	fb08 f800 	mul.w	r8, r8, r0
 8000444:	45a0      	cmp	r8, r4
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x10c>
 8000448:	193c      	adds	r4, r7, r4
 800044a:	f100 33ff 	add.w	r3, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x10a>
 8000450:	45a0      	cmp	r8, r4
 8000452:	f200 80d9 	bhi.w	8000608 <__udivmoddi4+0x2bc>
 8000456:	4618      	mov	r0, r3
 8000458:	eba4 0408 	sub.w	r4, r4, r8
 800045c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000460:	e7bf      	b.n	80003e2 <__udivmoddi4+0x96>
 8000462:	428b      	cmp	r3, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x12e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	f000 80b1 	beq.w	80005ce <__udivmoddi4+0x282>
 800046c:	2600      	movs	r6, #0
 800046e:	e9c5 0100 	strd	r0, r1, [r5]
 8000472:	4630      	mov	r0, r6
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	fab3 f683 	clz	r6, r3
 800047e:	2e00      	cmp	r6, #0
 8000480:	d14a      	bne.n	8000518 <__udivmoddi4+0x1cc>
 8000482:	428b      	cmp	r3, r1
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0x140>
 8000486:	4282      	cmp	r2, r0
 8000488:	f200 80b8 	bhi.w	80005fc <__udivmoddi4+0x2b0>
 800048c:	1a84      	subs	r4, r0, r2
 800048e:	eb61 0103 	sbc.w	r1, r1, r3
 8000492:	2001      	movs	r0, #1
 8000494:	468c      	mov	ip, r1
 8000496:	2d00      	cmp	r5, #0
 8000498:	d0a8      	beq.n	80003ec <__udivmoddi4+0xa0>
 800049a:	e9c5 4c00 	strd	r4, ip, [r5]
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0xa0>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f603 	lsr.w	r6, r0, r3
 80004a8:	4097      	lsls	r7, r2
 80004aa:	fa01 f002 	lsl.w	r0, r1, r2
 80004ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b2:	40d9      	lsrs	r1, r3
 80004b4:	4330      	orrs	r0, r6
 80004b6:	0c03      	lsrs	r3, r0, #16
 80004b8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004bc:	fa1f f887 	uxth.w	r8, r7
 80004c0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c8:	fb06 f108 	mul.w	r1, r6, r8
 80004cc:	4299      	cmp	r1, r3
 80004ce:	fa04 f402 	lsl.w	r4, r4, r2
 80004d2:	d909      	bls.n	80004e8 <__udivmoddi4+0x19c>
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004da:	f080 808d 	bcs.w	80005f8 <__udivmoddi4+0x2ac>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 808a 	bls.w	80005f8 <__udivmoddi4+0x2ac>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	443b      	add	r3, r7
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b281      	uxth	r1, r0
 80004ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f8:	fb00 f308 	mul.w	r3, r0, r8
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x1c4>
 8000500:	1879      	adds	r1, r7, r1
 8000502:	f100 3cff 	add.w	ip, r0, #4294967295
 8000506:	d273      	bcs.n	80005f0 <__udivmoddi4+0x2a4>
 8000508:	428b      	cmp	r3, r1
 800050a:	d971      	bls.n	80005f0 <__udivmoddi4+0x2a4>
 800050c:	3802      	subs	r0, #2
 800050e:	4439      	add	r1, r7
 8000510:	1acb      	subs	r3, r1, r3
 8000512:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000516:	e778      	b.n	800040a <__udivmoddi4+0xbe>
 8000518:	f1c6 0c20 	rsb	ip, r6, #32
 800051c:	fa03 f406 	lsl.w	r4, r3, r6
 8000520:	fa22 f30c 	lsr.w	r3, r2, ip
 8000524:	431c      	orrs	r4, r3
 8000526:	fa20 f70c 	lsr.w	r7, r0, ip
 800052a:	fa01 f306 	lsl.w	r3, r1, r6
 800052e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000532:	fa21 f10c 	lsr.w	r1, r1, ip
 8000536:	431f      	orrs	r7, r3
 8000538:	0c3b      	lsrs	r3, r7, #16
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fa1f f884 	uxth.w	r8, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054a:	fb09 fa08 	mul.w	sl, r9, r8
 800054e:	458a      	cmp	sl, r1
 8000550:	fa02 f206 	lsl.w	r2, r2, r6
 8000554:	fa00 f306 	lsl.w	r3, r0, r6
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x220>
 800055a:	1861      	adds	r1, r4, r1
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	d248      	bcs.n	80005f4 <__udivmoddi4+0x2a8>
 8000562:	458a      	cmp	sl, r1
 8000564:	d946      	bls.n	80005f4 <__udivmoddi4+0x2a8>
 8000566:	f1a9 0902 	sub.w	r9, r9, #2
 800056a:	4421      	add	r1, r4
 800056c:	eba1 010a 	sub.w	r1, r1, sl
 8000570:	b2bf      	uxth	r7, r7
 8000572:	fbb1 f0fe 	udiv	r0, r1, lr
 8000576:	fb0e 1110 	mls	r1, lr, r0, r1
 800057a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800057e:	fb00 f808 	mul.w	r8, r0, r8
 8000582:	45b8      	cmp	r8, r7
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x24a>
 8000586:	19e7      	adds	r7, r4, r7
 8000588:	f100 31ff 	add.w	r1, r0, #4294967295
 800058c:	d22e      	bcs.n	80005ec <__udivmoddi4+0x2a0>
 800058e:	45b8      	cmp	r8, r7
 8000590:	d92c      	bls.n	80005ec <__udivmoddi4+0x2a0>
 8000592:	3802      	subs	r0, #2
 8000594:	4427      	add	r7, r4
 8000596:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059a:	eba7 0708 	sub.w	r7, r7, r8
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	454f      	cmp	r7, r9
 80005a4:	46c6      	mov	lr, r8
 80005a6:	4649      	mov	r1, r9
 80005a8:	d31a      	bcc.n	80005e0 <__udivmoddi4+0x294>
 80005aa:	d017      	beq.n	80005dc <__udivmoddi4+0x290>
 80005ac:	b15d      	cbz	r5, 80005c6 <__udivmoddi4+0x27a>
 80005ae:	ebb3 020e 	subs.w	r2, r3, lr
 80005b2:	eb67 0701 	sbc.w	r7, r7, r1
 80005b6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ba:	40f2      	lsrs	r2, r6
 80005bc:	ea4c 0202 	orr.w	r2, ip, r2
 80005c0:	40f7      	lsrs	r7, r6
 80005c2:	e9c5 2700 	strd	r2, r7, [r5]
 80005c6:	2600      	movs	r6, #0
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e70b      	b.n	80003ec <__udivmoddi4+0xa0>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e9      	b.n	80003ac <__udivmoddi4+0x60>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6fd      	b.n	80003d8 <__udivmoddi4+0x8c>
 80005dc:	4543      	cmp	r3, r8
 80005de:	d2e5      	bcs.n	80005ac <__udivmoddi4+0x260>
 80005e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e4:	eb69 0104 	sbc.w	r1, r9, r4
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7df      	b.n	80005ac <__udivmoddi4+0x260>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e7d2      	b.n	8000596 <__udivmoddi4+0x24a>
 80005f0:	4660      	mov	r0, ip
 80005f2:	e78d      	b.n	8000510 <__udivmoddi4+0x1c4>
 80005f4:	4681      	mov	r9, r0
 80005f6:	e7b9      	b.n	800056c <__udivmoddi4+0x220>
 80005f8:	4666      	mov	r6, ip
 80005fa:	e775      	b.n	80004e8 <__udivmoddi4+0x19c>
 80005fc:	4630      	mov	r0, r6
 80005fe:	e74a      	b.n	8000496 <__udivmoddi4+0x14a>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	4439      	add	r1, r7
 8000606:	e713      	b.n	8000430 <__udivmoddi4+0xe4>
 8000608:	3802      	subs	r0, #2
 800060a:	443c      	add	r4, r7
 800060c:	e724      	b.n	8000458 <__udivmoddi4+0x10c>
 800060e:	bf00      	nop

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc3);
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800061e:	f001 fb5d 	bl	8001cdc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, 1);
 8000622:	2101      	movs	r1, #1
 8000624:	481d      	ldr	r0, [pc, #116]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000626:	f001 fc23 	bl	8001e70 <HAL_ADC_PollForConversion>

	adc_memory[0] = HAL_ADC_GetValue(&hadc3);
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800062c:	f001 fd14 	bl	8002058 <HAL_ADC_GetValue>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000636:	801a      	strh	r2, [r3, #0]




	char str[6] = "000000";
 8000638:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000642:	6018      	str	r0, [r3, #0]
 8000644:	3304      	adds	r3, #4
 8000646:	8019      	strh	r1, [r3, #0]
	char end[2] = "\r\n";
 8000648:	f640 230d 	movw	r3, #2573	; 0xa0d
 800064c:	81bb      	strh	r3, [r7, #12]
	itoa(adc_memory[0], str, 10);
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	220a      	movs	r2, #10
 800065a:	4619      	mov	r1, r3
 800065c:	f009 fee0 	bl	800a420 <itoa>

	HAL_UART_Transmit(&huart3, (uint8_t* )str, strlen(str), 1);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe51 	bl	800030c <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29a      	uxth	r2, r3
 800066e:	f107 0110 	add.w	r1, r7, #16
 8000672:	2301      	movs	r3, #1
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000676:	f008 fd33 	bl	80090e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t* )end, strlen(end), 1);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe44 	bl	800030c <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 010c 	add.w	r1, r7, #12
 800068c:	2301      	movs	r3, #1
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000690:	f008 fd26 	bl	80090e0 <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(&huart3, (uint8_t* )str, strlen(str));
//	HAL_UART_Transmit_DMA(&huart3, (uint8_t* )end, strlen(end));

	//HAL_UART_Transmit(&huart3, (uint8_t* )str, strlen(str), 1);
	//HAL_ADC_Start_DMA(&hadc3, (uint32_t *)adc_memory, ADC_LENGTH);
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000138 	.word	0x24000138
 80006a0:	2400002c 	.word	0x2400002c
 80006a4:	0800a4d0 	.word	0x0800a4d0
 80006a8:	24000030 	.word	0x24000030

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006b2:	4b3a      	ldr	r3, [pc, #232]	; (800079c <main+0xf0>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11b      	bne.n	80006f6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c4:	f3bf 8f6f 	isb	sy
}
 80006c8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <main+0xf0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006d2:	f3bf 8f4f 	dsb	sy
}
 80006d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d8:	f3bf 8f6f 	isb	sy
}
 80006dc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <main+0xf0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a2e      	ldr	r2, [pc, #184]	; (800079c <main+0xf0>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ea:	f3bf 8f4f 	dsb	sy
}
 80006ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f0:	f3bf 8f6f 	isb	sy
}
 80006f4:	e000      	b.n	80006f8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006f6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <main+0xf0>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d138      	bne.n	8000776 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <main+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800070c:	f3bf 8f4f 	dsb	sy
}
 8000710:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0xf0>)
 8000714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000718:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000722:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	08db      	lsrs	r3, r3, #3
 8000728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800072c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	015a      	lsls	r2, r3, #5
 8000732:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000736:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800073c:	4917      	ldr	r1, [pc, #92]	; (800079c <main+0xf0>)
 800073e:	4313      	orrs	r3, r2
 8000740:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1ef      	bne.n	800072e <main+0x82>
    } while(sets-- != 0U);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	60ba      	str	r2, [r7, #8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1e5      	bne.n	8000724 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <main+0xf0>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <main+0xf0>)
 8000764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000768:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000770:	f3bf 8f6f 	isb	sy
}
 8000774:	e000      	b.n	8000778 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000776:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fd50 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f812 	bl	80007a4 <SystemClock_Config>
  /* disable D-cache, causes problems with DMA */
  //SCB_DisableDCache();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 f9dc 	bl	8000b3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000784:	f000 f96e 	bl	8000a64 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000788:	f000 f884 	bl	8000894 <MX_ADC3_Init>
  MX_DMA_Init();
 800078c:	f000 f9b6 	bl	8000afc <MX_DMA_Init>
  MX_TIM1_Init();
 8000790:	f000 f8f2 	bl	8000978 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <main+0xf4>)
 8000796:	f007 fd69 	bl	800826c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0xee>
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	240001a8 	.word	0x240001a8

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	; 0x70
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 fe36 	bl	800a424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f009 fe30 	bl	800a424 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f004 fd13 	bl	80051f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <SystemClock_Config+0xe8>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <SystemClock_Config+0xe8>)
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <SystemClock_Config+0xe8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e6:	bf00      	nop
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <SystemClock_Config+0xe8>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f4:	d1f8      	bne.n	80007e8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <SystemClock_Config+0xec>)
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	f023 0303 	bic.w	r3, r3, #3
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <SystemClock_Config+0xec>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000806:	2301      	movs	r3, #1
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000814:	2302      	movs	r3, #2
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800081c:	f240 1313 	movw	r3, #275	; 0x113
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800082e:	2304      	movs	r3, #4
 8000830:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000832:	2300      	movs	r3, #0
 8000834:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4618      	mov	r0, r3
 8000840:	f004 fd10 	bl	8005264 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800084a:	f000 fa63 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	233f      	movs	r3, #63	; 0x3f
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800085a:	2308      	movs	r3, #8
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800085e:	2340      	movs	r3, #64	; 0x40
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000862:	2340      	movs	r3, #64	; 0x40
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800086c:	2340      	movs	r3, #64	; 0x40
 800086e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2103      	movs	r1, #3
 8000874:	4618      	mov	r0, r3
 8000876:	f005 f883 	bl	8005980 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000880:	f000 fa48 	bl	8000d14 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3770      	adds	r7, #112	; 0x70
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024800 	.word	0x58024800
 8000890:	58024400 	.word	0x58024400

08000894 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2224      	movs	r2, #36	; 0x24
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f009 fdbf 	bl	800a424 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80008a6:	4b32      	ldr	r3, [pc, #200]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008a8:	4a32      	ldr	r2, [pc, #200]	; (8000974 <MX_ADC3_Init+0xe0>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ac:	4b30      	ldr	r3, [pc, #192]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008d8:	2201      	movs	r2, #1
 80008da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC3_Init+0xdc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC3_Init+0xdc>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ADC3_Init+0xdc>)
 8000906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_ADC3_Init+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC3_Init+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <MX_ADC3_Init+0xdc>)
 800091c:	f000 ffd6 	bl	80018cc <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000926:	f000 f9f5 	bl	8000d14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800092a:	2301      	movs	r3, #1
 800092c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800092e:	2306      	movs	r3, #6
 8000930:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800093a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800093c:	2304      	movs	r3, #4
 800093e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_ADC3_Init+0xdc>)
 800095a:	f001 fde3 	bl	8002524 <HAL_ADC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000964:	f000 f9d6 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000138 	.word	0x24000138
 8000974:	58026000 	.word	0x58026000

08000978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009a6:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <MX_TIM1_Init+0xe8>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009b8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80009bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009be:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d0:	4822      	ldr	r0, [pc, #136]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009d2:	f007 fbf3 	bl	80081bc <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80009dc:	f000 f99a 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4619      	mov	r1, r3
 80009ec:	481b      	ldr	r0, [pc, #108]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009ee:	f007 fed7 	bl	80087a0 <HAL_TIM_ConfigClockSource>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80009f8:	f000 f98c 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_TIM1_Init+0xe4>)
 80009fe:	f007 fcbb 	bl	8008378 <HAL_TIM_IC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a08:	f000 f984 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <MX_TIM1_Init+0xe4>)
 8000a20:	f008 fa54 	bl	8008ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a2a:	f000 f973 	bl	8000d14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a32:	2301      	movs	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM1_Init+0xe4>)
 8000a46:	f007 fe17 	bl	8008678 <HAL_TIM_IC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a50:	f000 f960 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	240001a8 	.word	0x240001a8
 8000a60:	40010000 	.word	0x40010000

08000a64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <MX_USART3_UART_Init+0x94>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000aae:	f008 fac7 	bl	8009040 <HAL_UART_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab8:	f000 f92c 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ac0:	f009 fba8 	bl	800a214 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aca:	f000 f923 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f009 fbdd 	bl	800a290 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000adc:	f000 f91a 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f009 fb5e 	bl	800a1a2 <HAL_UARTEx_DisableFifoMode>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f912 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	24000030 	.word	0x24000030
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b08:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	200b      	movs	r0, #11
 8000b26:	f002 fcac 	bl	8003482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f002 fcc3 	bl	80034b6 <HAL_NVIC_EnableIRQ>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	4a67      	ldr	r2, [pc, #412]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b62:	4b65      	ldr	r3, [pc, #404]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	623b      	str	r3, [r7, #32]
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b70:	4b61      	ldr	r3, [pc, #388]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b76:	4a60      	ldr	r2, [pc, #384]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b80:	4b5d      	ldr	r3, [pc, #372]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9e:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	4a51      	ldr	r2, [pc, #324]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	4b4b      	ldr	r3, [pc, #300]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a49      	ldr	r2, [pc, #292]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b47      	ldr	r3, [pc, #284]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a3a      	ldr	r2, [pc, #232]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <MX_GPIO_Init+0x1bc>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c48:	482c      	ldr	r0, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c4a:	f004 fab7 	bl	80051bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	482a      	ldr	r0, [pc, #168]	; (8000d00 <MX_GPIO_Init+0x1c4>)
 8000c56:	f004 fab1 	bl	80051bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4829      	ldr	r0, [pc, #164]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000c60:	f004 faac 	bl	80051bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4823      	ldr	r0, [pc, #140]	; (8000d08 <MX_GPIO_Init+0x1cc>)
 8000c7a:	f004 f8f7 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c7e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4819      	ldr	r0, [pc, #100]	; (8000cfc <MX_GPIO_Init+0x1c0>)
 8000c98:	f004 f8e8 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x1c4>)
 8000cb6:	f004 f8d9 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_GPIO_Init+0x1d0>)
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <MX_GPIO_Init+0x1d4>)
 8000cce:	f004 f8cd 	bl	8004e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <MX_GPIO_Init+0x1c8>)
 8000cea:	f004 f8bf 	bl	8004e6c <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58020c00 	.word	0x58020c00
 8000d04:	58021000 	.word	0x58021000
 8000d08:	58020800 	.word	0x58020800
 8000d0c:	11110000 	.word	0x11110000
 8000d10:	58021800 	.word	0x58021800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x30>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x30>)
 8000d38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024400 	.word	0x58024400

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b8      	sub	sp, #224	; 0xe0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	22b4      	movs	r2, #180	; 0xb4
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f009 fb55 	bl	800a424 <memset>
  if(hadc->Instance==ADC3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a39      	ldr	r2, [pc, #228]	; (8000e64 <HAL_ADC_MspInit+0x110>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d16a      	bne.n	8000e5a <HAL_ADC_MspInit+0x106>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000d8e:	2318      	movs	r3, #24
 8000d90:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 f96f 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000dc0:	f7ff ffa8 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_ADC_MspInit+0x114>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    PF4     ------> ADC3_INP9
    PF5     ------> ADC3_INP4
    PF10     ------> ADC3_INP6
    PC2_C     ------> ADC3_INP0
    */
    GPIO_InitStruct.Pin = adc_dc_voltage_Pin|adc_dc_current_Pin|adc_ac_current_Pin;
 8000e1e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <HAL_ADC_MspInit+0x118>)
 8000e3a:	f004 f817 	bl	8004e6c <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000e3e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000e42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e46:	f000 fa7b 	bl	8001340 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	207f      	movs	r0, #127	; 0x7f
 8000e50:	f002 fb17 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000e54:	207f      	movs	r0, #127	; 0x7f
 8000e56:	f002 fb2e 	bl	80034b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	37e0      	adds	r7, #224	; 0xe0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	58026000 	.word	0x58026000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58021400 	.word	0x58021400

08000e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <HAL_TIM_Base_MspInit+0x98>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d136      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_TIM_Base_MspInit+0x9c>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0xa0>)
 8000eec:	f003 ffbe 	bl	8004e6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2019      	movs	r0, #25
 8000ef6:	f002 fac4 	bl	8003482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000efa:	2019      	movs	r0, #25
 8000efc:	f002 fadb 	bl	80034b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58021000 	.word	0x58021000

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b6      	sub	sp, #216	; 0xd8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	22b4      	movs	r2, #180	; 0xb4
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f009 fa75 	bl	800a424 <memset>
  if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a3b      	ldr	r2, [pc, #236]	; (800102c <HAL_UART_MspInit+0x118>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d16f      	bne.n	8001024 <HAL_UART_MspInit+0x110>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	2302      	movs	r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 f8a0 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff fed9 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f68:	4a31      	ldr	r2, [pc, #196]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_UART_MspInit+0x11c>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481b      	ldr	r0, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x120>)
 8000fc6:	f003 ff51 	bl	8004e6c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_UART_MspInit+0x128>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fd2:	222e      	movs	r2, #46	; 0x2e
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x124>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_UART_MspInit+0x124>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_UART_MspInit+0x124>)
 800100a:	f002 fa6f 	bl	80034ec <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001014:	f7ff fe7e 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_UART_MspInit+0x124>)
 800101c:	679a      	str	r2, [r3, #120]	; 0x78
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_UART_MspInit+0x124>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	37d8      	adds	r7, #216	; 0xd8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004800 	.word	0x40004800
 8001030:	58024400 	.word	0x58024400
 8001034:	58020c00 	.word	0x58020c00
 8001038:	240000c0 	.word	0x240000c0
 800103c:	40020010 	.word	0x40020010

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f938 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream0_IRQHandler+0x10>)
 800109a:	f002 fd81 	bl	8003ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000c0 	.word	0x240000c0

080010a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM1_UP_IRQHandler+0x10>)
 80010ae:	f007 f9c4 	bl	800843a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	240001a8 	.word	0x240001a8

080010bc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <ADC3_IRQHandler+0x10>)
 80010c2:	f000 ffd7 	bl	8002074 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000138 	.word	0x24000138

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <SystemInit+0xd8>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <SystemInit+0xd8>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e4:	4b31      	ldr	r3, [pc, #196]	; (80011ac <SystemInit+0xdc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d807      	bhi.n	8001100 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <SystemInit+0xdc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 030f 	bic.w	r3, r3, #15
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <SystemInit+0xdc>)
 80010fa:	f043 0307 	orr.w	r3, r3, #7
 80010fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <SystemInit+0xe0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <SystemInit+0xe0>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800110c:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <SystemInit+0xe0>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <SystemInit+0xe0>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4926      	ldr	r1, [pc, #152]	; (80011b0 <SystemInit+0xe0>)
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SystemInit+0xe4>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemInit+0xdc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <SystemInit+0xdc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <SystemInit+0xdc>)
 8001134:	f043 0307 	orr.w	r3, r3, #7
 8001138:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <SystemInit+0xe0>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <SystemInit+0xe0>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <SystemInit+0xe0>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <SystemInit+0xe0>)
 800114e:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <SystemInit+0xe8>)
 8001150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <SystemInit+0xe0>)
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <SystemInit+0xec>)
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <SystemInit+0xe0>)
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <SystemInit+0xf0>)
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <SystemInit+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <SystemInit+0xe0>)
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <SystemInit+0xf0>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <SystemInit+0xe0>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <SystemInit+0xe0>)
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <SystemInit+0xf0>)
 8001174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <SystemInit+0xe0>)
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <SystemInit+0xe0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <SystemInit+0xe0>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <SystemInit+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0xf4>)
 8001190:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001194:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SystemInit+0xd8>)
 8001198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800119c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	52002000 	.word	0x52002000
 80011b0:	58024400 	.word	0x58024400
 80011b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b8:	02020200 	.word	0x02020200
 80011bc:	01ff0000 	.word	0x01ff0000
 80011c0:	01010280 	.word	0x01010280
 80011c4:	52004000 	.word	0x52004000

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011cc:	f7ff ff80 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f009 f8d7 	bl	800a3a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fa57 	bl	80006ac <main>
  bx  lr
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001204:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001208:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800120c:	0800a550 	.word	0x0800a550
  ldr r2, =_sbss
 8001210:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001214:	240001f8 	.word	0x240001f8

08001218 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001222:	2003      	movs	r0, #3
 8001224:	f002 f922 	bl	800346c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001228:	f004 fd60 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 800122c:	4602      	mov	r2, r0
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_Init+0x68>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	0a1b      	lsrs	r3, r3, #8
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	4913      	ldr	r1, [pc, #76]	; (8001288 <HAL_Init+0x6c>)
 800123a:	5ccb      	ldrb	r3, [r1, r3]
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_Init+0x68>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_Init+0x6c>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x70>)
 800125e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_Init+0x74>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f814 	bl	8001294 <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e002      	b.n	800127c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001276:	f7ff fd53 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024400 	.word	0x58024400
 8001288:	0800a4d8 	.word	0x0800a4d8
 800128c:	24000004 	.word	0x24000004
 8001290:	24000000 	.word	0x24000000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_InitTick+0x60>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e021      	b.n	80012ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_InitTick+0x64>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_InitTick+0x60>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 f907 	bl	80034d2 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f002 f8d1 	bl	8003482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x68>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2400000c 	.word	0x2400000c
 80012f8:	24000000 	.word	0x24000000
 80012fc:	24000008 	.word	0x24000008

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2400000c 	.word	0x2400000c
 8001324:	240001f4 	.word	0x240001f4

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	240001f4 	.word	0x240001f4

08001340 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	43db      	mvns	r3, r3
 8001352:	401a      	ands	r2, r3
 8001354:	4904      	ldr	r1, [pc, #16]	; (8001368 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	58000400 	.word	0x58000400

0800136c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3360      	adds	r3, #96	; 0x60
 80013e6:	461a      	mov	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <LL_ADC_SetOffset+0x60>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10b      	bne.n	8001410 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	4313      	orrs	r3, r2
 8001406:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800140e:	e00b      	b.n	8001428 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	430b      	orrs	r3, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58026000 	.word	0x58026000

08001438 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3360      	adds	r3, #96	; 0x60
 8001446:	461a      	mov	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00e      	beq.n	80014ca <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3360      	adds	r3, #96	; 0x60
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	601a      	str	r2, [r3, #0]
  }
}
 80014ca:	bf00      	nop
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	58026000 	.word	0x58026000

080014dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <LL_ADC_SetOffsetSaturation+0x40>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d10e      	bne.n	800150e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3360      	adds	r3, #96	; 0x60
 80014f4:	461a      	mov	r2, r3
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	431a      	orrs	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800150e:	bf00      	nop
 8001510:	371c      	adds	r7, #28
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	58026000 	.word	0x58026000

08001520 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <LL_ADC_SetOffsetSign+0x40>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d10e      	bne.n	8001552 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3360      	adds	r3, #96	; 0x60
 8001538:	461a      	mov	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	431a      	orrs	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	58026000 	.word	0x58026000

08001564 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3360      	adds	r3, #96	; 0x60
 8001574:	461a      	mov	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <LL_ADC_SetOffsetState+0x50>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d108      	bne.n	8001598 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001596:	e007      	b.n	80015a8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	58026000 	.word	0x58026000

080015b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015de:	b480      	push	{r7}
 80015e0:	b087      	sub	sp, #28
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3330      	adds	r3, #48	; 0x30
 80015ee:	461a      	mov	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	4413      	add	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	211f      	movs	r1, #31
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0e9b      	lsrs	r3, r3, #26
 8001616:	f003 011f 	and.w	r1, r3, #31
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	431a      	orrs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800162a:	bf00      	nop
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3314      	adds	r3, #20
 800166c:	461a      	mov	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	0e5b      	lsrs	r3, r3, #25
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	4413      	add	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	0d1b      	lsrs	r3, r3, #20
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2107      	movs	r1, #7
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	401a      	ands	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	0d1b      	lsrs	r3, r3, #20
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <LL_ADC_SetChannelSingleDiff+0x78>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d115      	bne.n	80016f4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016d4:	43db      	mvns	r3, r3
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0318 	and.w	r3, r3, #24
 80016de:	4914      	ldr	r1, [pc, #80]	; (8001730 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80016e0:	40d9      	lsrs	r1, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	400b      	ands	r3, r1
 80016e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016ea:	431a      	orrs	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80016f2:	e014      	b.n	800171e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0318 	and.w	r3, r3, #24
 800170a:	4909      	ldr	r1, [pc, #36]	; (8001730 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800170c:	40d9      	lsrs	r1, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	400b      	ands	r3, r1
 8001712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001716:	431a      	orrs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	58026000 	.word	0x58026000
 8001730:	000fffff 	.word	0x000fffff

08001734 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 031f 	and.w	r3, r3, #31
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <LL_ADC_DisableDeepPowerDown+0x20>)
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6093      	str	r3, [r2, #8]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	5fffffc0 	.word	0x5fffffc0

08001790 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017a4:	d101      	bne.n	80017aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_ADC_EnableInternalRegulator+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	6fffffc0 	.word	0x6fffffc0

080017e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017f4:	d101      	bne.n	80017fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <LL_ADC_Enable+0x24>)
 8001816:	4013      	ands	r3, r2
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	7fffffc0 	.word	0x7fffffc0

08001830 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <LL_ADC_IsEnabled+0x18>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_IsEnabled+0x1a>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <LL_ADC_REG_StartConversion+0x24>)
 8001866:	4013      	ands	r3, r2
 8001868:	f043 0204 	orr.w	r2, r3, #4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	7fffffc0 	.word	0x7fffffc0

08001880 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b04      	cmp	r3, #4
 8001892:	d101      	bne.n	8001898 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d101      	bne.n	80018be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1ee      	b.n	8001cc4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fa2d 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff3f 	bl	8001790 <LL_ADC_IsDeepPowerDownEnabled>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff25 	bl	800176c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff5a 	bl	80017e0 <LL_ADC_IsInternalRegulatorEnabled>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d114      	bne.n	800195c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff3e 	bl	80017b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800193c:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <HAL_ADC_Init+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	4a8e      	ldr	r2, [pc, #568]	; (8001b7c <HAL_ADC_Init+0x2b0>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	3301      	adds	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800194e:	e002      	b.n	8001956 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3b01      	subs	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f9      	bne.n	8001950 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff3d 	bl	80017e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10d      	bne.n	8001988 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	f043 0210 	orr.w	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff77 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 8001992:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8188 	bne.w	8001cb2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 8184 	bne.w	8001cb2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019b2:	f043 0202 	orr.w	r2, r3, #2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff36 	bl	8001830 <LL_ADC_IsEnabled>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d136      	bne.n	8001a38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6c      	ldr	r2, [pc, #432]	; (8001b80 <HAL_ADC_Init+0x2b4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d004      	beq.n	80019de <HAL_ADC_Init+0x112>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <HAL_ADC_Init+0x2b8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10e      	bne.n	80019fc <HAL_ADC_Init+0x130>
 80019de:	4868      	ldr	r0, [pc, #416]	; (8001b80 <HAL_ADC_Init+0x2b4>)
 80019e0:	f7ff ff26 	bl	8001830 <LL_ADC_IsEnabled>
 80019e4:	4604      	mov	r4, r0
 80019e6:	4867      	ldr	r0, [pc, #412]	; (8001b84 <HAL_ADC_Init+0x2b8>)
 80019e8:	f7ff ff22 	bl	8001830 <LL_ADC_IsEnabled>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4323      	orrs	r3, r4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e008      	b.n	8001a0e <HAL_ADC_Init+0x142>
 80019fc:	4862      	ldr	r0, [pc, #392]	; (8001b88 <HAL_ADC_Init+0x2bc>)
 80019fe:	f7ff ff17 	bl	8001830 <LL_ADC_IsEnabled>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HAL_ADC_Init+0x2b4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_Init+0x15a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_ADC_Init+0x2b8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x15e>
 8001a26:	4a59      	ldr	r2, [pc, #356]	; (8001b8c <HAL_ADC_Init+0x2c0>)
 8001a28:	e000      	b.n	8001a2c <HAL_ADC_Init+0x160>
 8001a2a:	4a59      	ldr	r2, [pc, #356]	; (8001b90 <HAL_ADC_Init+0x2c4>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4610      	mov	r0, r2
 8001a34:	f7ff fc9a 	bl	800136c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_ADC_Init+0x2bc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d129      	bne.n	8001a96 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7e5b      	ldrb	r3, [r3, #25]
 8001a46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a4c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001a52:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d013      	beq.n	8001a84 <HAL_ADC_Init+0x1b8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d00d      	beq.n	8001a80 <HAL_ADC_Init+0x1b4>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b1c      	cmp	r3, #28
 8001a6a:	d007      	beq.n	8001a7c <HAL_ADC_Init+0x1b0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b18      	cmp	r3, #24
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_Init+0x1ac>
 8001a74:	2318      	movs	r3, #24
 8001a76:	e006      	b.n	8001a86 <HAL_ADC_Init+0x1ba>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e004      	b.n	8001a86 <HAL_ADC_Init+0x1ba>
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	e002      	b.n	8001a86 <HAL_ADC_Init+0x1ba>
 8001a80:	2308      	movs	r3, #8
 8001a82:	e000      	b.n	8001a86 <HAL_ADC_Init+0x1ba>
 8001a84:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001a86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e00e      	b.n	8001ab4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e5b      	ldrb	r3, [r3, #25]
 8001a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	045b      	lsls	r3, r3, #17
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_ADC_Init+0x2bc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d115      	bne.n	8001b1e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <HAL_ADC_Init+0x2c8>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	69b9      	ldr	r1, [r7, #24]
 8001b02:	430b      	orrs	r3, r1
 8001b04:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	e009      	b.n	8001b32 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_ADC_Init+0x2cc>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	69b9      	ldr	r1, [r7, #24]
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fea2 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 8001b3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff feaf 	bl	80018a6 <LL_ADC_INJ_IsConversionOngoing>
 8001b48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 808e 	bne.w	8001c6e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 808a 	bne.w	8001c6e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_ADC_Init+0x2bc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d11b      	bne.n	8001b9c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
 8001b68:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b70:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	e018      	b.n	8001baa <HAL_ADC_Init+0x2de>
 8001b78:	24000000 	.word	0x24000000
 8001b7c:	053e2d63 	.word	0x053e2d63
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40022100 	.word	0x40022100
 8001b88:	58026000 	.word	0x58026000
 8001b8c:	40022300 	.word	0x40022300
 8001b90:	58026300 	.word	0x58026300
 8001b94:	fff04007 	.word	0xfff04007
 8001b98:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ba0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_ADC_Init+0x400>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	69b9      	ldr	r1, [r7, #24]
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d137      	bne.n	8001c38 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <HAL_ADC_Init+0x404>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d116      	bne.n	8001c06 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_ADC_Init+0x408>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	e020      	b.n	8001c48 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_ADC_Init+0x40c>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c14:	3a01      	subs	r2, #1
 8001c16:	0411      	lsls	r1, r2, #16
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_ADC_Init+0x404>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d002      	beq.n	8001c6e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f001 fa11 	bl	8003090 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10c      	bne.n	8001c90 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f023 010f 	bic.w	r1, r3, #15
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8e:	e007      	b.n	8001ca0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 020f 	bic.w	r2, r2, #15
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60
 8001cb0:	e007      	b.n	8001cc2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	ffffbffc 	.word	0xffffbffc
 8001cd0:	58026000 	.word	0x58026000
 8001cd4:	fc00f81f 	.word	0xfc00f81f
 8001cd8:	fc00f81e 	.word	0xfc00f81e

08001cdc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_ADC_Start+0x180>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_Start+0x1c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5b      	ldr	r2, [pc, #364]	; (8001e60 <HAL_ADC_Start+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_Start+0x20>
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <HAL_ADC_Start+0x188>)
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_Start+0x22>
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_ADC_Start+0x18c>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd18 	bl	8001734 <LL_ADC_GetMultimode>
 8001d04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fdb8 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 809a 	bne.w	8001e4c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Start+0x4a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e095      	b.n	8001e52 <HAL_ADC_Start+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 f924 	bl	8002f7c <ADC_Enable>
 8001d34:	4603      	mov	r3, r0
 8001d36:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8081 	bne.w	8001e42 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_ADC_Start+0x190>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a42      	ldr	r2, [pc, #264]	; (8001e60 <HAL_ADC_Start+0x184>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0x84>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Start+0x86>
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_ADC_Start+0x180>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8e:	f023 0206 	bic.w	r2, r3, #6
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	665a      	str	r2, [r3, #100]	; 0x64
 8001d96:	e002      	b.n	8001d9e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	221c      	movs	r2, #28
 8001da4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <HAL_ADC_Start+0x184>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d002      	beq.n	8001dbe <HAL_ADC_Start+0xe2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_Start+0xe4>
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_ADC_Start+0x180>)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d008      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b09      	cmp	r3, #9
 8001dd8:	d114      	bne.n	8001e04 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fd2b 	bl	8001858 <LL_ADC_REG_StartConversion>
 8001e02:	e025      	b.n	8001e50 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_ADC_Start+0x184>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d002      	beq.n	8001e20 <HAL_ADC_Start+0x144>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Start+0x146>
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_ADC_Start+0x180>)
 8001e22:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
 8001e40:	e006      	b.n	8001e50 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001e4a:	e001      	b.n	8001e50 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022100 	.word	0x40022100
 8001e64:	40022300 	.word	0x40022300
 8001e68:	58026300 	.word	0x58026300
 8001e6c:	fffff0fe 	.word	0xfffff0fe

08001e70 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a72      	ldr	r2, [pc, #456]	; (8002048 <HAL_ADC_PollForConversion+0x1d8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d004      	beq.n	8001e8e <HAL_ADC_PollForConversion+0x1e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_ADC_PollForConversion+0x1dc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_PollForConversion+0x22>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_ADC_PollForConversion+0x1e0>)
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_PollForConversion+0x24>
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_ADC_PollForConversion+0x1e4>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fc4d 	bl	8001734 <LL_ADC_GetMultimode>
 8001e9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d102      	bne.n	8001eaa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e037      	b.n	8001f1a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d002      	beq.n	8001ebc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d111      	bne.n	8001ee0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	f043 0220 	orr.w	r2, r3, #32
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0b1      	b.n	800203e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001eda:	2304      	movs	r3, #4
 8001edc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ede:	e01c      	b.n	8001f1a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_ADC_PollForConversion+0x1d8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_PollForConversion+0x84>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a57      	ldr	r2, [pc, #348]	; (800204c <HAL_ADC_PollForConversion+0x1dc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0x88>
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_ADC_PollForConversion+0x1e0>)
 8001ef6:	e000      	b.n	8001efa <HAL_ADC_PollForConversion+0x8a>
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_ADC_PollForConversion+0x1e4>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fc28 	bl	8001750 <LL_ADC_GetMultiDMATransfer>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e093      	b.n	800203e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f16:	2304      	movs	r3, #4
 8001f18:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f1a:	f7ff fa05 	bl	8001328 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f20:	e021      	b.n	8001f66 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d01d      	beq.n	8001f66 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f2a:	f7ff f9fd 	bl	8001328 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <HAL_ADC_PollForConversion+0xd0>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10b      	bne.n	8001f66 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f043 0204 	orr.w	r2, r3, #4
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e06b      	b.n	800203e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0d6      	beq.n	8001f22 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fb17 	bl	80015b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01c      	beq.n	8001fca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7e5b      	ldrb	r3, [r3, #25]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d118      	bne.n	8001fca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d111      	bne.n	8001fca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	f043 0201 	orr.w	r2, r3, #1
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1f      	ldr	r2, [pc, #124]	; (800204c <HAL_ADC_PollForConversion+0x1dc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d002      	beq.n	8001fda <HAL_ADC_PollForConversion+0x16a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_PollForConversion+0x16c>
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_ADC_PollForConversion+0x1d8>)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d008      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d002      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d104      	bne.n	8002000 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e00c      	b.n	800201a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_ADC_PollForConversion+0x1dc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d002      	beq.n	8002010 <HAL_ADC_PollForConversion+0x1a0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e000      	b.n	8002012 <HAL_ADC_PollForConversion+0x1a2>
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_ADC_PollForConversion+0x1d8>)
 8002012:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d104      	bne.n	800202a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2208      	movs	r2, #8
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e008      	b.n	800203c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	220c      	movs	r2, #12
 800203a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40022100 	.word	0x40022100
 8002050:	40022300 	.word	0x40022300
 8002054:	58026300 	.word	0x58026300

08002058 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a87      	ldr	r2, [pc, #540]	; (80022b4 <HAL_ADC_IRQHandler+0x240>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x30>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a86      	ldr	r2, [pc, #536]	; (80022b8 <HAL_ADC_IRQHandler+0x244>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_IRQHandler+0x34>
 80020a4:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_ADC_IRQHandler+0x248>)
 80020a6:	e000      	b.n	80020aa <HAL_ADC_IRQHandler+0x36>
 80020a8:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_ADC_IRQHandler+0x24c>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fb42 	bl	8001734 <LL_ADC_GetMultimode>
 80020b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <HAL_ADC_IRQHandler+0x78>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f001 f8ea 	bl	80032b8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d004      	beq.n	8002100 <HAL_ADC_IRQHandler+0x8c>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8083 	beq.w	8002212 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d07d      	beq.n	8002212 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fa40 	bl	80015b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d062      	beq.n	8002204 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5d      	ldr	r2, [pc, #372]	; (80022b8 <HAL_ADC_IRQHandler+0x244>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d002      	beq.n	800214e <HAL_ADC_IRQHandler+0xda>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e000      	b.n	8002150 <HAL_ADC_IRQHandler+0xdc>
 800214e:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_ADC_IRQHandler+0x240>)
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4293      	cmp	r3, r2
 8002156:	d008      	beq.n	800216a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d002      	beq.n	800216a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b09      	cmp	r3, #9
 8002168:	d104      	bne.n	8002174 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	e00c      	b.n	800218e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_ADC_IRQHandler+0x244>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d002      	beq.n	8002184 <HAL_ADC_IRQHandler+0x110>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e000      	b.n	8002186 <HAL_ADC_IRQHandler+0x112>
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_ADC_IRQHandler+0x240>)
 8002186:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d135      	bne.n	8002204 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d12e      	bne.n	8002204 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb68 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11a      	bne.n	80021ec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 020c 	bic.w	r2, r2, #12
 80021c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d112      	bne.n	8002204 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	661a      	str	r2, [r3, #96]	; 0x60
 80021ea:	e00b      	b.n	8002204 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	f043 0210 	orr.w	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f96f 	bl	80024e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_ADC_IRQHandler+0x1b2>
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a0 	beq.w	8002372 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 809a 	beq.w	8002372 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f9eb 	bl	8001636 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002260:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f9a6 	bl	80015b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800226c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <HAL_ADC_IRQHandler+0x244>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d002      	beq.n	800227e <HAL_ADC_IRQHandler+0x20a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	e000      	b.n	8002280 <HAL_ADC_IRQHandler+0x20c>
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_ADC_IRQHandler+0x240>)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	4293      	cmp	r3, r2
 8002286:	d008      	beq.n	800229a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d002      	beq.n	800229a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b07      	cmp	r3, #7
 8002298:	d104      	bne.n	80022a4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	623b      	str	r3, [r7, #32]
 80022a2:	e014      	b.n	80022ce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_ADC_IRQHandler+0x244>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00a      	beq.n	80022c4 <HAL_ADC_IRQHandler+0x250>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e008      	b.n	80022c6 <HAL_ADC_IRQHandler+0x252>
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40022100 	.word	0x40022100
 80022bc:	40022300 	.word	0x40022300
 80022c0:	58026300 	.word	0x58026300
 80022c4:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_ADC_IRQHandler+0x464>)
 80022c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d142      	bne.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d03f      	beq.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d13a      	bne.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d133      	bne.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12e      	bne.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff facb 	bl	80018a6 <LL_ADC_INJ_IsConversionOngoing>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11a      	bne.n	800234c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002324:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d112      	bne.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	661a      	str	r2, [r3, #96]	; 0x60
 800234a:	e00b      	b.n	8002364 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 ff7f 	bl	8003268 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2260      	movs	r2, #96	; 0x60
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d011      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x32c>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8b2 	bl	80024fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d012      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x35c>
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 ff65 	bl	8003290 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <HAL_ADC_IRQHandler+0x38c>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 ff57 	bl	80032a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d043      	beq.n	8002492 <HAL_ADC_IRQHandler+0x41e>
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d03e      	beq.n	8002492 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800241c:	2301      	movs	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
 8002420:	e021      	b.n	8002466 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_ADC_IRQHandler+0x464>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_ADC_IRQHandler+0x3c8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a29      	ldr	r2, [pc, #164]	; (80024dc <HAL_ADC_IRQHandler+0x468>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_ADC_IRQHandler+0x3cc>
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <HAL_ADC_IRQHandler+0x46c>)
 800243e:	e000      	b.n	8002442 <HAL_ADC_IRQHandler+0x3ce>
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_ADC_IRQHandler+0x470>)
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f984 	bl	8001750 <LL_ADC_GetMultiDMATransfer>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800244e:	2301      	movs	r3, #1
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	e008      	b.n	8002466 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002462:	2301      	movs	r3, #1
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10e      	bne.n	800248a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002470:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800247c:	f043 0202 	orr.w	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f843 	bl	8002510 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2210      	movs	r2, #16
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_ADC_IRQHandler+0x45a>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d013      	beq.n	80024ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b6:	f043 0208 	orr.w	r2, r3, #8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fed7 	bl	800327c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40022100 	.word	0x40022100
 80024e0:	40022300 	.word	0x40022300
 80024e4:	58026300 	.word	0x58026300

080024e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b0b9      	sub	sp, #228	; 0xe4
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800253e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4ab3      	ldr	r2, [pc, #716]	; (8002814 <HAL_ADC_ConfigChannel+0x2f0>)
 8002546:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x34>
 8002552:	2302      	movs	r3, #2
 8002554:	f000 bcfa 	b.w	8002f4c <HAL_ADC_ConfigChannel+0xa28>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f98b 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 84de 	bne.w	8002f2e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4aa8      	ldr	r2, [pc, #672]	; (8002818 <HAL_ADC_ConfigChannel+0x2f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d033      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <HAL_ADC_ConfigChannel+0x76>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2201      	movs	r2, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	e01d      	b.n	80025d6 <HAL_ADC_ConfigChannel+0xb2>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e004      	b.n	80025cc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80025c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2201      	movs	r2, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	69d1      	ldr	r1, [r2, #28]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	430b      	orrs	r3, r1
 80025e2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f7fe fff4 	bl	80015de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f940 	bl	8001880 <LL_ADC_REG_IsConversionOngoing>
 8002600:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f94c 	bl	80018a6 <LL_ADC_INJ_IsConversionOngoing>
 800260e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8270 	bne.w	8002afc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 826b 	bne.w	8002afc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	461a      	mov	r2, r3
 8002634:	f7ff f812 	bl	800165c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a76      	ldr	r2, [pc, #472]	; (8002818 <HAL_ADC_ConfigChannel+0x2f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800265c:	e032      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800265e:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_ADC_ConfigChannel+0x2f8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800266a:	d10b      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x160>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	e01d      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x19c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10b      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x186>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	e00a      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x19c>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d048      	beq.n	800275e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6919      	ldr	r1, [r3, #16]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026dc:	f7fe fe7a 	bl	80013d4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_ADC_ConfigChannel+0x2f4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d119      	bne.n	800271e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7fe ff12 	bl	8001520 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1f0>
 800270e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002712:	e000      	b.n	8002716 <HAL_ADC_ConfigChannel+0x1f2>
 8002714:	2300      	movs	r3, #0
 8002716:	461a      	mov	r2, r3
 8002718:	f7fe fee0 	bl	80014dc <LL_ADC_SetOffsetSaturation>
 800271c:	e1ee      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x212>
 8002730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002734:	e000      	b.n	8002738 <HAL_ADC_ConfigChannel+0x214>
 8002736:	2300      	movs	r3, #0
 8002738:	461a      	mov	r2, r3
 800273a:	f7fe fead 	bl	8001498 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7e1b      	ldrb	r3, [r3, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x230>
 800274e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002752:	e000      	b.n	8002756 <HAL_ADC_ConfigChannel+0x232>
 8002754:	2300      	movs	r3, #0
 8002756:	461a      	mov	r2, r3
 8002758:	f7fe fe84 	bl	8001464 <LL_ADC_SetDataRightShift>
 800275c:	e1ce      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <HAL_ADC_ConfigChannel+0x2f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	f040 8181 	bne.w	8002a6c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fe61 	bl	8001438 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x272>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fe56 	bl	8001438 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	e01e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x2b0>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fe4b 	bl	8001438 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80027b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80027bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e004      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80027c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x2c8>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	e01e      	b.n	800282a <HAL_ADC_ConfigChannel+0x306>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027f8:	fa93 f3a3 	rbit	r3, r3
 80027fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	e00a      	b.n	800282a <HAL_ADC_ConfigChannel+0x306>
 8002814:	47ff0000 	.word	0x47ff0000
 8002818:	58026000 	.word	0x58026000
 800281c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	429a      	cmp	r2, r3
 800282c:	d106      	bne.n	800283c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fe94 	bl	8001564 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fdf8 	bl	8001438 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x344>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fded 	bl	8001438 <LL_ADC_GetOffsetChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	e01e      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x382>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fde2 	bl	8001438 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800288e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002896:	2320      	movs	r3, #32
 8002898:	e004      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800289a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_ADC_ConfigChannel+0x39a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0e9b      	lsrs	r3, r3, #26
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	e018      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x3cc>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80028e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fe31 	bl	8001564 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fd95 	bl	8001438 <LL_ADC_GetOffsetChannel>
 800290e:	4603      	mov	r3, r0
 8002910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_ADC_ConfigChannel+0x40a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fd8a 	bl	8001438 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	e01e      	b.n	800296c <HAL_ADC_ConfigChannel+0x448>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fd7f 	bl	8001438 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800294c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800295c:	2320      	movs	r3, #32
 800295e:	e004      	b.n	800296a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x460>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	e014      	b.n	80029ae <HAL_ADC_ConfigChannel+0x48a>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80029a0:	2320      	movs	r3, #32
 80029a2:	e004      	b.n	80029ae <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fdd2 	bl	8001564 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2103      	movs	r1, #3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fd36 	bl	8001438 <LL_ADC_GetOffsetChannel>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x4c8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2103      	movs	r1, #3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fd2b 	bl	8001438 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	f003 021f 	and.w	r2, r3, #31
 80029ea:	e017      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4f8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2103      	movs	r1, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fd20 	bl	8001438 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e003      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x510>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	e011      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x534>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a44:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d14f      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2103      	movs	r1, #3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fd7d 	bl	8001564 <LL_ADC_SetOffsetState>
 8002a6a:	e047      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a8e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ab2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002afa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe fe95 	bl	8001830 <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 8219 	bne.w	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7fe fdca 	bl	80016b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4aa1      	ldr	r2, [pc, #644]	; (8002dac <HAL_ADC_ConfigChannel+0x888>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	f040 812e 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x630>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	2b09      	cmp	r3, #9
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e019      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x664>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	bf94      	ite	ls
 8002b82:	2301      	movls	r3, #1
 8002b84:	2300      	movhi	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d079      	beq.n	8002c80 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x684>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	069b      	lsls	r3, r3, #26
 8002ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ba6:	e015      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x6b0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	069b      	lsls	r3, r3, #26
 8002bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x6d0>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	e017      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x700>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e003      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	ea42 0103 	orr.w	r1, r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x726>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	051b      	lsls	r3, r3, #20
 8002c48:	e018      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x758>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002c62:	2320      	movs	r3, #32
 8002c64:	e003      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	3301      	adds	r3, #1
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	e07e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x778>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0e9b      	lsrs	r3, r3, #26
 8002c92:	3301      	adds	r3, #1
 8002c94:	069b      	lsls	r3, r3, #26
 8002c96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c9a:	e015      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x7a4>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	e003      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x7c4>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	e017      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x7f4>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002d00:	2320      	movs	r3, #32
 8002d02:	e003      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	ea42 0103 	orr.w	r1, r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x820>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b1e      	subs	r3, #30
 8002d3c:	051b      	lsls	r3, r3, #20
 8002d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d42:	e01b      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x858>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	60fb      	str	r3, [r7, #12]
  return result;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e003      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f003 021f 	and.w	r2, r3, #31
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	051b      	lsls	r3, r3, #20
 8002d78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	6892      	ldr	r2, [r2, #8]
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fe fc6a 	bl	800165c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f280 80d7 	bge.w	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <HAL_ADC_ConfigChannel+0x88c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x882>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_ADC_ConfigChannel+0x890>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10a      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x898>
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_ADC_ConfigChannel+0x894>)
 8002da8:	e009      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x89a>
 8002daa:	bf00      	nop
 8002dac:	47ff0000 	.word	0x47ff0000
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40022100 	.word	0x40022100
 8002db8:	40022300 	.word	0x40022300
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <HAL_ADC_ConfigChannel+0xa30>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fafa 	bl	80013b8 <LL_ADC_GetCommonPathInternalCh>
 8002dc4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a62      	ldr	r2, [pc, #392]	; (8002f58 <HAL_ADC_ConfigChannel+0xa34>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x8b8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <HAL_ADC_ConfigChannel+0xa38>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10e      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x8d6>
 8002ddc:	485e      	ldr	r0, [pc, #376]	; (8002f58 <HAL_ADC_ConfigChannel+0xa34>)
 8002dde:	f7fe fd27 	bl	8001830 <LL_ADC_IsEnabled>
 8002de2:	4604      	mov	r4, r0
 8002de4:	485d      	ldr	r0, [pc, #372]	; (8002f5c <HAL_ADC_ConfigChannel+0xa38>)
 8002de6:	f7fe fd23 	bl	8001830 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4323      	orrs	r3, r4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e008      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x8e8>
 8002dfa:	4859      	ldr	r0, [pc, #356]	; (8002f60 <HAL_ADC_ConfigChannel+0xa3c>)
 8002dfc:	f7fe fd18 	bl	8001830 <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8084 	beq.w	8002f1a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a53      	ldr	r2, [pc, #332]	; (8002f64 <HAL_ADC_ConfigChannel+0xa40>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d132      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x95e>
 8002e1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12c      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 8086 	bne.w	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_ADC_ConfigChannel+0xa34>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_ConfigChannel+0x924>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a46      	ldr	r2, [pc, #280]	; (8002f5c <HAL_ADC_ConfigChannel+0xa38>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x928>
 8002e48:	4a47      	ldr	r2, [pc, #284]	; (8002f68 <HAL_ADC_ConfigChannel+0xa44>)
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x92a>
 8002e4c:	4a41      	ldr	r2, [pc, #260]	; (8002f54 <HAL_ADC_ConfigChannel+0xa30>)
 8002e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fe fa9a 	bl	8001392 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e5e:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <HAL_ADC_ConfigChannel+0xa48>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	4a42      	ldr	r2, [pc, #264]	; (8002f70 <HAL_ADC_ConfigChannel+0xa4c>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e80:	e05e      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_ADC_ConfigChannel+0xa50>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d120      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x9aa>
 8002e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d14e      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_ADC_ConfigChannel+0xa34>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x992>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_ADC_ConfigChannel+0xa38>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x996>
 8002eb6:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <HAL_ADC_ConfigChannel+0xa44>)
 8002eb8:	e000      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x998>
 8002eba:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <HAL_ADC_ConfigChannel+0xa30>)
 8002ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f7fe fa63 	bl	8001392 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ecc:	e038      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <HAL_ADC_ConfigChannel+0xa54>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d133      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
 8002ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d12d      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_ADC_ConfigChannel+0xa3c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d128      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_ADC_ConfigChannel+0xa34>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_ADC_ConfigChannel+0x9de>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_ADC_ConfigChannel+0xa38>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x9e2>
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_ADC_ConfigChannel+0xa44>)
 8002f04:	e000      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x9e4>
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_ADC_ConfigChannel+0xa30>)
 8002f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f7fe fa3d 	bl	8001392 <LL_ADC_SetCommonPathInternalCh>
 8002f18:	e012      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002f2c:	e008      	b.n	8002f40 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	37e4      	adds	r7, #228	; 0xe4
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}
 8002f54:	58026300 	.word	0x58026300
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40022100 	.word	0x40022100
 8002f60:	58026000 	.word	0x58026000
 8002f64:	c7520000 	.word	0xc7520000
 8002f68:	40022300 	.word	0x40022300
 8002f6c:	24000000 	.word	0x24000000
 8002f70:	053e2d63 	.word	0x053e2d63
 8002f74:	c3210000 	.word	0xc3210000
 8002f78:	cb840000 	.word	0xcb840000

08002f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fc51 	bl	8001830 <LL_ADC_IsEnabled>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d16e      	bne.n	8003072 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <ADC_Enable+0x100>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	f043 0210 	orr.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e05a      	b.n	8003074 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fc20 	bl	8001808 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fc8:	f7fe f9ae 	bl	8001328 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <ADC_Enable+0x104>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <ADC_Enable+0x66>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <ADC_Enable+0x108>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <ADC_Enable+0x6a>
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <ADC_Enable+0x10c>)
 8002fe4:	e000      	b.n	8002fe8 <ADC_Enable+0x6c>
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <ADC_Enable+0x110>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fba3 	bl	8001734 <LL_ADC_GetMultimode>
 8002fee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <ADC_Enable+0x108>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d002      	beq.n	8003000 <ADC_Enable+0x84>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e000      	b.n	8003002 <ADC_Enable+0x86>
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <ADC_Enable+0x104>)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6812      	ldr	r2, [r2, #0]
 8003006:	4293      	cmp	r3, r2
 8003008:	d02c      	beq.n	8003064 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d130      	bne.n	8003072 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003010:	e028      	b.n	8003064 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fc0a 	bl	8001830 <LL_ADC_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fbee 	bl	8001808 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800302c:	f7fe f97c 	bl	8001328 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d914      	bls.n	8003064 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d00d      	beq.n	8003064 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d1cf      	bne.n	8003012 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	8000003f 	.word	0x8000003f
 8003080:	40022000 	.word	0x40022000
 8003084:	40022100 	.word	0x40022100
 8003088:	40022300 	.word	0x40022300
 800308c:	58026300 	.word	0x58026300

08003090 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	; (800324c <ADC_ConfigureBoostMode+0x1bc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <ADC_ConfigureBoostMode+0x1c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <ADC_ConfigureBoostMode+0x1c0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d109      	bne.n	80030c0 <ADC_ConfigureBoostMode+0x30>
 80030ac:	4b69      	ldr	r3, [pc, #420]	; (8003254 <ADC_ConfigureBoostMode+0x1c4>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e008      	b.n	80030d2 <ADC_ConfigureBoostMode+0x42>
 80030c0:	4b65      	ldr	r3, [pc, #404]	; (8003258 <ADC_ConfigureBoostMode+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01c      	beq.n	8003110 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030d6:	f002 ff83 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 80030da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e4:	d010      	beq.n	8003108 <ADC_ConfigureBoostMode+0x78>
 80030e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ea:	d871      	bhi.n	80031d0 <ADC_ConfigureBoostMode+0x140>
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d002      	beq.n	80030f8 <ADC_ConfigureBoostMode+0x68>
 80030f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f6:	d16b      	bne.n	80031d0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	60fb      	str	r3, [r7, #12]
        break;
 8003106:	e066      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	60fb      	str	r3, [r7, #12]
        break;
 800310e:	e062      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003110:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003114:	f003 feba 	bl	8006e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003118:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003122:	d051      	beq.n	80031c8 <ADC_ConfigureBoostMode+0x138>
 8003124:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003128:	d854      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 800312a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800312e:	d047      	beq.n	80031c0 <ADC_ConfigureBoostMode+0x130>
 8003130:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003134:	d84e      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 8003136:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800313a:	d03d      	beq.n	80031b8 <ADC_ConfigureBoostMode+0x128>
 800313c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003140:	d848      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 8003142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003146:	d033      	beq.n	80031b0 <ADC_ConfigureBoostMode+0x120>
 8003148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800314c:	d842      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 800314e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003152:	d029      	beq.n	80031a8 <ADC_ConfigureBoostMode+0x118>
 8003154:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003158:	d83c      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 800315a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800315e:	d01a      	beq.n	8003196 <ADC_ConfigureBoostMode+0x106>
 8003160:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003164:	d836      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 8003166:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800316a:	d014      	beq.n	8003196 <ADC_ConfigureBoostMode+0x106>
 800316c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003170:	d830      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 8003172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003176:	d00e      	beq.n	8003196 <ADC_ConfigureBoostMode+0x106>
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d82a      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 800317e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003182:	d008      	beq.n	8003196 <ADC_ConfigureBoostMode+0x106>
 8003184:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003188:	d824      	bhi.n	80031d4 <ADC_ConfigureBoostMode+0x144>
 800318a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318e:	d002      	beq.n	8003196 <ADC_ConfigureBoostMode+0x106>
 8003190:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003194:	d11e      	bne.n	80031d4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0c9b      	lsrs	r3, r3, #18
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	60fb      	str	r3, [r7, #12]
        break;
 80031a6:	e016      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
        break;
 80031ae:	e012      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	60fb      	str	r3, [r7, #12]
        break;
 80031b6:	e00e      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	099b      	lsrs	r3, r3, #6
 80031bc:	60fb      	str	r3, [r7, #12]
        break;
 80031be:	e00a      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	09db      	lsrs	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
        break;
 80031c6:	e006      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	60fb      	str	r3, [r7, #12]
        break;
 80031ce:	e002      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
        break;
 80031d0:	bf00      	nop
 80031d2:	e000      	b.n	80031d6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80031d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <ADC_ConfigureBoostMode+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d808      	bhi.n	80031f6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031f4:	e025      	b.n	8003242 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <ADC_ConfigureBoostMode+0x1d0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d80a      	bhi.n	8003214 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	e016      	b.n	8003242 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <ADC_ConfigureBoostMode+0x1d4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d80a      	bhi.n	8003232 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	e007      	b.n	8003242 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40022100 	.word	0x40022100
 8003254:	40022300 	.word	0x40022300
 8003258:	58026300 	.word	0x58026300
 800325c:	005f5e10 	.word	0x005f5e10
 8003260:	00bebc20 	.word	0x00bebc20
 8003264:	017d7840 	.word	0x017d7840

08003268 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <__NVIC_SetPriorityGrouping>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <__NVIC_SetPriorityGrouping+0x40>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x40>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00
 8003310:	05fa0000 	.word	0x05fa0000

08003314 <__NVIC_GetPriorityGrouping>:
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	; (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003438:	d301      	bcc.n	800343e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343a:	2301      	movs	r3, #1
 800343c:	e00f      	b.n	800345e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <SysTick_Config+0x40>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003446:	210f      	movs	r1, #15
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	f7ff ff8e 	bl	800336c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SysTick_Config+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <SysTick_Config+0x40>)
 8003458:	2207      	movs	r2, #7
 800345a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000e010 	.word	0xe000e010

0800346c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff29 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003490:	f7ff ff40 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff90 	bl	80033c0 <NVIC_EncodePriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff5f 	bl	800336c <__NVIC_SetPriority>
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff33 	bl	8003330 <__NVIC_EnableIRQ>
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffa4 	bl	8003428 <SysTick_Config>
 80034e0:	4603      	mov	r3, r0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7fd ff18 	bl	8001328 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e314      	b.n	8003b2e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a66      	ldr	r2, [pc, #408]	; (80036a4 <HAL_DMA_Init+0x1b8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_DMA_Init+0x1bc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d045      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a63      	ldr	r2, [pc, #396]	; (80036ac <HAL_DMA_Init+0x1c0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d040      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a62      	ldr	r2, [pc, #392]	; (80036b0 <HAL_DMA_Init+0x1c4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d03b      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a60      	ldr	r2, [pc, #384]	; (80036b4 <HAL_DMA_Init+0x1c8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d036      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5f      	ldr	r2, [pc, #380]	; (80036b8 <HAL_DMA_Init+0x1cc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d031      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_DMA_Init+0x1d0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02c      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5c      	ldr	r2, [pc, #368]	; (80036c0 <HAL_DMA_Init+0x1d4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d027      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a5a      	ldr	r2, [pc, #360]	; (80036c4 <HAL_DMA_Init+0x1d8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a59      	ldr	r2, [pc, #356]	; (80036c8 <HAL_DMA_Init+0x1dc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d01d      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_DMA_Init+0x1e0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_DMA_Init+0x1e4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a54      	ldr	r2, [pc, #336]	; (80036d4 <HAL_DMA_Init+0x1e8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a53      	ldr	r2, [pc, #332]	; (80036d8 <HAL_DMA_Init+0x1ec>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a51      	ldr	r2, [pc, #324]	; (80036dc <HAL_DMA_Init+0x1f0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_DMA_Init+0xb8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a50      	ldr	r2, [pc, #320]	; (80036e0 <HAL_DMA_Init+0x1f4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_DMA_Init+0xbc>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_DMA_Init+0xbe>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 813c 	beq.w	8003828 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a37      	ldr	r2, [pc, #220]	; (80036a4 <HAL_DMA_Init+0x1b8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d04a      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <HAL_DMA_Init+0x1bc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d045      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_DMA_Init+0x1c0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d040      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a33      	ldr	r2, [pc, #204]	; (80036b0 <HAL_DMA_Init+0x1c4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d03b      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <HAL_DMA_Init+0x1c8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d036      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <HAL_DMA_Init+0x1cc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d031      	beq.n	8003660 <HAL_DMA_Init+0x174>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2e      	ldr	r2, [pc, #184]	; (80036bc <HAL_DMA_Init+0x1d0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02c      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_DMA_Init+0x1d4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d027      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <HAL_DMA_Init+0x1d8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_DMA_Init+0x174>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_DMA_Init+0x1dc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01d      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_DMA_Init+0x1e0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_DMA_Init+0x174>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_DMA_Init+0x1e4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <HAL_DMA_Init+0x1e8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <HAL_DMA_Init+0x1ec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_DMA_Init+0x174>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <HAL_DMA_Init+0x1f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_DMA_Init+0x174>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_DMA_Init+0x1f4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <HAL_DMA_Init+0x186>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e007      	b.n	8003682 <HAL_DMA_Init+0x196>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003682:	e02f      	b.n	80036e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003684:	f7fd fe50 	bl	8001328 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b05      	cmp	r3, #5
 8003690:	d928      	bls.n	80036e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2203      	movs	r2, #3
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e244      	b.n	8003b2e <HAL_DMA_Init+0x642>
 80036a4:	40020010 	.word	0x40020010
 80036a8:	40020028 	.word	0x40020028
 80036ac:	40020040 	.word	0x40020040
 80036b0:	40020058 	.word	0x40020058
 80036b4:	40020070 	.word	0x40020070
 80036b8:	40020088 	.word	0x40020088
 80036bc:	400200a0 	.word	0x400200a0
 80036c0:	400200b8 	.word	0x400200b8
 80036c4:	40020410 	.word	0x40020410
 80036c8:	40020428 	.word	0x40020428
 80036cc:	40020440 	.word	0x40020440
 80036d0:	40020458 	.word	0x40020458
 80036d4:	40020470 	.word	0x40020470
 80036d8:	40020488 	.word	0x40020488
 80036dc:	400204a0 	.word	0x400204a0
 80036e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1c8      	bne.n	8003684 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_DMA_Init+0x424>)
 80036fe:	4013      	ands	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800370a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b04      	cmp	r3, #4
 8003736:	d107      	bne.n	8003748 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	4313      	orrs	r3, r2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b28      	cmp	r3, #40	; 0x28
 800374e:	d903      	bls.n	8003758 <HAL_DMA_Init+0x26c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b2e      	cmp	r3, #46	; 0x2e
 8003756:	d91f      	bls.n	8003798 <HAL_DMA_Init+0x2ac>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b3e      	cmp	r3, #62	; 0x3e
 800375e:	d903      	bls.n	8003768 <HAL_DMA_Init+0x27c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b42      	cmp	r3, #66	; 0x42
 8003766:	d917      	bls.n	8003798 <HAL_DMA_Init+0x2ac>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b46      	cmp	r3, #70	; 0x46
 800376e:	d903      	bls.n	8003778 <HAL_DMA_Init+0x28c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b48      	cmp	r3, #72	; 0x48
 8003776:	d90f      	bls.n	8003798 <HAL_DMA_Init+0x2ac>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b4e      	cmp	r3, #78	; 0x4e
 800377e:	d903      	bls.n	8003788 <HAL_DMA_Init+0x29c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b52      	cmp	r3, #82	; 0x52
 8003786:	d907      	bls.n	8003798 <HAL_DMA_Init+0x2ac>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b73      	cmp	r3, #115	; 0x73
 800378e:	d905      	bls.n	800379c <HAL_DMA_Init+0x2b0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b77      	cmp	r3, #119	; 0x77
 8003796:	d801      	bhi.n	800379c <HAL_DMA_Init+0x2b0>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_DMA_Init+0x2b2>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0307 	bic.w	r3, r3, #7
 80037c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d117      	bne.n	8003804 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f001 f9b6 	bl	8004b58 <DMA_CheckFifoParam>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2240      	movs	r2, #64	; 0x40
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e194      	b.n	8003b2e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f001 f8f1 	bl	80049f4 <DMA_CalcBaseAndBitshift>
 8003812:	4603      	mov	r3, r0
 8003814:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	223f      	movs	r2, #63	; 0x3f
 8003820:	409a      	lsls	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	e0ca      	b.n	80039be <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a39      	ldr	r2, [pc, #228]	; (8003914 <HAL_DMA_Init+0x428>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_DMA_Init+0x42c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d01d      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a36      	ldr	r2, [pc, #216]	; (800391c <HAL_DMA_Init+0x430>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d018      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <HAL_DMA_Init+0x434>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	; (8003924 <HAL_DMA_Init+0x438>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00e      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_DMA_Init+0x43c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a30      	ldr	r2, [pc, #192]	; (800392c <HAL_DMA_Init+0x440>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_DMA_Init+0x38c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <HAL_DMA_Init+0x444>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_DMA_Init+0x390>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <HAL_DMA_Init+0x392>
 800387c:	2300      	movs	r3, #0
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8094 	beq.w	80039ac <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_DMA_Init+0x428>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d021      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_DMA_Init+0x42c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d01c      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_DMA_Init+0x430>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d017      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_DMA_Init+0x434>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d012      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <HAL_DMA_Init+0x438>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00d      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_DMA_Init+0x43c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_DMA_Init+0x440>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <HAL_DMA_Init+0x3e6>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_DMA_Init+0x444>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_DMA_Init+0x448>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d01d      	beq.n	8003938 <HAL_DMA_Init+0x44c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d102      	bne.n	800390a <HAL_DMA_Init+0x41e>
 8003904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003908:	e017      	b.n	800393a <HAL_DMA_Init+0x44e>
 800390a:	2300      	movs	r3, #0
 800390c:	e015      	b.n	800393a <HAL_DMA_Init+0x44e>
 800390e:	bf00      	nop
 8003910:	fe10803f 	.word	0xfe10803f
 8003914:	58025408 	.word	0x58025408
 8003918:	5802541c 	.word	0x5802541c
 800391c:	58025430 	.word	0x58025430
 8003920:	58025444 	.word	0x58025444
 8003924:	58025458 	.word	0x58025458
 8003928:	5802546c 	.word	0x5802546c
 800392c:	58025480 	.word	0x58025480
 8003930:	58025494 	.word	0x58025494
 8003934:	fffe000f 	.word	0xfffe000f
 8003938:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003968:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	4b6e      	ldr	r3, [pc, #440]	; (8003b38 <HAL_DMA_Init+0x64c>)
 8003980:	4413      	add	r3, r2
 8003982:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_DMA_Init+0x650>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	009a      	lsls	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f001 f82f 	bl	80049f4 <DMA_CalcBaseAndBitshift>
 8003996:	4603      	mov	r3, r0
 8003998:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e008      	b.n	80039be <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2203      	movs	r2, #3
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e0b7      	b.n	8003b2e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <HAL_DMA_Init+0x654>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d072      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a5d      	ldr	r2, [pc, #372]	; (8003b44 <HAL_DMA_Init+0x658>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d06d      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <HAL_DMA_Init+0x65c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d068      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5a      	ldr	r2, [pc, #360]	; (8003b4c <HAL_DMA_Init+0x660>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d063      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a59      	ldr	r2, [pc, #356]	; (8003b50 <HAL_DMA_Init+0x664>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d05e      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_DMA_Init+0x668>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d059      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_DMA_Init+0x66c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d054      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a54      	ldr	r2, [pc, #336]	; (8003b5c <HAL_DMA_Init+0x670>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d04f      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a53      	ldr	r2, [pc, #332]	; (8003b60 <HAL_DMA_Init+0x674>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d04a      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_DMA_Init+0x678>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d045      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_DMA_Init+0x67c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d040      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <HAL_DMA_Init+0x680>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d03b      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4d      	ldr	r2, [pc, #308]	; (8003b70 <HAL_DMA_Init+0x684>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d036      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	; (8003b74 <HAL_DMA_Init+0x688>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_DMA_Init+0x68c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d02c      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a48      	ldr	r2, [pc, #288]	; (8003b7c <HAL_DMA_Init+0x690>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d027      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a47      	ldr	r2, [pc, #284]	; (8003b80 <HAL_DMA_Init+0x694>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a45      	ldr	r2, [pc, #276]	; (8003b84 <HAL_DMA_Init+0x698>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a44      	ldr	r2, [pc, #272]	; (8003b88 <HAL_DMA_Init+0x69c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_DMA_Init+0x6a0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <HAL_DMA_Init+0x6a4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a3f      	ldr	r2, [pc, #252]	; (8003b94 <HAL_DMA_Init+0x6a8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a3e      	ldr	r2, [pc, #248]	; (8003b98 <HAL_DMA_Init+0x6ac>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_Init+0x5c2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_DMA_Init+0x6b0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_DMA_Init+0x5c6>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_DMA_Init+0x5c8>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d032      	beq.n	8003b1e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f001 f8c9 	bl	8004c50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d102      	bne.n	8003acc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ae0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d010      	beq.n	8003b0c <HAL_DMA_Init+0x620>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d80c      	bhi.n	8003b0c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f001 f946 	bl	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e008      	b.n	8003b1e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	a7fdabf8 	.word	0xa7fdabf8
 8003b3c:	cccccccd 	.word	0xcccccccd
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	58025408 	.word	0x58025408
 8003b84:	5802541c 	.word	0x5802541c
 8003b88:	58025430 	.word	0x58025430
 8003b8c:	58025444 	.word	0x58025444
 8003b90:	58025458 	.word	0x58025458
 8003b94:	5802546c 	.word	0x5802546c
 8003b98:	58025480 	.word	0x58025480
 8003b9c:	58025494 	.word	0x58025494

08003ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bac:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_DMA_IRQHandler+0x1ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a67      	ldr	r2, [pc, #412]	; (8003d50 <HAL_DMA_IRQHandler+0x1b0>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	0a9b      	lsrs	r3, r3, #10
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <HAL_DMA_IRQHandler+0x1b4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d04a      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_DMA_IRQHandler+0x1b8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d045      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a5c      	ldr	r2, [pc, #368]	; (8003d5c <HAL_DMA_IRQHandler+0x1bc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d040      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a5a      	ldr	r2, [pc, #360]	; (8003d60 <HAL_DMA_IRQHandler+0x1c0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d03b      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a59      	ldr	r2, [pc, #356]	; (8003d64 <HAL_DMA_IRQHandler+0x1c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d036      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_DMA_IRQHandler+0x1c8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d031      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a56      	ldr	r2, [pc, #344]	; (8003d6c <HAL_DMA_IRQHandler+0x1cc>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d02c      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a54      	ldr	r2, [pc, #336]	; (8003d70 <HAL_DMA_IRQHandler+0x1d0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d027      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a53      	ldr	r2, [pc, #332]	; (8003d74 <HAL_DMA_IRQHandler+0x1d4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d022      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_DMA_IRQHandler+0x1d8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01d      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a50      	ldr	r2, [pc, #320]	; (8003d7c <HAL_DMA_IRQHandler+0x1dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <HAL_DMA_IRQHandler+0x1e0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a4d      	ldr	r2, [pc, #308]	; (8003d84 <HAL_DMA_IRQHandler+0x1e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00e      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a4b      	ldr	r2, [pc, #300]	; (8003d88 <HAL_DMA_IRQHandler+0x1e8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_DMA_IRQHandler+0x1ec>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_IRQHandler+0xd2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a48      	ldr	r2, [pc, #288]	; (8003d90 <HAL_DMA_IRQHandler+0x1f0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_DMA_IRQHandler+0xd6>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_DMA_IRQHandler+0xd8>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 842b 	beq.w	80044d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2208      	movs	r2, #8
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a2 	beq.w	8003dd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2e      	ldr	r2, [pc, #184]	; (8003d54 <HAL_DMA_IRQHandler+0x1b4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_DMA_IRQHandler+0x1b8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2b      	ldr	r2, [pc, #172]	; (8003d5c <HAL_DMA_IRQHandler+0x1bc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <HAL_DMA_IRQHandler+0x1c0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <HAL_DMA_IRQHandler+0x1c8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <HAL_DMA_IRQHandler+0x1cc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <HAL_DMA_IRQHandler+0x1d0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_DMA_IRQHandler+0x1d4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_DMA_IRQHandler+0x1d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <HAL_DMA_IRQHandler+0x1dc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_DMA_IRQHandler+0x1e0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <HAL_DMA_IRQHandler+0x1e4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_DMA_IRQHandler+0x1e8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a19      	ldr	r2, [pc, #100]	; (8003d8c <HAL_DMA_IRQHandler+0x1ec>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x194>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_DMA_IRQHandler+0x1f0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d12f      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x1f4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf14      	ite	ne
 8003d42:	2301      	movne	r3, #1
 8003d44:	2300      	moveq	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	e02e      	b.n	8003da8 <HAL_DMA_IRQHandler+0x208>
 8003d4a:	bf00      	nop
 8003d4c:	24000000 	.word	0x24000000
 8003d50:	1b4e81b5 	.word	0x1b4e81b5
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bf14      	ite	ne
 8003da2:	2301      	movne	r3, #1
 8003da4:	2300      	moveq	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0201 	orr.w	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06e      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <HAL_DMA_IRQHandler+0x3f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04a      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <HAL_DMA_IRQHandler+0x3fc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a66      	ldr	r2, [pc, #408]	; (8003fa0 <HAL_DMA_IRQHandler+0x400>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d040      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a64      	ldr	r2, [pc, #400]	; (8003fa4 <HAL_DMA_IRQHandler+0x404>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <HAL_DMA_IRQHandler+0x408>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d036      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a61      	ldr	r2, [pc, #388]	; (8003fac <HAL_DMA_IRQHandler+0x40c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a60      	ldr	r2, [pc, #384]	; (8003fb0 <HAL_DMA_IRQHandler+0x410>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d02c      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5e      	ldr	r2, [pc, #376]	; (8003fb4 <HAL_DMA_IRQHandler+0x414>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <HAL_DMA_IRQHandler+0x418>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5b      	ldr	r2, [pc, #364]	; (8003fbc <HAL_DMA_IRQHandler+0x41c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_DMA_IRQHandler+0x420>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a58      	ldr	r2, [pc, #352]	; (8003fc4 <HAL_DMA_IRQHandler+0x424>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_DMA_IRQHandler+0x428>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_DMA_IRQHandler+0x42c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_DMA_IRQHandler+0x430>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2ee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <HAL_DMA_IRQHandler+0x434>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x304>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e003      	b.n	8003eac <HAL_DMA_IRQHandler+0x30c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 808f 	beq.w	8004000 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_DMA_IRQHandler+0x3f8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d04a      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <HAL_DMA_IRQHandler+0x3fc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d045      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_DMA_IRQHandler+0x400>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d040      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <HAL_DMA_IRQHandler+0x404>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d03b      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <HAL_DMA_IRQHandler+0x408>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d036      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a24      	ldr	r2, [pc, #144]	; (8003fac <HAL_DMA_IRQHandler+0x40c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d031      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_DMA_IRQHandler+0x410>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d02c      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <HAL_DMA_IRQHandler+0x414>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d027      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_DMA_IRQHandler+0x418>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_DMA_IRQHandler+0x41c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01d      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_DMA_IRQHandler+0x420>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <HAL_DMA_IRQHandler+0x424>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_DMA_IRQHandler+0x428>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_DMA_IRQHandler+0x42c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_DMA_IRQHandler+0x430>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x3e2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_DMA_IRQHandler+0x434>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d12a      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x438>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e023      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x440>
 8003f98:	40020010 	.word	0x40020010
 8003f9c:	40020028 	.word	0x40020028
 8003fa0:	40020040 	.word	0x40020040
 8003fa4:	40020058 	.word	0x40020058
 8003fa8:	40020070 	.word	0x40020070
 8003fac:	40020088 	.word	0x40020088
 8003fb0:	400200a0 	.word	0x400200a0
 8003fb4:	400200b8 	.word	0x400200b8
 8003fb8:	40020410 	.word	0x40020410
 8003fbc:	40020428 	.word	0x40020428
 8003fc0:	40020440 	.word	0x40020440
 8003fc4:	40020458 	.word	0x40020458
 8003fc8:	40020470 	.word	0x40020470
 8003fcc:	40020488 	.word	0x40020488
 8003fd0:	400204a0 	.word	0x400204a0
 8003fd4:	400204b8 	.word	0x400204b8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2204      	movs	r2, #4
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2210      	movs	r2, #16
 800400a:	409a      	lsls	r2, r3
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a6 	beq.w	8004162 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a85      	ldr	r2, [pc, #532]	; (8004230 <HAL_DMA_IRQHandler+0x690>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04a      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a83      	ldr	r2, [pc, #524]	; (8004234 <HAL_DMA_IRQHandler+0x694>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d045      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a82      	ldr	r2, [pc, #520]	; (8004238 <HAL_DMA_IRQHandler+0x698>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a80      	ldr	r2, [pc, #512]	; (800423c <HAL_DMA_IRQHandler+0x69c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d03b      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7f      	ldr	r2, [pc, #508]	; (8004240 <HAL_DMA_IRQHandler+0x6a0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d036      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7d      	ldr	r2, [pc, #500]	; (8004244 <HAL_DMA_IRQHandler+0x6a4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7c      	ldr	r2, [pc, #496]	; (8004248 <HAL_DMA_IRQHandler+0x6a8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d02c      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a7a      	ldr	r2, [pc, #488]	; (800424c <HAL_DMA_IRQHandler+0x6ac>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a79      	ldr	r2, [pc, #484]	; (8004250 <HAL_DMA_IRQHandler+0x6b0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a77      	ldr	r2, [pc, #476]	; (8004254 <HAL_DMA_IRQHandler+0x6b4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a76      	ldr	r2, [pc, #472]	; (8004258 <HAL_DMA_IRQHandler+0x6b8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a74      	ldr	r2, [pc, #464]	; (800425c <HAL_DMA_IRQHandler+0x6bc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a73      	ldr	r2, [pc, #460]	; (8004260 <HAL_DMA_IRQHandler+0x6c0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a71      	ldr	r2, [pc, #452]	; (8004264 <HAL_DMA_IRQHandler+0x6c4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a70      	ldr	r2, [pc, #448]	; (8004268 <HAL_DMA_IRQHandler+0x6c8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_IRQHandler+0x516>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6e      	ldr	r2, [pc, #440]	; (800426c <HAL_DMA_IRQHandler+0x6cc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10a      	bne.n	80040cc <HAL_DMA_IRQHandler+0x52c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e009      	b.n	80040e0 <HAL_DMA_IRQHandler+0x540>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03e      	beq.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2210      	movs	r2, #16
 80040ee:	409a      	lsls	r2, r3
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d018      	beq.n	8004134 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d108      	bne.n	8004122 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d024      	beq.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	e01f      	b.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01b      	beq.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
 8004132:	e016      	b.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0208 	bic.w	r2, r2, #8
 8004150:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2220      	movs	r2, #32
 800416c:	409a      	lsls	r2, r3
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8110 	beq.w	8004398 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <HAL_DMA_IRQHandler+0x690>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2b      	ldr	r2, [pc, #172]	; (8004234 <HAL_DMA_IRQHandler+0x694>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a29      	ldr	r2, [pc, #164]	; (8004238 <HAL_DMA_IRQHandler+0x698>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a28      	ldr	r2, [pc, #160]	; (800423c <HAL_DMA_IRQHandler+0x69c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_DMA_IRQHandler+0x6a0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <HAL_DMA_IRQHandler+0x6a4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a23      	ldr	r2, [pc, #140]	; (8004248 <HAL_DMA_IRQHandler+0x6a8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a22      	ldr	r2, [pc, #136]	; (800424c <HAL_DMA_IRQHandler+0x6ac>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_DMA_IRQHandler+0x6b0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_DMA_IRQHandler+0x6b4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_DMA_IRQHandler+0x6b8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_DMA_IRQHandler+0x6bc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <HAL_DMA_IRQHandler+0x6c0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_DMA_IRQHandler+0x6c4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a17      	ldr	r2, [pc, #92]	; (8004268 <HAL_DMA_IRQHandler+0x6c8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_DMA_IRQHandler+0x678>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <HAL_DMA_IRQHandler+0x6cc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d12b      	bne.n	8004270 <HAL_DMA_IRQHandler+0x6d0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e02a      	b.n	8004284 <HAL_DMA_IRQHandler+0x6e4>
 800422e:	bf00      	nop
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8087 	beq.w	8004398 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2220      	movs	r2, #32
 8004294:	409a      	lsls	r2, r3
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d139      	bne.n	800431a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0216 	bic.w	r2, r2, #22
 80042b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x736>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0208 	bic.w	r2, r2, #8
 80042e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	f003 031f 	and.w	r3, r3, #31
 80042ee:	223f      	movs	r2, #63	; 0x3f
 80042f0:	409a      	lsls	r2, r3
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 834a 	beq.w	80049a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
          }
          return;
 8004318:	e344      	b.n	80049a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d018      	beq.n	800435a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	2b00      	cmp	r3, #0
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
 8004346:	e027      	b.n	8004398 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d023      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e01e      	b.n	8004398 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10f      	bne.n	8004388 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0210 	bic.w	r2, r2, #16
 8004376:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8306 	beq.w	80049ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8088 	beq.w	80044c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2204      	movs	r2, #4
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a7a      	ldr	r2, [pc, #488]	; (80045a8 <HAL_DMA_IRQHandler+0xa08>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d04a      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a79      	ldr	r2, [pc, #484]	; (80045ac <HAL_DMA_IRQHandler+0xa0c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d045      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a77      	ldr	r2, [pc, #476]	; (80045b0 <HAL_DMA_IRQHandler+0xa10>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d040      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a76      	ldr	r2, [pc, #472]	; (80045b4 <HAL_DMA_IRQHandler+0xa14>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d03b      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a74      	ldr	r2, [pc, #464]	; (80045b8 <HAL_DMA_IRQHandler+0xa18>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d036      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a73      	ldr	r2, [pc, #460]	; (80045bc <HAL_DMA_IRQHandler+0xa1c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d031      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a71      	ldr	r2, [pc, #452]	; (80045c0 <HAL_DMA_IRQHandler+0xa20>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d02c      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a70      	ldr	r2, [pc, #448]	; (80045c4 <HAL_DMA_IRQHandler+0xa24>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d027      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6e      	ldr	r2, [pc, #440]	; (80045c8 <HAL_DMA_IRQHandler+0xa28>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d022      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6d      	ldr	r2, [pc, #436]	; (80045cc <HAL_DMA_IRQHandler+0xa2c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d01d      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6b      	ldr	r2, [pc, #428]	; (80045d0 <HAL_DMA_IRQHandler+0xa30>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d018      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6a      	ldr	r2, [pc, #424]	; (80045d4 <HAL_DMA_IRQHandler+0xa34>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a68      	ldr	r2, [pc, #416]	; (80045d8 <HAL_DMA_IRQHandler+0xa38>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00e      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a67      	ldr	r2, [pc, #412]	; (80045dc <HAL_DMA_IRQHandler+0xa3c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a65      	ldr	r2, [pc, #404]	; (80045e0 <HAL_DMA_IRQHandler+0xa40>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_DMA_IRQHandler+0x8b8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a64      	ldr	r2, [pc, #400]	; (80045e4 <HAL_DMA_IRQHandler+0xa44>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <HAL_DMA_IRQHandler+0x8ca>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e007      	b.n	800447a <HAL_DMA_IRQHandler+0x8da>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	429a      	cmp	r2, r3
 8004484:	d307      	bcc.n	8004496 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f2      	bne.n	800447a <HAL_DMA_IRQHandler+0x8da>
 8004494:	e000      	b.n	8004498 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004496:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2203      	movs	r2, #3
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044b6:	e003      	b.n	80044c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8272 	beq.w	80049ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
 80044d2:	e26c      	b.n	80049ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a43      	ldr	r2, [pc, #268]	; (80045e8 <HAL_DMA_IRQHandler+0xa48>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a42      	ldr	r2, [pc, #264]	; (80045ec <HAL_DMA_IRQHandler+0xa4c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a40      	ldr	r2, [pc, #256]	; (80045f0 <HAL_DMA_IRQHandler+0xa50>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <HAL_DMA_IRQHandler+0xa54>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3d      	ldr	r2, [pc, #244]	; (80045f8 <HAL_DMA_IRQHandler+0xa58>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <HAL_DMA_IRQHandler+0xa5c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <HAL_DMA_IRQHandler+0xa60>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_DMA_IRQHandler+0x984>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a39      	ldr	r2, [pc, #228]	; (8004604 <HAL_DMA_IRQHandler+0xa64>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_DMA_IRQHandler+0x988>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_DMA_IRQHandler+0x98a>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 823f 	beq.w	80049ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	2204      	movs	r2, #4
 8004542:	409a      	lsls	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80cd 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xb48>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80c7 	beq.w	80046e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2204      	movs	r2, #4
 8004564:	409a      	lsls	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d049      	beq.n	8004608 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8210 	beq.w	80049a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004590:	e20a      	b.n	80049a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8206 	beq.w	80049a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a4:	e200      	b.n	80049a8 <HAL_DMA_IRQHandler+0xe08>
 80045a6:	bf00      	nop
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	58025408 	.word	0x58025408
 80045ec:	5802541c 	.word	0x5802541c
 80045f0:	58025430 	.word	0x58025430
 80045f4:	58025444 	.word	0x58025444
 80045f8:	58025458 	.word	0x58025458
 80045fc:	5802546c 	.word	0x5802546c
 8004600:	58025480 	.word	0x58025480
 8004604:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d160      	bne.n	80046d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a8c      	ldr	r2, [pc, #560]	; (8004848 <HAL_DMA_IRQHandler+0xca8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d04a      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a8a      	ldr	r2, [pc, #552]	; (800484c <HAL_DMA_IRQHandler+0xcac>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d045      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a89      	ldr	r2, [pc, #548]	; (8004850 <HAL_DMA_IRQHandler+0xcb0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d040      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a87      	ldr	r2, [pc, #540]	; (8004854 <HAL_DMA_IRQHandler+0xcb4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d03b      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a86      	ldr	r2, [pc, #536]	; (8004858 <HAL_DMA_IRQHandler+0xcb8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d036      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a84      	ldr	r2, [pc, #528]	; (800485c <HAL_DMA_IRQHandler+0xcbc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d031      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_DMA_IRQHandler+0xcc0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d02c      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a81      	ldr	r2, [pc, #516]	; (8004864 <HAL_DMA_IRQHandler+0xcc4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d027      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a80      	ldr	r2, [pc, #512]	; (8004868 <HAL_DMA_IRQHandler+0xcc8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a7e      	ldr	r2, [pc, #504]	; (800486c <HAL_DMA_IRQHandler+0xccc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7d      	ldr	r2, [pc, #500]	; (8004870 <HAL_DMA_IRQHandler+0xcd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7b      	ldr	r2, [pc, #492]	; (8004874 <HAL_DMA_IRQHandler+0xcd4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7a      	ldr	r2, [pc, #488]	; (8004878 <HAL_DMA_IRQHandler+0xcd8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a78      	ldr	r2, [pc, #480]	; (800487c <HAL_DMA_IRQHandler+0xcdc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a77      	ldr	r2, [pc, #476]	; (8004880 <HAL_DMA_IRQHandler+0xce0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xb12>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_DMA_IRQHandler+0xce4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <HAL_DMA_IRQHandler+0xb24>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0208 	bic.w	r2, r2, #8
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e007      	b.n	80046d4 <HAL_DMA_IRQHandler+0xb34>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0204 	bic.w	r2, r2, #4
 80046d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8165 	beq.w	80049a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046e6:	e15f      	b.n	80049a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2202      	movs	r2, #2
 80046f2:	409a      	lsls	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80c5 	beq.w	8004888 <HAL_DMA_IRQHandler+0xce8>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80bf 	beq.w	8004888 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	2202      	movs	r2, #2
 8004714:	409a      	lsls	r2, r3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d018      	beq.n	8004756 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 813a 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004740:	e134      	b.n	80049ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8130 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004754:	e12a      	b.n	80049ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d168      	bne.n	8004832 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a38      	ldr	r2, [pc, #224]	; (8004848 <HAL_DMA_IRQHandler+0xca8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <HAL_DMA_IRQHandler+0xcac>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <HAL_DMA_IRQHandler+0xcb0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a34      	ldr	r2, [pc, #208]	; (8004854 <HAL_DMA_IRQHandler+0xcb4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a32      	ldr	r2, [pc, #200]	; (8004858 <HAL_DMA_IRQHandler+0xcb8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a31      	ldr	r2, [pc, #196]	; (800485c <HAL_DMA_IRQHandler+0xcbc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <HAL_DMA_IRQHandler+0xcc0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <HAL_DMA_IRQHandler+0xcc4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	; (8004868 <HAL_DMA_IRQHandler+0xcc8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2b      	ldr	r2, [pc, #172]	; (800486c <HAL_DMA_IRQHandler+0xccc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a29      	ldr	r2, [pc, #164]	; (8004870 <HAL_DMA_IRQHandler+0xcd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a28      	ldr	r2, [pc, #160]	; (8004874 <HAL_DMA_IRQHandler+0xcd4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_DMA_IRQHandler+0xcd8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <HAL_DMA_IRQHandler+0xcdc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a23      	ldr	r2, [pc, #140]	; (8004880 <HAL_DMA_IRQHandler+0xce0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0xc60>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_DMA_IRQHandler+0xce4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d108      	bne.n	8004812 <HAL_DMA_IRQHandler+0xc72>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0214 	bic.w	r2, r2, #20
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e007      	b.n	8004822 <HAL_DMA_IRQHandler+0xc82>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 020a 	bic.w	r2, r2, #10
 8004820:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80b8 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004844:	e0b2      	b.n	80049ac <HAL_DMA_IRQHandler+0xe0c>
 8004846:	bf00      	nop
 8004848:	40020010 	.word	0x40020010
 800484c:	40020028 	.word	0x40020028
 8004850:	40020040 	.word	0x40020040
 8004854:	40020058 	.word	0x40020058
 8004858:	40020070 	.word	0x40020070
 800485c:	40020088 	.word	0x40020088
 8004860:	400200a0 	.word	0x400200a0
 8004864:	400200b8 	.word	0x400200b8
 8004868:	40020410 	.word	0x40020410
 800486c:	40020428 	.word	0x40020428
 8004870:	40020440 	.word	0x40020440
 8004874:	40020458 	.word	0x40020458
 8004878:	40020470 	.word	0x40020470
 800487c:	40020488 	.word	0x40020488
 8004880:	400204a0 	.word	0x400204a0
 8004884:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2208      	movs	r2, #8
 8004892:	409a      	lsls	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8088 	beq.w	80049ae <HAL_DMA_IRQHandler+0xe0e>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8082 	beq.w	80049ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a41      	ldr	r2, [pc, #260]	; (80049b4 <HAL_DMA_IRQHandler+0xe14>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d04a      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a3f      	ldr	r2, [pc, #252]	; (80049b8 <HAL_DMA_IRQHandler+0xe18>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d045      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3e      	ldr	r2, [pc, #248]	; (80049bc <HAL_DMA_IRQHandler+0xe1c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d040      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3c      	ldr	r2, [pc, #240]	; (80049c0 <HAL_DMA_IRQHandler+0xe20>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3b      	ldr	r2, [pc, #236]	; (80049c4 <HAL_DMA_IRQHandler+0xe24>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d036      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a39      	ldr	r2, [pc, #228]	; (80049c8 <HAL_DMA_IRQHandler+0xe28>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d031      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a38      	ldr	r2, [pc, #224]	; (80049cc <HAL_DMA_IRQHandler+0xe2c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d02c      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a36      	ldr	r2, [pc, #216]	; (80049d0 <HAL_DMA_IRQHandler+0xe30>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d027      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_DMA_IRQHandler+0xe34>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d022      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a33      	ldr	r2, [pc, #204]	; (80049d8 <HAL_DMA_IRQHandler+0xe38>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01d      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a32      	ldr	r2, [pc, #200]	; (80049dc <HAL_DMA_IRQHandler+0xe3c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d018      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	; (80049e0 <HAL_DMA_IRQHandler+0xe40>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <HAL_DMA_IRQHandler+0xe44>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <HAL_DMA_IRQHandler+0xe48>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <HAL_DMA_IRQHandler+0xe4c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_DMA_IRQHandler+0xdaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <HAL_DMA_IRQHandler+0xe50>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_DMA_IRQHandler+0xdbc>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 021c 	bic.w	r2, r2, #28
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e007      	b.n	800496c <HAL_DMA_IRQHandler+0xdcc>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 020e 	bic.w	r2, r2, #14
 800496a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
 80049a2:	e004      	b.n	80049ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049a4:	bf00      	nop
 80049a6:	e002      	b.n	80049ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a8:	bf00      	nop
 80049aa:	e000      	b.n	80049ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049ae:	3728      	adds	r7, #40	; 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8

080049f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a42      	ldr	r2, [pc, #264]	; (8004b0c <DMA_CalcBaseAndBitshift+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d04a      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a41      	ldr	r2, [pc, #260]	; (8004b10 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d045      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3f      	ldr	r2, [pc, #252]	; (8004b14 <DMA_CalcBaseAndBitshift+0x120>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d040      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3e      	ldr	r2, [pc, #248]	; (8004b18 <DMA_CalcBaseAndBitshift+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d03b      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3c      	ldr	r2, [pc, #240]	; (8004b1c <DMA_CalcBaseAndBitshift+0x128>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d036      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3b      	ldr	r2, [pc, #236]	; (8004b20 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d031      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <DMA_CalcBaseAndBitshift+0x130>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02c      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a38      	ldr	r2, [pc, #224]	; (8004b28 <DMA_CalcBaseAndBitshift+0x134>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d027      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a36      	ldr	r2, [pc, #216]	; (8004b2c <DMA_CalcBaseAndBitshift+0x138>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d022      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a35      	ldr	r2, [pc, #212]	; (8004b30 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d01d      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a33      	ldr	r2, [pc, #204]	; (8004b34 <DMA_CalcBaseAndBitshift+0x140>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d018      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <DMA_CalcBaseAndBitshift+0x144>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <DMA_CalcBaseAndBitshift+0x148>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00e      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d009      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2d      	ldr	r2, [pc, #180]	; (8004b44 <DMA_CalcBaseAndBitshift+0x150>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <DMA_CalcBaseAndBitshift+0xa8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <DMA_CalcBaseAndBitshift+0x154>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <DMA_CalcBaseAndBitshift+0xac>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <DMA_CalcBaseAndBitshift+0xae>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d024      	beq.n	8004af0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3b10      	subs	r3, #16
 8004aae:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <DMA_CalcBaseAndBitshift+0x158>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ac0:	5cd3      	ldrb	r3, [r2, r3]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d908      	bls.n	8004ae0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b1f      	ldr	r3, [pc, #124]	; (8004b54 <DMA_CalcBaseAndBitshift+0x160>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	1d1a      	adds	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58
 8004ade:	e00d      	b.n	8004afc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <DMA_CalcBaseAndBitshift+0x160>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6593      	str	r3, [r2, #88]	; 0x58
 8004aee:	e005      	b.n	8004afc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40020010 	.word	0x40020010
 8004b10:	40020028 	.word	0x40020028
 8004b14:	40020040 	.word	0x40020040
 8004b18:	40020058 	.word	0x40020058
 8004b1c:	40020070 	.word	0x40020070
 8004b20:	40020088 	.word	0x40020088
 8004b24:	400200a0 	.word	0x400200a0
 8004b28:	400200b8 	.word	0x400200b8
 8004b2c:	40020410 	.word	0x40020410
 8004b30:	40020428 	.word	0x40020428
 8004b34:	40020440 	.word	0x40020440
 8004b38:	40020458 	.word	0x40020458
 8004b3c:	40020470 	.word	0x40020470
 8004b40:	40020488 	.word	0x40020488
 8004b44:	400204a0 	.word	0x400204a0
 8004b48:	400204b8 	.word	0x400204b8
 8004b4c:	aaaaaaab 	.word	0xaaaaaaab
 8004b50:	0800a4e8 	.word	0x0800a4e8
 8004b54:	fffffc00 	.word	0xfffffc00

08004b58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d120      	bne.n	8004bae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d858      	bhi.n	8004c26 <DMA_CheckFifoParam+0xce>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <DMA_CheckFifoParam+0x24>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9f 	.word	0x08004b9f
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004c27 	.word	0x08004c27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d048      	beq.n	8004c2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b9c:	e045      	b.n	8004c2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ba6:	d142      	bne.n	8004c2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bac:	e03f      	b.n	8004c2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	d123      	bne.n	8004c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d838      	bhi.n	8004c32 <DMA_CheckFifoParam+0xda>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <DMA_CheckFifoParam+0x70>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004bdf 	.word	0x08004bdf
 8004bd0:	08004bd9 	.word	0x08004bd9
 8004bd4:	08004bf1 	.word	0x08004bf1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
        break;
 8004bdc:	e030      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d025      	beq.n	8004c36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bee:	e022      	b.n	8004c36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bf8:	d11f      	bne.n	8004c3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bfe:	e01c      	b.n	8004c3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d902      	bls.n	8004c0e <DMA_CheckFifoParam+0xb6>
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d003      	beq.n	8004c14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c0c:	e018      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
        break;
 8004c12:	e015      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
    break;
 8004c24:	e00b      	b.n	8004c3e <DMA_CheckFifoParam+0xe6>
        break;
 8004c26:	bf00      	nop
 8004c28:	e00a      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        break;
 8004c2a:	bf00      	nop
 8004c2c:	e008      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e006      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        break;
 8004c32:	bf00      	nop
 8004c34:	e004      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <DMA_CheckFifoParam+0xe8>
    break;
 8004c3e:	bf00      	nop
    }
  }

  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a38      	ldr	r2, [pc, #224]	; (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a36      	ldr	r2, [pc, #216]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01d      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d018      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a32      	ldr	r2, [pc, #200]	; (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d009      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2f      	ldr	r2, [pc, #188]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	3b08      	subs	r3, #8
 8004cc0:	4a28      	ldr	r2, [pc, #160]	; (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a24      	ldr	r2, [pc, #144]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004cdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cec:	e024      	b.n	8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3b10      	subs	r3, #16
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d806      	bhi.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d902      	bls.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3308      	adds	r3, #8
 8004d14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	2201      	movs	r2, #1
 8004d32:	409a      	lsls	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494
 8004d64:	cccccccd 	.word	0xcccccccd
 8004d68:	16009600 	.word	0x16009600
 8004d6c:	58025880 	.word	0x58025880
 8004d70:	aaaaaaab 	.word	0xaaaaaaab
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	4002040f 	.word	0x4002040f
 8004d7c:	10008200 	.word	0x10008200
 8004d80:	40020880 	.word	0x40020880

08004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04a      	beq.n	8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d847      	bhi.n	8004e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d022      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d01d      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	; (8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00e      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d101      	bne.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e0c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e0e:	e009      	b.n	8004e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	2201      	movs	r2, #1
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	58025408 	.word	0x58025408
 8004e40:	5802541c 	.word	0x5802541c
 8004e44:	58025430 	.word	0x58025430
 8004e48:	58025444 	.word	0x58025444
 8004e4c:	58025458 	.word	0x58025458
 8004e50:	5802546c 	.word	0x5802546c
 8004e54:	58025480 	.word	0x58025480
 8004e58:	58025494 	.word	0x58025494
 8004e5c:	1600963f 	.word	0x1600963f
 8004e60:	58025940 	.word	0x58025940
 8004e64:	1000823f 	.word	0x1000823f
 8004e68:	40020940 	.word	0x40020940

08004e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	; 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e7a:	4b86      	ldr	r3, [pc, #536]	; (8005094 <HAL_GPIO_Init+0x228>)
 8004e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e7e:	e18c      	b.n	800519a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2101      	movs	r1, #1
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 817e 	beq.w	8005194 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_GPIO_Init+0x4c>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d007      	beq.n	8004eb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eac:	2b11      	cmp	r3, #17
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b12      	cmp	r3, #18
 8004eb6:	d130      	bne.n	8004f1a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eee:	2201      	movs	r2, #1
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0201 	and.w	r2, r3, #1
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0xee>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b12      	cmp	r3, #18
 8004f58:	d123      	bne.n	8004fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	08da      	lsrs	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3208      	adds	r2, #8
 8004f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	220f      	movs	r2, #15
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	08da      	lsrs	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3208      	adds	r2, #8
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2203      	movs	r2, #3
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80d8 	beq.w	8005194 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe4:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <HAL_GPIO_Init+0x22c>)
 8004fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fea:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_GPIO_Init+0x22c>)
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ff4:	4b28      	ldr	r3, [pc, #160]	; (8005098 <HAL_GPIO_Init+0x22c>)
 8004ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005002:	4a26      	ldr	r2, [pc, #152]	; (800509c <HAL_GPIO_Init+0x230>)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	3302      	adds	r3, #2
 800500a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	220f      	movs	r2, #15
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <HAL_GPIO_Init+0x234>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d04a      	beq.n	80050c4 <HAL_GPIO_Init+0x258>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <HAL_GPIO_Init+0x238>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02b      	beq.n	800508e <HAL_GPIO_Init+0x222>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_GPIO_Init+0x23c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d025      	beq.n	800508a <HAL_GPIO_Init+0x21e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <HAL_GPIO_Init+0x240>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01f      	beq.n	8005086 <HAL_GPIO_Init+0x21a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_GPIO_Init+0x244>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d019      	beq.n	8005082 <HAL_GPIO_Init+0x216>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_GPIO_Init+0x248>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_GPIO_Init+0x212>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <HAL_GPIO_Init+0x24c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00d      	beq.n	800507a <HAL_GPIO_Init+0x20e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_GPIO_Init+0x250>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <HAL_GPIO_Init+0x20a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_GPIO_Init+0x254>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <HAL_GPIO_Init+0x206>
 800506e:	2309      	movs	r3, #9
 8005070:	e029      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 8005072:	230a      	movs	r3, #10
 8005074:	e027      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 8005076:	2307      	movs	r3, #7
 8005078:	e025      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 800507a:	2306      	movs	r3, #6
 800507c:	e023      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 800507e:	2305      	movs	r3, #5
 8005080:	e021      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 8005082:	2304      	movs	r3, #4
 8005084:	e01f      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 8005086:	2303      	movs	r3, #3
 8005088:	e01d      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 800508a:	2302      	movs	r3, #2
 800508c:	e01b      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 800508e:	2301      	movs	r3, #1
 8005090:	e019      	b.n	80050c6 <HAL_GPIO_Init+0x25a>
 8005092:	bf00      	nop
 8005094:	58000080 	.word	0x58000080
 8005098:	58024400 	.word	0x58024400
 800509c:	58000400 	.word	0x58000400
 80050a0:	58020000 	.word	0x58020000
 80050a4:	58020400 	.word	0x58020400
 80050a8:	58020800 	.word	0x58020800
 80050ac:	58020c00 	.word	0x58020c00
 80050b0:	58021000 	.word	0x58021000
 80050b4:	58021400 	.word	0x58021400
 80050b8:	58021800 	.word	0x58021800
 80050bc:	58021c00 	.word	0x58021c00
 80050c0:	58022400 	.word	0x58022400
 80050c4:	2300      	movs	r3, #0
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	f002 0203 	and.w	r2, r2, #3
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4093      	lsls	r3, r2
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d6:	4938      	ldr	r1, [pc, #224]	; (80051b8 <HAL_GPIO_Init+0x34c>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800515e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800518c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f47f ae6b 	bne.w	8004e80 <HAL_GPIO_Init+0x14>
  }
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	3724      	adds	r7, #36	; 0x24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	58000400 	.word	0x58000400

080051bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
 80051c8:	4613      	mov	r3, r2
 80051ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051cc:	787b      	ldrb	r3, [r7, #1]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051d2:	887a      	ldrh	r2, [r7, #2]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051d8:	e003      	b.n	80051e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051da:	887b      	ldrh	r3, [r7, #2]
 80051dc:	041a      	lsls	r2, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	619a      	str	r2, [r3, #24]
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80051f8:	4b19      	ldr	r3, [pc, #100]	; (8005260 <HAL_PWREx_ConfigSupply+0x70>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d00a      	beq.n	800521a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005204:	4b16      	ldr	r3, [pc, #88]	; (8005260 <HAL_PWREx_ConfigSupply+0x70>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e01f      	b.n	8005256 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e01d      	b.n	8005256 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <HAL_PWREx_ConfigSupply+0x70>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	490f      	ldr	r1, [pc, #60]	; (8005260 <HAL_PWREx_ConfigSupply+0x70>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4313      	orrs	r3, r2
 8005228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800522a:	f7fc f87d 	bl	8001328 <HAL_GetTick>
 800522e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005230:	e009      	b.n	8005246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005232:	f7fc f879 	bl	8001328 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005240:	d901      	bls.n	8005246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e007      	b.n	8005256 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_PWREx_ConfigSupply+0x70>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d1ee      	bne.n	8005232 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	58024800 	.word	0x58024800

08005264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e37a      	b.n	800596c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8087 	beq.w	8005392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005284:	4ba0      	ldr	r3, [pc, #640]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800528e:	4b9e      	ldr	r3, [pc, #632]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	2b10      	cmp	r3, #16
 8005298:	d007      	beq.n	80052aa <HAL_RCC_OscConfig+0x46>
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b18      	cmp	r3, #24
 800529e:	d110      	bne.n	80052c2 <HAL_RCC_OscConfig+0x5e>
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d10b      	bne.n	80052c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052aa:	4b97      	ldr	r3, [pc, #604]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d06c      	beq.n	8005390 <HAL_RCC_OscConfig+0x12c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d168      	bne.n	8005390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e354      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ca:	d106      	bne.n	80052da <HAL_RCC_OscConfig+0x76>
 80052cc:	4b8e      	ldr	r3, [pc, #568]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a8d      	ldr	r2, [pc, #564]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e02e      	b.n	8005338 <HAL_RCC_OscConfig+0xd4>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0x98>
 80052e2:	4b89      	ldr	r3, [pc, #548]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a88      	ldr	r2, [pc, #544]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b86      	ldr	r3, [pc, #536]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a85      	ldr	r2, [pc, #532]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80052f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e01d      	b.n	8005338 <HAL_RCC_OscConfig+0xd4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0xbc>
 8005306:	4b80      	ldr	r3, [pc, #512]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7f      	ldr	r2, [pc, #508]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 800530c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b7d      	ldr	r3, [pc, #500]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7c      	ldr	r2, [pc, #496]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0xd4>
 8005320:	4b79      	ldr	r3, [pc, #484]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a78      	ldr	r2, [pc, #480]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a75      	ldr	r2, [pc, #468]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d013      	beq.n	8005368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fb fff2 	bl	8001328 <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005348:	f7fb ffee 	bl	8001328 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	; 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e308      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800535a:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0xe4>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fb ffde 	bl	8001328 <HAL_GetTick>
 800536c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005370:	f7fb ffda 	bl	8001328 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b64      	cmp	r3, #100	; 0x64
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e2f4      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005382:	4b61      	ldr	r3, [pc, #388]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x10c>
 800538e:	e000      	b.n	8005392 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d06d      	beq.n	800547a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539e:	4b5a      	ldr	r3, [pc, #360]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053a8:	4b57      	ldr	r3, [pc, #348]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_RCC_OscConfig+0x160>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b18      	cmp	r3, #24
 80053b8:	d11b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x18e>
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_OscConfig+0x178>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2c7      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053dc:	4b4a      	ldr	r3, [pc, #296]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	061b      	lsls	r3, r3, #24
 80053ea:	4947      	ldr	r1, [pc, #284]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f0:	e043      	b.n	800547a <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d026      	beq.n	8005448 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 0219 	bic.w	r2, r3, #25
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4940      	ldr	r1, [pc, #256]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fb ff8c 	bl	8001328 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005414:	f7fb ff88 	bl	8001328 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e2a2      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005426:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	4931      	ldr	r1, [pc, #196]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	604b      	str	r3, [r1, #4]
 8005446:	e018      	b.n	800547a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005448:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb ff68 	bl	8001328 <HAL_GetTick>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800545c:	f7fb ff64 	bl	8001328 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e27e      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800546e:	4b26      	ldr	r3, [pc, #152]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d06c      	beq.n	8005560 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005486:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800548e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d007      	beq.n	80054ac <HAL_RCC_OscConfig+0x248>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b18      	cmp	r3, #24
 80054a0:	d11b      	bne.n	80054da <HAL_RCC_OscConfig+0x276>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d116      	bne.n	80054da <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_RCC_OscConfig+0x260>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e253      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	490d      	ldr	r1, [pc, #52]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054d8:	e042      	b.n	8005560 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d025      	beq.n	800552e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054e2:	4b09      	ldr	r3, [pc, #36]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a08      	ldr	r2, [pc, #32]	; (8005508 <HAL_RCC_OscConfig+0x2a4>)
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fb ff1b 	bl	8001328 <HAL_GetTick>
 80054f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054f4:	e00a      	b.n	800550c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054f6:	f7fb ff17 	bl	8001328 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d903      	bls.n	800550c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e231      	b.n	800596c <HAL_RCC_OscConfig+0x708>
 8005508:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800550c:	4ba3      	ldr	r3, [pc, #652]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0ee      	beq.n	80054f6 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005518:	4ba0      	ldr	r3, [pc, #640]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	499d      	ldr	r1, [pc, #628]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005528:	4313      	orrs	r3, r2
 800552a:	60cb      	str	r3, [r1, #12]
 800552c:	e018      	b.n	8005560 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800552e:	4b9b      	ldr	r3, [pc, #620]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a9a      	ldr	r2, [pc, #616]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fb fef5 	bl	8001328 <HAL_GetTick>
 800553e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005542:	f7fb fef1 	bl	8001328 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e20b      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005554:	4b91      	ldr	r3, [pc, #580]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d036      	beq.n	80055da <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d019      	beq.n	80055a8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005574:	4b89      	ldr	r3, [pc, #548]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	4a88      	ldr	r2, [pc, #544]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fb fed2 	bl	8001328 <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005588:	f7fb fece 	bl	8001328 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e1e8      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800559a:	4b80      	ldr	r3, [pc, #512]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x324>
 80055a6:	e018      	b.n	80055da <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a8:	4b7c      	ldr	r3, [pc, #496]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	4a7b      	ldr	r2, [pc, #492]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fb feb8 	bl	8001328 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fb feb4 	bl	8001328 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e1ce      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055ce:	4b73      	ldr	r3, [pc, #460]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d036      	beq.n	8005654 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d019      	beq.n	8005622 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055ee:	4b6b      	ldr	r3, [pc, #428]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80055f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055fa:	f7fb fe95 	bl	8001328 <HAL_GetTick>
 80055fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005602:	f7fb fe91 	bl	8001328 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e1ab      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x39e>
 8005620:	e018      	b.n	8005654 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005622:	4b5e      	ldr	r3, [pc, #376]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5d      	ldr	r2, [pc, #372]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800562e:	f7fb fe7b 	bl	8001328 <HAL_GetTick>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005636:	f7fb fe77 	bl	8001328 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e191      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005648:	4b54      	ldr	r3, [pc, #336]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f0      	bne.n	8005636 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8081 	beq.w	8005764 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005662:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_OscConfig+0x53c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_RCC_OscConfig+0x53c>)
 8005668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800566e:	f7fb fe5b 	bl	8001328 <HAL_GetTick>
 8005672:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005676:	f7fb fe57 	bl	8001328 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b64      	cmp	r3, #100	; 0x64
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e171      	b.n	800596c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005688:	4b45      	ldr	r3, [pc, #276]	; (80057a0 <HAL_RCC_OscConfig+0x53c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x446>
 800569c:	4b3f      	ldr	r3, [pc, #252]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	4a3e      	ldr	r2, [pc, #248]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6713      	str	r3, [r2, #112]	; 0x70
 80056a8:	e02d      	b.n	8005706 <HAL_RCC_OscConfig+0x4a2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10c      	bne.n	80056cc <HAL_RCC_OscConfig+0x468>
 80056b2:	4b3a      	ldr	r3, [pc, #232]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a39      	ldr	r2, [pc, #228]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
 80056be:	4b37      	ldr	r3, [pc, #220]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a36      	ldr	r2, [pc, #216]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	e01c      	b.n	8005706 <HAL_RCC_OscConfig+0x4a2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d10c      	bne.n	80056ee <HAL_RCC_OscConfig+0x48a>
 80056d4:	4b31      	ldr	r3, [pc, #196]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a30      	ldr	r2, [pc, #192]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056da:	f043 0304 	orr.w	r3, r3, #4
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
 80056e0:	4b2e      	ldr	r3, [pc, #184]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	e00b      	b.n	8005706 <HAL_RCC_OscConfig+0x4a2>
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <HAL_RCC_OscConfig+0x538>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a27      	ldr	r2, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d015      	beq.n	800573a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fb fe0b 	bl	8001328 <HAL_GetTick>
 8005712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fb fe07 	bl	8001328 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	; 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e11f      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0ee      	beq.n	8005716 <HAL_RCC_OscConfig+0x4b2>
 8005738:	e014      	b.n	8005764 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fb fdf5 	bl	8001328 <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005740:	e00a      	b.n	8005758 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fb fdf1 	bl	8001328 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e109      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800575a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ee      	bne.n	8005742 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 80fe 	beq.w	800596a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005776:	2b18      	cmp	r3, #24
 8005778:	f000 80b9 	beq.w	80058ee <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b02      	cmp	r3, #2
 8005782:	f040 809a 	bne.w	80058ba <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_OscConfig+0x538>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a04      	ldr	r2, [pc, #16]	; (800579c <HAL_RCC_OscConfig+0x538>)
 800578c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fb fdc9 	bl	8001328 <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005798:	e00d      	b.n	80057b6 <HAL_RCC_OscConfig+0x552>
 800579a:	bf00      	nop
 800579c:	58024400 	.word	0x58024400
 80057a0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fb fdc0 	bl	8001328 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e0da      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b6:	4b6f      	ldr	r3, [pc, #444]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c2:	4b6c      	ldr	r3, [pc, #432]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80057c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c6:	4b6c      	ldr	r3, [pc, #432]	; (8005978 <HAL_RCC_OscConfig+0x714>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057d2:	0112      	lsls	r2, r2, #4
 80057d4:	430a      	orrs	r2, r1
 80057d6:	4967      	ldr	r1, [pc, #412]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	628b      	str	r3, [r1, #40]	; 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	3b01      	subs	r3, #1
 80057e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	3b01      	subs	r3, #1
 80057ec:	025b      	lsls	r3, r3, #9
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	3b01      	subs	r3, #1
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	3b01      	subs	r3, #1
 8005806:	061b      	lsls	r3, r3, #24
 8005808:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800580c:	4959      	ldr	r1, [pc, #356]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 800580e:	4313      	orrs	r3, r2
 8005810:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005812:	4b58      	ldr	r3, [pc, #352]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	4a57      	ldr	r2, [pc, #348]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800581e:	4b55      	ldr	r3, [pc, #340]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005822:	4b56      	ldr	r3, [pc, #344]	; (800597c <HAL_RCC_OscConfig+0x718>)
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800582a:	00d2      	lsls	r2, r2, #3
 800582c:	4951      	ldr	r1, [pc, #324]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 800582e:	4313      	orrs	r3, r2
 8005830:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005832:	4b50      	ldr	r3, [pc, #320]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f023 020c 	bic.w	r2, r3, #12
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	494d      	ldr	r1, [pc, #308]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005840:	4313      	orrs	r3, r2
 8005842:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005844:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f023 0202 	bic.w	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005850:	4948      	ldr	r1, [pc, #288]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005852:	4313      	orrs	r3, r2
 8005854:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005856:	4b47      	ldr	r3, [pc, #284]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a46      	ldr	r2, [pc, #280]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005862:	4b44      	ldr	r3, [pc, #272]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a43      	ldr	r2, [pc, #268]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800586e:	4b41      	ldr	r3, [pc, #260]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800587a:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	4a3d      	ldr	r2, [pc, #244]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005886:	4b3b      	ldr	r3, [pc, #236]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3a      	ldr	r2, [pc, #232]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 800588c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fb fd49 	bl	8001328 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fb fd45 	bl	8001328 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e05f      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ac:	4b31      	ldr	r3, [pc, #196]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x636>
 80058b8:	e057      	b.n	800596a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ba:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fb fd2f 	bl	8001328 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ce:	f7fb fd2b 	bl	8001328 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e045      	b.n	800596c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x66a>
 80058ec:	e03d      	b.n	800596a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058f4:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <HAL_RCC_OscConfig+0x710>)
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d031      	beq.n	8005966 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d12a      	bne.n	8005966 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d122      	bne.n	8005966 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d11a      	bne.n	8005966 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	0a5b      	lsrs	r3, r3, #9
 8005934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d111      	bne.n	8005966 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d108      	bne.n	8005966 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	0e1b      	lsrs	r3, r3, #24
 8005958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d001      	beq.n	800596a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3730      	adds	r7, #48	; 0x30
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	58024400 	.word	0x58024400
 8005978:	fffffc0c 	.word	0xfffffc0c
 800597c:	ffff0007 	.word	0xffff0007

08005980 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e19c      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b8a      	ldr	r3, [pc, #552]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d910      	bls.n	80059c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b87      	ldr	r3, [pc, #540]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 020f 	bic.w	r2, r3, #15
 80059aa:	4985      	ldr	r1, [pc, #532]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b83      	ldr	r3, [pc, #524]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e184      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	4b7b      	ldr	r3, [pc, #492]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059dc:	429a      	cmp	r2, r3
 80059de:	d908      	bls.n	80059f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059e0:	4b78      	ldr	r3, [pc, #480]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	4975      	ldr	r1, [pc, #468]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	4b70      	ldr	r3, [pc, #448]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d908      	bls.n	8005a20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a0e:	4b6d      	ldr	r3, [pc, #436]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	496a      	ldr	r1, [pc, #424]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	4b64      	ldr	r3, [pc, #400]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d908      	bls.n	8005a4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a3c:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	495e      	ldr	r1, [pc, #376]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d010      	beq.n	8005a7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d908      	bls.n	8005a7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a6a:	4b56      	ldr	r3, [pc, #344]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4953      	ldr	r1, [pc, #332]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d908      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f023 020f 	bic.w	r2, r3, #15
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4947      	ldr	r1, [pc, #284]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d055      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ab6:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4940      	ldr	r1, [pc, #256]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d107      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ad0:	4b3c      	ldr	r3, [pc, #240]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d121      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0f6      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ae8:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d115      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0ea      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d107      	bne.n	8005b10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b00:	4b30      	ldr	r3, [pc, #192]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0de      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b10:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0d6      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b20:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f023 0207 	bic.w	r2, r3, #7
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4925      	ldr	r1, [pc, #148]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b32:	f7fb fbf9 	bl	8001328 <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b38:	e00a      	b.n	8005b50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b3a:	f7fb fbf5 	bl	8001328 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e0be      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b50:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d1eb      	bne.n	8005b3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d208      	bcs.n	8005b90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f023 020f 	bic.w	r2, r3, #15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d214      	bcs.n	8005bc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 020f 	bic.w	r2, r3, #15
 8005ba6:	4906      	ldr	r1, [pc, #24]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d005      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e086      	b.n	8005cce <HAL_RCC_ClockConfig+0x34e>
 8005bc0:	52002000 	.word	0x52002000
 8005bc4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	4b3f      	ldr	r3, [pc, #252]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d208      	bcs.n	8005bf6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be4:	4b3c      	ldr	r3, [pc, #240]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4939      	ldr	r1, [pc, #228]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d208      	bcs.n	8005c24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c12:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	492e      	ldr	r1, [pc, #184]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	4b28      	ldr	r3, [pc, #160]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d208      	bcs.n	8005c52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c40:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	4922      	ldr	r1, [pc, #136]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d208      	bcs.n	8005c80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c6e:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4917      	ldr	r1, [pc, #92]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c80:	f000 f834 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	4912      	ldr	r1, [pc, #72]	; (8005cdc <HAL_RCC_ClockConfig+0x35c>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <HAL_RCC_ClockConfig+0x358>)
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <HAL_RCC_ClockConfig+0x35c>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_RCC_ClockConfig+0x360>)
 8005cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x364>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_RCC_ClockConfig+0x368>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fb fae6 	bl	8001294 <HAL_InitTick>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	58024400 	.word	0x58024400
 8005cdc:	0800a4d8 	.word	0x0800a4d8
 8005ce0:	24000004 	.word	0x24000004
 8005ce4:	24000000 	.word	0x24000000
 8005ce8:	24000008 	.word	0x24000008

08005cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf2:	4bb3      	ldr	r3, [pc, #716]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cfa:	2b18      	cmp	r3, #24
 8005cfc:	f200 8155 	bhi.w	8005faa <HAL_RCC_GetSysClockFreq+0x2be>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d6d 	.word	0x08005d6d
 8005d0c:	08005fab 	.word	0x08005fab
 8005d10:	08005fab 	.word	0x08005fab
 8005d14:	08005fab 	.word	0x08005fab
 8005d18:	08005fab 	.word	0x08005fab
 8005d1c:	08005fab 	.word	0x08005fab
 8005d20:	08005fab 	.word	0x08005fab
 8005d24:	08005fab 	.word	0x08005fab
 8005d28:	08005d93 	.word	0x08005d93
 8005d2c:	08005fab 	.word	0x08005fab
 8005d30:	08005fab 	.word	0x08005fab
 8005d34:	08005fab 	.word	0x08005fab
 8005d38:	08005fab 	.word	0x08005fab
 8005d3c:	08005fab 	.word	0x08005fab
 8005d40:	08005fab 	.word	0x08005fab
 8005d44:	08005fab 	.word	0x08005fab
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005fab 	.word	0x08005fab
 8005d50:	08005fab 	.word	0x08005fab
 8005d54:	08005fab 	.word	0x08005fab
 8005d58:	08005fab 	.word	0x08005fab
 8005d5c:	08005fab 	.word	0x08005fab
 8005d60:	08005fab 	.word	0x08005fab
 8005d64:	08005fab 	.word	0x08005fab
 8005d68:	08005d9f 	.word	0x08005d9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d6c:	4b94      	ldr	r3, [pc, #592]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d78:	4b91      	ldr	r3, [pc, #580]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	08db      	lsrs	r3, r3, #3
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	4a90      	ldr	r2, [pc, #576]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d8a:	e111      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d8c:	4b8d      	ldr	r3, [pc, #564]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d8e:	61bb      	str	r3, [r7, #24]
    break;
 8005d90:	e10e      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d92:	4b8d      	ldr	r3, [pc, #564]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d94:	61bb      	str	r3, [r7, #24]
    break;
 8005d96:	e10b      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d98:	4b8c      	ldr	r3, [pc, #560]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d9a:	61bb      	str	r3, [r7, #24]
    break;
 8005d9c:	e108      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d9e:	4b88      	ldr	r3, [pc, #544]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005da8:	4b85      	ldr	r3, [pc, #532]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005db2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005db4:	4b82      	ldr	r3, [pc, #520]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dbe:	4b80      	ldr	r3, [pc, #512]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80e1 	beq.w	8005fa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f000 8083 	beq.w	8005ef0 <HAL_RCC_GetSysClockFreq+0x204>
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	f200 80a1 	bhi.w	8005f34 <HAL_RCC_GetSysClockFreq+0x248>
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x114>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d056      	beq.n	8005eac <HAL_RCC_GetSysClockFreq+0x1c0>
 8005dfe:	e099      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e00:	4b6f      	ldr	r3, [pc, #444]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02d      	beq.n	8005e68 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e0c:	4b6c      	ldr	r3, [pc, #432]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	4a6b      	ldr	r2, [pc, #428]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b62      	ldr	r3, [pc, #392]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e66:	e087      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b51      	ldr	r3, [pc, #324]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eaa:	e065      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b40      	ldr	r3, [pc, #256]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eee:	e043      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b2f      	ldr	r3, [pc, #188]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f32:	e021      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f46:	4b1e      	ldr	r3, [pc, #120]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f76:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	0a5b      	lsrs	r3, r3, #9
 8005f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f82:	3301      	adds	r3, #1
 8005f84:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9c:	ee17 3a90 	vmov	r3, s15
 8005fa0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
    break;
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fac:	61bb      	str	r3, [r7, #24]
    break;
 8005fae:	bf00      	nop
  }

  return sysclockfreq;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3724      	adds	r7, #36	; 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	03d09000 	.word	0x03d09000
 8005fc8:	003d0900 	.word	0x003d0900
 8005fcc:	007a1200 	.word	0x007a1200
 8005fd0:	46000000 	.word	0x46000000
 8005fd4:	4c742400 	.word	0x4c742400
 8005fd8:	4a742400 	.word	0x4a742400
 8005fdc:	4af42400 	.word	0x4af42400

08005fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005fe6:	f7ff fe81 	bl	8005cec <HAL_RCC_GetSysClockFreq>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	490f      	ldr	r1, [pc, #60]	; (8006034 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ff8:	5ccb      	ldrb	r3, [r1, r3]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_RCC_GetHCLKFreq+0x50>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	4a09      	ldr	r2, [pc, #36]	; (8006034 <HAL_RCC_GetHCLKFreq+0x54>)
 800600e:	5cd3      	ldrb	r3, [r2, r3]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	fa22 f303 	lsr.w	r3, r2, r3
 800601a:	4a07      	ldr	r2, [pc, #28]	; (8006038 <HAL_RCC_GetHCLKFreq+0x58>)
 800601c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006024:	4b04      	ldr	r3, [pc, #16]	; (8006038 <HAL_RCC_GetHCLKFreq+0x58>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	58024400 	.word	0x58024400
 8006034:	0800a4d8 	.word	0x0800a4d8
 8006038:	24000004 	.word	0x24000004
 800603c:	24000000 	.word	0x24000000

08006040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006044:	f7ff ffcc 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 8006048:	4602      	mov	r2, r0
 800604a:	4b06      	ldr	r3, [pc, #24]	; (8006064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	4904      	ldr	r1, [pc, #16]	; (8006068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006056:	5ccb      	ldrb	r3, [r1, r3]
 8006058:	f003 031f 	and.w	r3, r3, #31
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	58024400 	.word	0x58024400
 8006068:	0800a4d8 	.word	0x0800a4d8

0800606c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006070:	f7ff ffb6 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	0a1b      	lsrs	r3, r3, #8
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4904      	ldr	r1, [pc, #16]	; (8006094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	58024400 	.word	0x58024400
 8006094:	0800a4d8 	.word	0x0800a4d8

08006098 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060a0:	2300      	movs	r3, #0
 80060a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a4:	2300      	movs	r3, #0
 80060a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d03f      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060bc:	d02a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060c2:	d824      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060c8:	d018      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ce:	d81e      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d8:	d007      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060da:	e018      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060dc:	4bab      	ldr	r3, [pc, #684]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	4aaa      	ldr	r2, [pc, #680]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060e8:	e015      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3304      	adds	r3, #4
 80060ee:	2102      	movs	r1, #2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 feff 	bl	8007ef4 <RCCEx_PLL2_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060fa:	e00c      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 ffa8 	bl	8008058 <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800610c:	e003      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	75fb      	strb	r3, [r7, #23]
      break;
 8006112:	e000      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800611c:	4b9b      	ldr	r3, [pc, #620]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800611e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006128:	4998      	ldr	r1, [pc, #608]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800612a:	4313      	orrs	r3, r2
 800612c:	650b      	str	r3, [r1, #80]	; 0x50
 800612e:	e001      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613c:	2b00      	cmp	r3, #0
 800613e:	d03d      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	2b04      	cmp	r3, #4
 8006146:	d826      	bhi.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006165 	.word	0x08006165
 8006154:	08006173 	.word	0x08006173
 8006158:	08006185 	.word	0x08006185
 800615c:	0800619d 	.word	0x0800619d
 8006160:	0800619d 	.word	0x0800619d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006164:	4b89      	ldr	r3, [pc, #548]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a88      	ldr	r2, [pc, #544]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800616a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006170:	e015      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3304      	adds	r3, #4
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f001 febb 	bl	8007ef4 <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006182:	e00c      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f001 ff64 	bl	8008058 <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006194:	e003      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
      break;
 800619a:	e000      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800619c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061a4:	4b79      	ldr	r3, [pc, #484]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a8:	f023 0207 	bic.w	r2, r3, #7
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	4976      	ldr	r1, [pc, #472]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	650b      	str	r3, [r1, #80]	; 0x50
 80061b6:	e001      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d051      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80061d2:	d036      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061d4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80061d8:	d830      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80061da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061de:	d032      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80061e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061e4:	d82a      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80061e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061ea:	d02e      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80061ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061f0:	d824      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80061f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f6:	d018      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80061f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061fc:	d81e      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8006202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006206:	d007      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006208:	e018      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620a:	4b60      	ldr	r3, [pc, #384]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	4a5f      	ldr	r2, [pc, #380]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006214:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006216:	e019      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f001 fe68 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006228:	e010      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f001 ff11 	bl	8008058 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800623a:	e007      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	e004      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800624a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006252:	4b4e      	ldr	r3, [pc, #312]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006256:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006260:	494a      	ldr	r1, [pc, #296]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006262:	4313      	orrs	r3, r2
 8006264:	658b      	str	r3, [r1, #88]	; 0x58
 8006266:	e001      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006274:	2b00      	cmp	r3, #0
 8006276:	d051      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800627e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006282:	d036      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8006284:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006288:	d830      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 800628a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800628e:	d032      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006294:	d82a      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800629a:	d02e      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800629c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062a0:	d824      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80062a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062a6:	d018      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x242>
 80062a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062ac:	d81e      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x222>
 80062b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062b6:	d007      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80062b8:	e018      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ba:	4b34      	ldr	r3, [pc, #208]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a33      	ldr	r2, [pc, #204]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c6:	e019      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 fe10 	bl	8007ef4 <RCCEx_PLL2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062d8:	e010      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 feb9 	bl	8008058 <RCCEx_PLL3_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ea:	e007      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
      break;
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80062fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006302:	4b22      	ldr	r3, [pc, #136]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006310:	491e      	ldr	r1, [pc, #120]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006312:	4313      	orrs	r3, r2
 8006314:	658b      	str	r3, [r1, #88]	; 0x58
 8006316:	e001      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d035      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632c:	2b30      	cmp	r3, #48	; 0x30
 800632e:	d01c      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d817      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d00c      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d813      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d016      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d10f      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006344:	4b11      	ldr	r3, [pc, #68]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a10      	ldr	r2, [pc, #64]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006350:	e00e      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fdcb 	bl	8007ef4 <RCCEx_PLL2_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006362:	e005      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e002      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800636e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10c      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006382:	4902      	ldr	r1, [pc, #8]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006388:	e004      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800638a:	bf00      	nop
 800638c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d047      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a8:	d030      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80063aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ae:	d82a      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80063b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b4:	d02c      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80063b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ba:	d824      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c0:	d018      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	d81e      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d0:	d007      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063d2:	e018      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d4:	4bac      	ldr	r3, [pc, #688]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4aab      	ldr	r2, [pc, #684]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063e0:	e017      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fd83 	bl	8007ef4 <RCCEx_PLL2_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063f2:	e00e      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fe2c 	bl	8008058 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006404:	e005      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
      break;
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006418:	4b9b      	ldr	r3, [pc, #620]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	4998      	ldr	r1, [pc, #608]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	650b      	str	r3, [r1, #80]	; 0x50
 800642a:	e001      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d049      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006444:	d02e      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8006446:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800644a:	d828      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800644c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006450:	d02a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006456:	d822      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800645c:	d026      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x414>
 800645e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006462:	d81c      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006468:	d010      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800646a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800646e:	d816      	bhi.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d111      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	2101      	movs	r1, #1
 8006480:	4618      	mov	r0, r3
 8006482:	f001 fd37 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800648a:	e012      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3324      	adds	r3, #36	; 0x24
 8006490:	2101      	movs	r1, #1
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fde0 	bl	8008058 <RCCEx_PLL3_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800649c:	e009      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	75fb      	strb	r3, [r7, #23]
      break;
 80064a2:	e006      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80064a4:	bf00      	nop
 80064a6:	e004      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80064a8:	bf00      	nop
 80064aa:	e002      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80064b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80064b8:	4b73      	ldr	r3, [pc, #460]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c4:	4970      	ldr	r1, [pc, #448]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	650b      	str	r3, [r1, #80]	; 0x50
 80064ca:	e001      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
 80064ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d04b      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e6:	d02e      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80064e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ec:	d828      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d02a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f8:	d822      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80064fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064fe:	d026      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006500:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006504:	d81c      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650a:	d010      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800650c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006510:	d816      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d01d      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800651a:	d111      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fce6 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800652c:	e012      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3324      	adds	r3, #36	; 0x24
 8006532:	2101      	movs	r1, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fd8f 	bl	8008058 <RCCEx_PLL3_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800653e:	e009      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006546:	bf00      	nop
 8006548:	e004      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8006552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800655a:	4b4b      	ldr	r3, [pc, #300]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006568:	4947      	ldr	r1, [pc, #284]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800656a:	4313      	orrs	r3, r2
 800656c:	658b      	str	r3, [r1, #88]	; 0x58
 800656e:	e001      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d02f      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006588:	d00e      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658e:	d814      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006598:	d10f      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659a:	4b3b      	ldr	r3, [pc, #236]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	4a3a      	ldr	r2, [pc, #232]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065a6:	e00c      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3304      	adds	r3, #4
 80065ac:	2101      	movs	r1, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fca0 	bl	8007ef4 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80065b8:	e003      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	75fb      	strb	r3, [r7, #23]
      break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80065c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065c8:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d4:	492c      	ldr	r1, [pc, #176]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	650b      	str	r3, [r1, #80]	; 0x50
 80065da:	e001      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d032      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d81b      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80065f4:	a201      	add	r2, pc, #4	; (adr r2, 80065fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80065f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fa:	bf00      	nop
 80065fc:	08006633 	.word	0x08006633
 8006600:	0800660d 	.word	0x0800660d
 8006604:	0800661b 	.word	0x0800661b
 8006608:	08006633 	.word	0x08006633
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660c:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006618:	e00c      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3304      	adds	r3, #4
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fc67 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800662a:	e003      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
      break;
 8006630:	e000      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800663c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663e:	f023 0203 	bic.w	r2, r3, #3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	4910      	ldr	r1, [pc, #64]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800664c:	e001      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 808a 	beq.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a09      	ldr	r2, [pc, #36]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666c:	f7fa fe5c 	bl	8001328 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006672:	e00d      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006674:	f7fa fe58 	bl	8001328 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d906      	bls.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	75fb      	strb	r3, [r7, #23]
        break;
 8006686:	e009      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006688:	58024400 	.word	0x58024400
 800668c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006690:	4bb9      	ldr	r3, [pc, #740]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0eb      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d166      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066a2:	4bb6      	ldr	r3, [pc, #728]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066ac:	4053      	eors	r3, r2
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066b6:	4bb1      	ldr	r3, [pc, #708]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066c0:	4bae      	ldr	r3, [pc, #696]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	4aad      	ldr	r2, [pc, #692]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066cc:	4bab      	ldr	r3, [pc, #684]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d0:	4aaa      	ldr	r2, [pc, #680]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066d8:	4aa8      	ldr	r2, [pc, #672]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e8:	d115      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ea:	f7fa fe1d 	bl	8001328 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f0:	e00b      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f2:	f7fa fe19 	bl	8001328 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006700:	4293      	cmp	r3, r2
 8006702:	d902      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	75fb      	strb	r3, [r7, #23]
            break;
 8006708:	e005      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800670a:	4b9c      	ldr	r3, [pc, #624]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ed      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d126      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800672a:	d10d      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800672c:	4b93      	ldr	r3, [pc, #588]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800673a:	0919      	lsrs	r1, r3, #4
 800673c:	4b90      	ldr	r3, [pc, #576]	; (8006980 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800673e:	400b      	ands	r3, r1
 8006740:	498e      	ldr	r1, [pc, #568]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
 8006746:	e005      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8006748:	4b8c      	ldr	r3, [pc, #560]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	4a8b      	ldr	r2, [pc, #556]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800674e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006752:	6113      	str	r3, [r2, #16]
 8006754:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800675e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006762:	4986      	ldr	r1, [pc, #536]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006764:	4313      	orrs	r3, r2
 8006766:	670b      	str	r3, [r1, #112]	; 0x70
 8006768:	e004      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	75bb      	strb	r3, [r7, #22]
 800676e:	e001      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d07e      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006784:	2b28      	cmp	r3, #40	; 0x28
 8006786:	d867      	bhi.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	0800685f 	.word	0x0800685f
 8006794:	08006859 	.word	0x08006859
 8006798:	08006859 	.word	0x08006859
 800679c:	08006859 	.word	0x08006859
 80067a0:	08006859 	.word	0x08006859
 80067a4:	08006859 	.word	0x08006859
 80067a8:	08006859 	.word	0x08006859
 80067ac:	08006859 	.word	0x08006859
 80067b0:	08006835 	.word	0x08006835
 80067b4:	08006859 	.word	0x08006859
 80067b8:	08006859 	.word	0x08006859
 80067bc:	08006859 	.word	0x08006859
 80067c0:	08006859 	.word	0x08006859
 80067c4:	08006859 	.word	0x08006859
 80067c8:	08006859 	.word	0x08006859
 80067cc:	08006859 	.word	0x08006859
 80067d0:	08006847 	.word	0x08006847
 80067d4:	08006859 	.word	0x08006859
 80067d8:	08006859 	.word	0x08006859
 80067dc:	08006859 	.word	0x08006859
 80067e0:	08006859 	.word	0x08006859
 80067e4:	08006859 	.word	0x08006859
 80067e8:	08006859 	.word	0x08006859
 80067ec:	08006859 	.word	0x08006859
 80067f0:	0800685f 	.word	0x0800685f
 80067f4:	08006859 	.word	0x08006859
 80067f8:	08006859 	.word	0x08006859
 80067fc:	08006859 	.word	0x08006859
 8006800:	08006859 	.word	0x08006859
 8006804:	08006859 	.word	0x08006859
 8006808:	08006859 	.word	0x08006859
 800680c:	08006859 	.word	0x08006859
 8006810:	0800685f 	.word	0x0800685f
 8006814:	08006859 	.word	0x08006859
 8006818:	08006859 	.word	0x08006859
 800681c:	08006859 	.word	0x08006859
 8006820:	08006859 	.word	0x08006859
 8006824:	08006859 	.word	0x08006859
 8006828:	08006859 	.word	0x08006859
 800682c:	08006859 	.word	0x08006859
 8006830:	0800685f 	.word	0x0800685f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fb5a 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006844:	e00c      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3324      	adds	r3, #36	; 0x24
 800684a:	2101      	movs	r1, #1
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fc03 	bl	8008058 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006856:	e003      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	75fb      	strb	r3, [r7, #23]
      break;
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800685e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006866:	4b45      	ldr	r3, [pc, #276]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006872:	4942      	ldr	r1, [pc, #264]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006874:	4313      	orrs	r3, r2
 8006876:	654b      	str	r3, [r1, #84]	; 0x54
 8006878:	e001      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d037      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	2b05      	cmp	r3, #5
 8006890:	d820      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068db 	.word	0x080068db
 800689c:	080068b1 	.word	0x080068b1
 80068a0:	080068c3 	.word	0x080068c3
 80068a4:	080068db 	.word	0x080068db
 80068a8:	080068db 	.word	0x080068db
 80068ac:	080068db 	.word	0x080068db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3304      	adds	r3, #4
 80068b4:	2101      	movs	r1, #1
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fb1c 	bl	8007ef4 <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068c0:	e00c      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3324      	adds	r3, #36	; 0x24
 80068c6:	2101      	movs	r1, #1
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 fbc5 	bl	8008058 <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068d2:	e003      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	75fb      	strb	r3, [r7, #23]
      break;
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80068da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068e2:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e6:	f023 0207 	bic.w	r2, r3, #7
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4923      	ldr	r1, [pc, #140]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	654b      	str	r3, [r1, #84]	; 0x54
 80068f4:	e001      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d040      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690c:	2b05      	cmp	r3, #5
 800690e:	d821      	bhi.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	0800695b 	.word	0x0800695b
 800691c:	08006931 	.word	0x08006931
 8006920:	08006943 	.word	0x08006943
 8006924:	0800695b 	.word	0x0800695b
 8006928:	0800695b 	.word	0x0800695b
 800692c:	0800695b 	.word	0x0800695b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3304      	adds	r3, #4
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fadc 	bl	8007ef4 <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006940:	e00c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3324      	adds	r3, #36	; 0x24
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fb85 	bl	8008058 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006952:	e003      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	75fb      	strb	r3, [r7, #23]
      break;
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800695a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d110      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	f023 0207 	bic.w	r2, r3, #7
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006970:	4902      	ldr	r1, [pc, #8]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006972:	4313      	orrs	r3, r2
 8006974:	658b      	str	r3, [r1, #88]	; 0x58
 8006976:	e007      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006978:	58024800 	.word	0x58024800
 800697c:	58024400 	.word	0x58024400
 8006980:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
 8006986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d04b      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800699e:	d02e      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x966>
 80069a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069a4:	d828      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d02a      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d822      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80069b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069b6:	d026      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80069b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069bc:	d81c      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c2:	d010      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80069c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c8:	d816      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d01d      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x972>
 80069ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069d2:	d111      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 fa8a 	bl	8007ef4 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069e4:	e012      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3324      	adds	r3, #36	; 0x24
 80069ea:	2102      	movs	r1, #2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fb33 	bl	8008058 <RCCEx_PLL3_Config>
 80069f2:	4603      	mov	r3, r0
 80069f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069f6:	e009      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	75fb      	strb	r3, [r7, #23]
      break;
 80069fc:	e006      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80069fe:	bf00      	nop
 8006a00:	e004      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a12:	4bb2      	ldr	r3, [pc, #712]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	49ae      	ldr	r1, [pc, #696]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	654b      	str	r3, [r1, #84]	; 0x54
 8006a26:	e001      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d04b      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a42:	d02e      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006a44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a48:	d828      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4e:	d02a      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a54:	d822      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5a:	d026      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006a5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a60:	d81c      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a66:	d010      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6c:	d816      	bhi.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01d      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a76:	d111      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f001 fa38 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a88:	e012      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3324      	adds	r3, #36	; 0x24
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fae1 	bl	8008058 <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a9a:	e009      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e004      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ab6:	4b89      	ldr	r3, [pc, #548]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac4:	4985      	ldr	r1, [pc, #532]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8006aca:	e001      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d04b      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ae2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ae6:	d02e      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006ae8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006aec:	d828      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	d02a      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af8:	d822      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006afa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006afe:	d026      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006b00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b04:	d81c      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b0a:	d010      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b10:	d816      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01d      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1a:	d111      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f9e6 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b2c:	e012      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3324      	adds	r3, #36	; 0x24
 8006b32:	2102      	movs	r1, #2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 fa8f 	bl	8008058 <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b3e:	e009      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]
      break;
 8006b44:	e006      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006b46:	bf00      	nop
 8006b48:	e004      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e002      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b5a:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b68:	495c      	ldr	r1, [pc, #368]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8006b6e:	e001      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d018      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	d10a      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3324      	adds	r3, #36	; 0x24
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fa61 	bl	8008058 <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006ba0:	4b4e      	ldr	r3, [pc, #312]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bac:	494b      	ldr	r1, [pc, #300]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0310 	and.w	r3, r3, #16
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01a      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3324      	adds	r3, #36	; 0x24
 8006bce:	2102      	movs	r1, #2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fa41 	bl	8008058 <RCCEx_PLL3_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	493b      	ldr	r1, [pc, #236]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d034      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0a:	d01d      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c10:	d817      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c1a:	d009      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006c1c:	e011      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 f965 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c2e:	e00c      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fa0e 	bl	8008058 <RCCEx_PLL3_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c40:	e003      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
      break;
 8006c46:	e000      	b.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c50:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c5e:	491f      	ldr	r1, [pc, #124]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	658b      	str	r3, [r1, #88]	; 0x58
 8006c64:	e001      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d036      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c80:	d01c      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c86:	d816      	bhi.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c92:	d007      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006c94:	e00f      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ca2:	e00c      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 f9d4 	bl	8008058 <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cba:	e000      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cc4:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd2:	4902      	ldr	r1, [pc, #8]	; (8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	654b      	str	r3, [r1, #84]	; 0x54
 8006cd8:	e004      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d029      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfc:	d007      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006cfe:	e00f      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d00:	4b61      	ldr	r3, [pc, #388]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4a60      	ldr	r2, [pc, #384]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d0c:	e00b      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3304      	adds	r3, #4
 8006d12:	2102      	movs	r1, #2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 f8ed 	bl	8007ef4 <RCCEx_PLL2_Config>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d1e:	e002      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
      break;
 8006d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d2c:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	4953      	ldr	r1, [pc, #332]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d3e:	e001      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3324      	adds	r3, #36	; 0x24
 8006d54:	2102      	movs	r1, #2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f97e 	bl	8008058 <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d030      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7a:	d017      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d80:	d811      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d86:	d013      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d80b      	bhi.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d010      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d96:	d106      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	4a3a      	ldr	r2, [pc, #232]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006da4:	e007      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
      break;
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006dac:	bf00      	nop
 8006dae:	e002      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dbc:	4b32      	ldr	r3, [pc, #200]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc8:	492f      	ldr	r1, [pc, #188]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	654b      	str	r3, [r1, #84]	; 0x54
 8006dce:	e001      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006de0:	4b29      	ldr	r3, [pc, #164]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dec:	4926      	ldr	r1, [pc, #152]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006dfe:	4b22      	ldr	r3, [pc, #136]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0a:	491f      	ldr	r1, [pc, #124]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e1c:	4b1a      	ldr	r3, [pc, #104]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e26:	6113      	str	r3, [r2, #16]
 8006e28:	4b17      	ldr	r3, [pc, #92]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e32:	4915      	ldr	r1, [pc, #84]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da08      	bge.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e40:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	490e      	ldr	r1, [pc, #56]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e6c:	4906      	ldr	r1, [pc, #24]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006e72:	7dbb      	ldrb	r3, [r7, #22]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e000      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	58024400 	.word	0x58024400

08006e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b090      	sub	sp, #64	; 0x40
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9a:	f040 8089 	bne.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e9e:	4b95      	ldr	r3, [pc, #596]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d87d      	bhi.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f11 	.word	0x08006f11
 8006ec0:	08006fa5 	.word	0x08006fa5
 8006ec4:	08006f35 	.word	0x08006f35

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ec8:	4b8a      	ldr	r3, [pc, #552]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 feb8 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ee4:	e3ed      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eea:	e3ea      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eec:	4b81      	ldr	r3, [pc, #516]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efa:	f107 0318 	add.w	r3, r7, #24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fbfe 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f08:	e3db      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0e:	e3d8      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f10:	4b78      	ldr	r3, [pc, #480]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f1e:	f107 030c 	add.w	r3, r7, #12
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fd40 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f2c:	e3c9      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f32:	e3c6      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f34:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f3e:	4b6d      	ldr	r3, [pc, #436]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0304 	and.w	r3, r3, #4
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d10c      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d109      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f50:	4b68      	ldr	r3, [pc, #416]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	08db      	lsrs	r3, r3, #3
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	4a67      	ldr	r2, [pc, #412]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f62:	e01e      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f64:	4b63      	ldr	r3, [pc, #396]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d106      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f78:	d102      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f7a:	4b60      	ldr	r3, [pc, #384]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7e:	e010      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f80:	4b5c      	ldr	r3, [pc, #368]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f94:	d102      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f96:	4b5a      	ldr	r3, [pc, #360]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9a:	e002      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006fa0:	e38f      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006fa2:	e38e      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006fa4:	4b57      	ldr	r3, [pc, #348]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa8:	e38b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fae:	e388      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb6:	f040 80a7 	bne.w	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006fba:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fca:	d054      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fd2:	f200 808b 	bhi.w	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fdc:	f000 8083 	beq.w	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fe6:	f200 8081 	bhi.w	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff0:	d02f      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff8:	d878      	bhi.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d004      	beq.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007006:	d012      	beq.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8007008:	e070      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800700a:	4b3a      	ldr	r3, [pc, #232]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007016:	d107      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fe17 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007026:	e34c      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800702c:	e349      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800703a:	d107      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800703c:	f107 0318 	add.w	r3, r7, #24
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fb5d 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800704a:	e33a      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007050:	e337      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007052:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d107      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007060:	f107 030c 	add.w	r3, r7, #12
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fc9f 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800706e:	e328      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007074:	e325      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007076:	4b1f      	ldr	r3, [pc, #124]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800707e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007080:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b04      	cmp	r3, #4
 800708a:	d10c      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007092:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	08db      	lsrs	r3, r3, #3
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800709e:	fa22 f303 	lsr.w	r3, r2, r3
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a4:	e01e      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070a6:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ba:	d102      	bne.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80070be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c0:	e010      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070ce:	d106      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80070d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d6:	d102      	bne.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80070d8:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80070da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80070e2:	e2ee      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80070e4:	e2ed      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070ea:	e2ea      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070f0:	e2e7      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80070f2:	bf00      	nop
 80070f4:	58024400 	.word	0x58024400
 80070f8:	03d09000 	.word	0x03d09000
 80070fc:	003d0900 	.word	0x003d0900
 8007100:	007a1200 	.word	0x007a1200
 8007104:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710e:	f040 809c 	bne.w	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007112:	4b9e      	ldr	r3, [pc, #632]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800711a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007122:	d054      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800712a:	f200 808b 	bhi.w	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007134:	f000 8083 	beq.w	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800713e:	f200 8081 	bhi.w	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007148:	d02f      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007150:	d878      	bhi.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800715e:	d012      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007160:	e070      	b.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007162:	4b8a      	ldr	r3, [pc, #552]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800716e:	d107      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fd6b 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800717e:	e2a0      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e29d      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007186:	4b81      	ldr	r3, [pc, #516]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007192:	d107      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007194:	f107 0318 	add.w	r3, r7, #24
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fab1 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80071a2:	e28e      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a8:	e28b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071aa:	4b78      	ldr	r3, [pc, #480]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d107      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fbf3 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071c6:	e27c      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071cc:	e279      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071ce:	4b6f      	ldr	r3, [pc, #444]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071d8:	4b6c      	ldr	r3, [pc, #432]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d10c      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071ea:	4b68      	ldr	r3, [pc, #416]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	4a66      	ldr	r2, [pc, #408]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071fc:	e01e      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071fe:	4b63      	ldr	r3, [pc, #396]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d106      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007212:	d102      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007214:	4b5f      	ldr	r3, [pc, #380]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007218:	e010      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800721a:	4b5c      	ldr	r3, [pc, #368]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007226:	d106      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800722e:	d102      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007230:	4b59      	ldr	r3, [pc, #356]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007234:	e002      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800723a:	e242      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800723c:	e241      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800723e:	4b57      	ldr	r3, [pc, #348]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007242:	e23e      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007248:	e23b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007250:	f040 80a6 	bne.w	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007254:	4b4d      	ldr	r3, [pc, #308]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800725c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007264:	d054      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726c:	f200 808b 	bhi.w	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007276:	f000 8083 	beq.w	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007280:	f200 8081 	bhi.w	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728a:	d02f      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007292:	d878      	bhi.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a0:	d012      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 80072a2:	e070      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80072a4:	4b39      	ldr	r3, [pc, #228]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b0:	d107      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fcca 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072c0:	e1ff      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c6:	e1fc      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072c8:	4b30      	ldr	r3, [pc, #192]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072d4:	d107      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072d6:	f107 0318 	add.w	r3, r7, #24
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fa10 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072e4:	e1ed      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ea:	e1ea      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f8:	d107      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072fa:	f107 030c 	add.w	r3, r7, #12
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fb52 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007308:	e1db      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730e:	e1d8      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007318:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800731a:	4b1c      	ldr	r3, [pc, #112]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d10c      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800732c:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	08db      	lsrs	r3, r3, #3
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	4a16      	ldr	r2, [pc, #88]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800733e:	e01e      	b.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007340:	4b12      	ldr	r3, [pc, #72]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734c:	d106      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007354:	d102      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735a:	e010      	b.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800735c:	4b0b      	ldr	r3, [pc, #44]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007368:	d106      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007370:	d102      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007376:	e002      	b.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800737c:	e1a1      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800737e:	e1a0      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007384:	e19d      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800738a:	e19a      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	003d0900 	.word	0x003d0900
 8007398:	007a1200 	.word	0x007a1200
 800739c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073a6:	d173      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80073a8:	4b9a      	ldr	r3, [pc, #616]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b8:	d02f      	beq.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c0:	d863      	bhi.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ce:	d012      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80073d0:	e05b      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d2:	4b90      	ldr	r3, [pc, #576]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073de:	d107      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e0:	f107 0318 	add.w	r3, r7, #24
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f98b 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073ee:	e168      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f4:	e165      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073f6:	4b87      	ldr	r3, [pc, #540]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007402:	d107      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	4618      	mov	r0, r3
 800740a:	f000 facd 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007412:	e156      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007418:	e153      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800741a:	4b7e      	ldr	r3, [pc, #504]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007422:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007424:	4b7b      	ldr	r3, [pc, #492]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b04      	cmp	r3, #4
 800742e:	d10c      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007436:	4b77      	ldr	r3, [pc, #476]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	08db      	lsrs	r3, r3, #3
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	4a75      	ldr	r2, [pc, #468]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007448:	e01e      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800744a:	4b72      	ldr	r3, [pc, #456]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d106      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745e:	d102      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007460:	4b6e      	ldr	r3, [pc, #440]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	e010      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007466:	4b6b      	ldr	r3, [pc, #428]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007472:	d106      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747a:	d102      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800747c:	4b68      	ldr	r3, [pc, #416]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007480:	e002      	b.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007486:	e11c      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007488:	e11b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748e:	e118      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007496:	d133      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007498:	4b5e      	ldr	r3, [pc, #376]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800749a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d004      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ae:	d012      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 80074b0:	e023      	b.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074b2:	4b58      	ldr	r3, [pc, #352]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074be:	d107      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fbc3 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074ce:	e0f8      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074d4:	e0f5      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074d6:	4b4f      	ldr	r3, [pc, #316]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e2:	d107      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074e4:	f107 0318 	add.w	r3, r7, #24
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f909 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074f2:	e0e6      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f8:	e0e3      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fe:	e0e0      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007506:	f040 808d 	bne.w	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800750a:	4b42      	ldr	r3, [pc, #264]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007512:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800751a:	d06b      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007522:	d874      	bhi.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752a:	d056      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007532:	d86c      	bhi.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800753a:	d03b      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007542:	d864      	bhi.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800754a:	d021      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007552:	d85c      	bhi.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007560:	d004      	beq.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007562:	e054      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007564:	f000 f8b6 	bl	80076d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007568:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800756a:	e0aa      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800756c:	4b29      	ldr	r3, [pc, #164]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007578:	d107      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800757a:	f107 0318 	add.w	r3, r7, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f8be 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007588:	e09b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800758e:	e098      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007590:	4b20      	ldr	r3, [pc, #128]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800759c:	d107      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759e:	f107 030c 	add.w	r3, r7, #12
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa00 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075ac:	e089      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b2:	e086      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075b4:	4b17      	ldr	r3, [pc, #92]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d109      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	08db      	lsrs	r3, r3, #3
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	4a13      	ldr	r2, [pc, #76]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80075cc:	fa22 f303 	lsr.w	r3, r2, r3
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075d2:	e076      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075d8:	e073      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d102      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075ec:	e069      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f2:	e066      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075f4:	4b07      	ldr	r3, [pc, #28]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007600:	d102      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8007602:	4b07      	ldr	r3, [pc, #28]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007606:	e05c      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760c:	e059      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007612:	e056      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007614:	58024400 	.word	0x58024400
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762a:	d148      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007634:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800763c:	d02a      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007644:	d838      	bhi.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007652:	d00d      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8007654:	e030      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007656:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007662:	d102      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007668:	e02b      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800766e:	e028      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007670:	4b16      	ldr	r3, [pc, #88]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800767c:	d107      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800767e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fae4 	bl	8007c50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800768c:	e019      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007692:	e016      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800769c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a0:	d107      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f82a 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80076b0:	e007      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076bc:	e001      	b.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3740      	adds	r7, #64	; 0x40
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	58024400 	.word	0x58024400
 80076d0:	007a1200 	.word	0x007a1200

080076d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80076d8:	f7fe fc82 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	4904      	ldr	r1, [pc, #16]	; (80076fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	58024400 	.word	0x58024400
 80076fc:	0800a4d8 	.word	0x0800a4d8

08007700 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007700:	b480      	push	{r7}
 8007702:	b089      	sub	sp, #36	; 0x24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007708:	4ba1      	ldr	r3, [pc, #644]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007712:	4b9f      	ldr	r3, [pc, #636]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	0b1b      	lsrs	r3, r3, #12
 8007718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800771c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800771e:	4b9c      	ldr	r3, [pc, #624]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	091b      	lsrs	r3, r3, #4
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800772a:	4b99      	ldr	r3, [pc, #612]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	08db      	lsrs	r3, r3, #3
 8007730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	fb02 f303 	mul.w	r3, r2, r3
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8111 	beq.w	8007970 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b02      	cmp	r3, #2
 8007752:	f000 8083 	beq.w	800785c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b02      	cmp	r3, #2
 800775a:	f200 80a1 	bhi.w	80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d056      	beq.n	8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800776a:	e099      	b.n	80078a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800776c:	4b88      	ldr	r3, [pc, #544]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d02d      	beq.n	80077d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007778:	4b85      	ldr	r3, [pc, #532]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	08db      	lsrs	r3, r3, #3
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	4a84      	ldr	r2, [pc, #528]	; (8007994 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007784:	fa22 f303 	lsr.w	r3, r2, r3
 8007788:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b7b      	ldr	r3, [pc, #492]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077d2:	e087      	b.n	80078e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800799c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007816:	e065      	b.n	80078e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800782c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a03 	vldr	s12, [r7, #12]
 800783e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800785a:	e043      	b.n	80078e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80079a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b48      	ldr	r3, [pc, #288]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007882:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800789e:	e021      	b.n	80078e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	ee07 3a90 	vmov	s15, r3
 80078a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	4b37      	ldr	r3, [pc, #220]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80078e4:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	0a5b      	lsrs	r3, r3, #9
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	ee17 2a90 	vmov	r2, s15
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007912:	4b1f      	ldr	r3, [pc, #124]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	0c1b      	lsrs	r3, r3, #16
 8007918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800792c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007938:	ee17 2a90 	vmov	r2, s15
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007940:	4b13      	ldr	r3, [pc, #76]	; (8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007944:	0e1b      	lsrs	r3, r3, #24
 8007946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800795a:	edd7 6a07 	vldr	s13, [r7, #28]
 800795e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007966:	ee17 2a90 	vmov	r2, s15
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800796e:	e008      	b.n	8007982 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	609a      	str	r2, [r3, #8]
}
 8007982:	bf00      	nop
 8007984:	3724      	adds	r7, #36	; 0x24
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	58024400 	.word	0x58024400
 8007994:	03d09000 	.word	0x03d09000
 8007998:	46000000 	.word	0x46000000
 800799c:	4c742400 	.word	0x4c742400
 80079a0:	4a742400 	.word	0x4a742400
 80079a4:	4af42400 	.word	0x4af42400

080079a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b089      	sub	sp, #36	; 0x24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079b0:	4ba1      	ldr	r3, [pc, #644]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80079ba:	4b9f      	ldr	r3, [pc, #636]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	0d1b      	lsrs	r3, r3, #20
 80079c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80079c6:	4b9c      	ldr	r3, [pc, #624]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80079d2:	4b99      	ldr	r3, [pc, #612]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	08db      	lsrs	r3, r3, #3
 80079d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	fb02 f303 	mul.w	r3, r2, r3
 80079e2:	ee07 3a90 	vmov	s15, r3
 80079e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8111 	beq.w	8007c18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	f000 8083 	beq.w	8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	f200 80a1 	bhi.w	8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d056      	beq.n	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007a12:	e099      	b.n	8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a14:	4b88      	ldr	r3, [pc, #544]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02d      	beq.n	8007a7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a20:	4b85      	ldr	r3, [pc, #532]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	4a84      	ldr	r2, [pc, #528]	; (8007c3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a4a:	4b7b      	ldr	r3, [pc, #492]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a7a:	e087      	b.n	8007b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8e:	4b6a      	ldr	r3, [pc, #424]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007abe:	e065      	b.n	8007b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad2:	4b59      	ldr	r3, [pc, #356]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b02:	e043      	b.n	8007b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b16:	4b48      	ldr	r3, [pc, #288]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b46:	e021      	b.n	8007b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5a:	4b37      	ldr	r3, [pc, #220]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b8c:	4b2a      	ldr	r3, [pc, #168]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	0a5b      	lsrs	r3, r3, #9
 8007b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb2:	ee17 2a90 	vmov	r2, s15
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007bba:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be0:	ee17 2a90 	vmov	r2, s15
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007be8:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c0e:	ee17 2a90 	vmov	r2, s15
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c16:	e008      	b.n	8007c2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	609a      	str	r2, [r3, #8]
}
 8007c2a:	bf00      	nop
 8007c2c:	3724      	adds	r7, #36	; 0x24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	58024400 	.word	0x58024400
 8007c3c:	03d09000 	.word	0x03d09000
 8007c40:	46000000 	.word	0x46000000
 8007c44:	4c742400 	.word	0x4c742400
 8007c48:	4a742400 	.word	0x4a742400
 8007c4c:	4af42400 	.word	0x4af42400

08007c50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c58:	4ba0      	ldr	r3, [pc, #640]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007c62:	4b9e      	ldr	r3, [pc, #632]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007c6e:	4b9b      	ldr	r3, [pc, #620]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c78:	4b98      	ldr	r3, [pc, #608]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	08db      	lsrs	r3, r3, #3
 8007c7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8111 	beq.w	8007ebe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	f000 8083 	beq.w	8007daa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	f200 80a1 	bhi.w	8007dee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d056      	beq.n	8007d66 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007cb8:	e099      	b.n	8007dee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cba:	4b88      	ldr	r3, [pc, #544]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02d      	beq.n	8007d22 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cc6:	4b85      	ldr	r3, [pc, #532]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a83      	ldr	r2, [pc, #524]	; (8007ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf0:	4b7a      	ldr	r3, [pc, #488]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d20:	e087      	b.n	8007e32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d34:	4b69      	ldr	r3, [pc, #420]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d64:	e065      	b.n	8007e32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007eec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d78:	4b58      	ldr	r3, [pc, #352]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007da8:	e043      	b.n	8007e32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbc:	4b47      	ldr	r3, [pc, #284]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dec:	e021      	b.n	8007e32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007ee8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e00:	4b36      	ldr	r3, [pc, #216]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e30:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007e32:	4b2a      	ldr	r3, [pc, #168]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	0a5b      	lsrs	r3, r3, #9
 8007e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e58:	ee17 2a90 	vmov	r2, s15
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e86:	ee17 2a90 	vmov	r2, s15
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	0e1b      	lsrs	r3, r3, #24
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb4:	ee17 2a90 	vmov	r2, s15
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	609a      	str	r2, [r3, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	3724      	adds	r7, #36	; 0x24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	03d09000 	.word	0x03d09000
 8007ee4:	46000000 	.word	0x46000000
 8007ee8:	4c742400 	.word	0x4c742400
 8007eec:	4a742400 	.word	0x4a742400
 8007ef0:	4af42400 	.word	0x4af42400

08007ef4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f02:	4b53      	ldr	r3, [pc, #332]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d101      	bne.n	8007f12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e099      	b.n	8008046 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f12:	4b4f      	ldr	r3, [pc, #316]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a4e      	ldr	r2, [pc, #312]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f1e:	f7f9 fa03 	bl	8001328 <HAL_GetTick>
 8007f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f24:	e008      	b.n	8007f38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f26:	f7f9 f9ff 	bl	8001328 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d901      	bls.n	8007f38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e086      	b.n	8008046 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f38:	4b45      	ldr	r3, [pc, #276]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1f0      	bne.n	8007f26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f44:	4b42      	ldr	r3, [pc, #264]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	031b      	lsls	r3, r3, #12
 8007f52:	493f      	ldr	r1, [pc, #252]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	628b      	str	r3, [r1, #40]	; 0x28
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	025b      	lsls	r3, r3, #9
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	061b      	lsls	r3, r3, #24
 8007f84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f88:	4931      	ldr	r1, [pc, #196]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f8e:	4b30      	ldr	r3, [pc, #192]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	492d      	ldr	r1, [pc, #180]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fa0:	4b2b      	ldr	r3, [pc, #172]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	f023 0220 	bic.w	r2, r3, #32
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	4928      	ldr	r1, [pc, #160]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fb2:	4b27      	ldr	r3, [pc, #156]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	4a26      	ldr	r2, [pc, #152]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fb8:	f023 0310 	bic.w	r3, r3, #16
 8007fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007fbe:	4b24      	ldr	r3, [pc, #144]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <RCCEx_PLL2_Config+0x160>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	69d2      	ldr	r2, [r2, #28]
 8007fca:	00d2      	lsls	r2, r2, #3
 8007fcc:	4920      	ldr	r1, [pc, #128]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fd2:	4b1f      	ldr	r3, [pc, #124]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4a1e      	ldr	r2, [pc, #120]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	f043 0310 	orr.w	r3, r3, #16
 8007fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fe4:	4b1a      	ldr	r3, [pc, #104]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a19      	ldr	r2, [pc, #100]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ff0:	e00f      	b.n	8008012 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d106      	bne.n	8008006 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ff8:	4b15      	ldr	r3, [pc, #84]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a14      	ldr	r2, [pc, #80]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008004:	e005      	b.n	8008012 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008006:	4b12      	ldr	r3, [pc, #72]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8008008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800a:	4a11      	ldr	r2, [pc, #68]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 800800c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008010:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a0e      	ldr	r2, [pc, #56]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 8008018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800801c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800801e:	f7f9 f983 	bl	8001328 <HAL_GetTick>
 8008022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008024:	e008      	b.n	8008038 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008026:	f7f9 f97f 	bl	8001328 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e006      	b.n	8008046 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008038:	4b05      	ldr	r3, [pc, #20]	; (8008050 <RCCEx_PLL2_Config+0x15c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0f0      	beq.n	8008026 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	58024400 	.word	0x58024400
 8008054:	ffff0007 	.word	0xffff0007

08008058 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008066:	4b53      	ldr	r3, [pc, #332]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d101      	bne.n	8008076 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e099      	b.n	80081aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008076:	4b4f      	ldr	r3, [pc, #316]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a4e      	ldr	r2, [pc, #312]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800807c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008082:	f7f9 f951 	bl	8001328 <HAL_GetTick>
 8008086:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008088:	e008      	b.n	800809c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800808a:	f7f9 f94d 	bl	8001328 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e086      	b.n	80081aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800809c:	4b45      	ldr	r3, [pc, #276]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f0      	bne.n	800808a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	493f      	ldr	r1, [pc, #252]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	628b      	str	r3, [r1, #40]	; 0x28
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	025b      	lsls	r3, r3, #9
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	431a      	orrs	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	041b      	lsls	r3, r3, #16
 80080da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	061b      	lsls	r3, r3, #24
 80080e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080ec:	4931      	ldr	r1, [pc, #196]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080f2:	4b30      	ldr	r3, [pc, #192]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	492d      	ldr	r1, [pc, #180]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008104:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	4928      	ldr	r1, [pc, #160]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008112:	4313      	orrs	r3, r2
 8008114:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008116:	4b27      	ldr	r3, [pc, #156]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	4a26      	ldr	r2, [pc, #152]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800811c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008122:	4b24      	ldr	r3, [pc, #144]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008126:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <RCCEx_PLL3_Config+0x160>)
 8008128:	4013      	ands	r3, r2
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	69d2      	ldr	r2, [r2, #28]
 800812e:	00d2      	lsls	r2, r2, #3
 8008130:	4920      	ldr	r1, [pc, #128]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008132:	4313      	orrs	r3, r2
 8008134:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008136:	4b1f      	ldr	r3, [pc, #124]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a1e      	ldr	r2, [pc, #120]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800813c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008148:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800814e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008154:	e00f      	b.n	8008176 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d106      	bne.n	800816a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800815c:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a14      	ldr	r2, [pc, #80]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008168:	e005      	b.n	8008176 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008176:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a0e      	ldr	r2, [pc, #56]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800817c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008182:	f7f9 f8d1 	bl	8001328 <HAL_GetTick>
 8008186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008188:	e008      	b.n	800819c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800818a:	f7f9 f8cd 	bl	8001328 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e006      	b.n	80081aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800819c:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <RCCEx_PLL3_Config+0x15c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	58024400 	.word	0x58024400
 80081b8:	ffff0007 	.word	0xffff0007

080081bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e049      	b.n	8008262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7f8 fe44 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f000 fbec 	bl	80089d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	d001      	beq.n	8008284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e05e      	b.n	8008342 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0201 	orr.w	r2, r2, #1
 800829a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2b      	ldr	r2, [pc, #172]	; (8008350 <HAL_TIM_Base_Start_IT+0xe4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d02c      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ae:	d027      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a27      	ldr	r2, [pc, #156]	; (8008354 <HAL_TIM_Base_Start_IT+0xe8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d022      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a26      	ldr	r2, [pc, #152]	; (8008358 <HAL_TIM_Base_Start_IT+0xec>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d01d      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a24      	ldr	r2, [pc, #144]	; (800835c <HAL_TIM_Base_Start_IT+0xf0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d018      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a23      	ldr	r2, [pc, #140]	; (8008360 <HAL_TIM_Base_Start_IT+0xf4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d013      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a21      	ldr	r2, [pc, #132]	; (8008364 <HAL_TIM_Base_Start_IT+0xf8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00e      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a20      	ldr	r2, [pc, #128]	; (8008368 <HAL_TIM_Base_Start_IT+0xfc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d009      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1e      	ldr	r2, [pc, #120]	; (800836c <HAL_TIM_Base_Start_IT+0x100>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d004      	beq.n	8008300 <HAL_TIM_Base_Start_IT+0x94>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1d      	ldr	r2, [pc, #116]	; (8008370 <HAL_TIM_Base_Start_IT+0x104>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d115      	bne.n	800832c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	4b1b      	ldr	r3, [pc, #108]	; (8008374 <HAL_TIM_Base_Start_IT+0x108>)
 8008308:	4013      	ands	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b06      	cmp	r3, #6
 8008310:	d015      	beq.n	800833e <HAL_TIM_Base_Start_IT+0xd2>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008318:	d011      	beq.n	800833e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	e008      	b.n	800833e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e000      	b.n	8008340 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40010000 	.word	0x40010000
 8008354:	40000400 	.word	0x40000400
 8008358:	40000800 	.word	0x40000800
 800835c:	40000c00 	.word	0x40000c00
 8008360:	40010400 	.word	0x40010400
 8008364:	40001800 	.word	0x40001800
 8008368:	40014000 	.word	0x40014000
 800836c:	4000e000 	.word	0x4000e000
 8008370:	4000e400 	.word	0x4000e400
 8008374:	00010007 	.word	0x00010007

08008378 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e049      	b.n	800841e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f841 	bl	8008426 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3304      	adds	r3, #4
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f000 fb0e 	bl	80089d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d122      	bne.n	8008496 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d11b      	bne.n	8008496 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f06f 0202 	mvn.w	r2, #2
 8008466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0303 	and.w	r3, r3, #3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa8d 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 8008482:	e005      	b.n	8008490 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa7f 	bl	8008988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa90 	bl	80089b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d122      	bne.n	80084ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0304 	and.w	r3, r3, #4
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d11b      	bne.n	80084ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f06f 0204 	mvn.w	r2, #4
 80084ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fa63 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 80084d6:	e005      	b.n	80084e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fa55 	bl	8008988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa66 	bl	80089b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d122      	bne.n	800853e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b08      	cmp	r3, #8
 8008504:	d11b      	bne.n	800853e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f06f 0208 	mvn.w	r2, #8
 800850e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa39 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 800852a:	e005      	b.n	8008538 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fa2b 	bl	8008988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa3c 	bl	80089b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b10      	cmp	r3, #16
 800854a:	d122      	bne.n	8008592 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b10      	cmp	r3, #16
 8008558:	d11b      	bne.n	8008592 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f06f 0210 	mvn.w	r2, #16
 8008562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2208      	movs	r2, #8
 8008568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fa0f 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 800857e:	e005      	b.n	800858c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fa01 	bl	8008988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa12 	bl	80089b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10e      	bne.n	80085be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f003 0301 	and.w	r3, r3, #1
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d107      	bne.n	80085be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f06f 0201 	mvn.w	r2, #1
 80085b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7f8 f82b 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c8:	2b80      	cmp	r3, #128	; 0x80
 80085ca:	d10e      	bne.n	80085ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d107      	bne.n	80085ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fd17 	bl	8009018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f8:	d10e      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d107      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fd0a 	bl	800902c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d10e      	bne.n	8008644 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d107      	bne.n	8008644 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800863c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f9c0 	bl	80089c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b20      	cmp	r3, #32
 8008650:	d10e      	bne.n	8008670 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d107      	bne.n	8008670 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0220 	mvn.w	r2, #32
 8008668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fcca 	bl	8009004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_TIM_IC_ConfigChannel+0x1a>
 800868e:	2302      	movs	r3, #2
 8008690:	e082      	b.n	8008798 <HAL_TIM_IC_ConfigChannel+0x120>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11b      	bne.n	80086d8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	6819      	ldr	r1, [r3, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f000 fa38 	bl	8008b24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 020c 	bic.w	r2, r2, #12
 80086c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6999      	ldr	r1, [r3, #24]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	619a      	str	r2, [r3, #24]
 80086d6:	e05a      	b.n	800878e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b04      	cmp	r3, #4
 80086dc:	d11c      	bne.n	8008718 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	6819      	ldr	r1, [r3, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f000 fac8 	bl	8008c82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699a      	ldr	r2, [r3, #24]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008700:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6999      	ldr	r1, [r3, #24]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	021a      	lsls	r2, r3, #8
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	619a      	str	r2, [r3, #24]
 8008716:	e03a      	b.n	800878e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b08      	cmp	r3, #8
 800871c:	d11b      	bne.n	8008756 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6819      	ldr	r1, [r3, #0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f000 fb15 	bl	8008d5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 020c 	bic.w	r2, r2, #12
 8008740:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69d9      	ldr	r1, [r3, #28]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	61da      	str	r2, [r3, #28]
 8008754:	e01b      	b.n	800878e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6819      	ldr	r1, [r3, #0]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f000 fb35 	bl	8008dd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008778:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69d9      	ldr	r1, [r3, #28]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	021a      	lsls	r2, r3, #8
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_TIM_ConfigClockSource+0x18>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e0db      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x1d0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4b69      	ldr	r3, [pc, #420]	; (8008978 <HAL_TIM_ConfigClockSource+0x1d8>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a63      	ldr	r2, [pc, #396]	; (800897c <HAL_TIM_ConfigClockSource+0x1dc>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f000 80a9 	beq.w	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 80087f4:	4a61      	ldr	r2, [pc, #388]	; (800897c <HAL_TIM_ConfigClockSource+0x1dc>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	f200 80ae 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 80087fc:	4a60      	ldr	r2, [pc, #384]	; (8008980 <HAL_TIM_ConfigClockSource+0x1e0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	f000 80a1 	beq.w	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 8008804:	4a5e      	ldr	r2, [pc, #376]	; (8008980 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	f200 80a6 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 800880c:	4a5d      	ldr	r2, [pc, #372]	; (8008984 <HAL_TIM_ConfigClockSource+0x1e4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	f000 8099 	beq.w	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 8008814:	4a5b      	ldr	r2, [pc, #364]	; (8008984 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008816:	4293      	cmp	r3, r2
 8008818:	f200 809e 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 800881c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008820:	f000 8091 	beq.w	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 8008824:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008828:	f200 8096 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 800882c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008830:	f000 8089 	beq.w	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 8008834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008838:	f200 808e 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 800883c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008840:	d03e      	beq.n	80088c0 <HAL_TIM_ConfigClockSource+0x120>
 8008842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008846:	f200 8087 	bhi.w	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	f000 8085 	beq.w	800895c <HAL_TIM_ConfigClockSource+0x1bc>
 8008852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008856:	d87f      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008858:	2b70      	cmp	r3, #112	; 0x70
 800885a:	d01a      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0xf2>
 800885c:	2b70      	cmp	r3, #112	; 0x70
 800885e:	d87b      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008860:	2b60      	cmp	r3, #96	; 0x60
 8008862:	d050      	beq.n	8008906 <HAL_TIM_ConfigClockSource+0x166>
 8008864:	2b60      	cmp	r3, #96	; 0x60
 8008866:	d877      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008868:	2b50      	cmp	r3, #80	; 0x50
 800886a:	d03c      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0x146>
 800886c:	2b50      	cmp	r3, #80	; 0x50
 800886e:	d873      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d058      	beq.n	8008926 <HAL_TIM_ConfigClockSource+0x186>
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d86f      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d064      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d86b      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008880:	2b20      	cmp	r3, #32
 8008882:	d060      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d867      	bhi.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
 8008888:	2b00      	cmp	r3, #0
 800888a:	d05c      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
 800888c:	2b10      	cmp	r3, #16
 800888e:	d05a      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008890:	e062      	b.n	8008958 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6899      	ldr	r1, [r3, #8]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f000 faf3 	bl	8008e8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	609a      	str	r2, [r3, #8]
      break;
 80088be:	e04e      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6899      	ldr	r1, [r3, #8]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f000 fadc 	bl	8008e8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088e2:	609a      	str	r2, [r3, #8]
      break;
 80088e4:	e03b      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	6859      	ldr	r1, [r3, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f000 f996 	bl	8008c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2150      	movs	r1, #80	; 0x50
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 faa6 	bl	8008e50 <TIM_ITRx_SetConfig>
      break;
 8008904:	e02b      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6859      	ldr	r1, [r3, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	461a      	mov	r2, r3
 8008914:	f000 f9f2 	bl	8008cfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2160      	movs	r1, #96	; 0x60
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fa96 	bl	8008e50 <TIM_ITRx_SetConfig>
      break;
 8008924:	e01b      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6818      	ldr	r0, [r3, #0]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	6859      	ldr	r1, [r3, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	461a      	mov	r2, r3
 8008934:	f000 f976 	bl	8008c24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fa86 	bl	8008e50 <TIM_ITRx_SetConfig>
      break;
 8008944:	e00b      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f000 fa7d 	bl	8008e50 <TIM_ITRx_SetConfig>
        break;
 8008956:	e002      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008958:	bf00      	nop
 800895a:	e000      	b.n	800895e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800895c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	ffceff88 	.word	0xffceff88
 800897c:	00100040 	.word	0x00100040
 8008980:	00100030 	.word	0x00100030
 8008984:	00100020 	.word	0x00100020

08008988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a44      	ldr	r2, [pc, #272]	; (8008afc <TIM_Base_SetConfig+0x124>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d013      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f6:	d00f      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a41      	ldr	r2, [pc, #260]	; (8008b00 <TIM_Base_SetConfig+0x128>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d00b      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a40      	ldr	r2, [pc, #256]	; (8008b04 <TIM_Base_SetConfig+0x12c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d007      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a3f      	ldr	r2, [pc, #252]	; (8008b08 <TIM_Base_SetConfig+0x130>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_Base_SetConfig+0x40>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a3e      	ldr	r2, [pc, #248]	; (8008b0c <TIM_Base_SetConfig+0x134>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d108      	bne.n	8008a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a33      	ldr	r2, [pc, #204]	; (8008afc <TIM_Base_SetConfig+0x124>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d027      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a38:	d023      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a30      	ldr	r2, [pc, #192]	; (8008b00 <TIM_Base_SetConfig+0x128>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d01f      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a2f      	ldr	r2, [pc, #188]	; (8008b04 <TIM_Base_SetConfig+0x12c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d01b      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a2e      	ldr	r2, [pc, #184]	; (8008b08 <TIM_Base_SetConfig+0x130>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d017      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2d      	ldr	r2, [pc, #180]	; (8008b0c <TIM_Base_SetConfig+0x134>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d013      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2c      	ldr	r2, [pc, #176]	; (8008b10 <TIM_Base_SetConfig+0x138>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00f      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a2b      	ldr	r2, [pc, #172]	; (8008b14 <TIM_Base_SetConfig+0x13c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00b      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <TIM_Base_SetConfig+0x140>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d007      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a29      	ldr	r2, [pc, #164]	; (8008b1c <TIM_Base_SetConfig+0x144>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_Base_SetConfig+0xaa>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a28      	ldr	r2, [pc, #160]	; (8008b20 <TIM_Base_SetConfig+0x148>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d108      	bne.n	8008a94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a10      	ldr	r2, [pc, #64]	; (8008afc <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_Base_SetConfig+0x108>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <TIM_Base_SetConfig+0x134>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_Base_SetConfig+0x108>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <TIM_Base_SetConfig+0x138>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_Base_SetConfig+0x108>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a10      	ldr	r2, [pc, #64]	; (8008b14 <TIM_Base_SetConfig+0x13c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_Base_SetConfig+0x108>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a0f      	ldr	r2, [pc, #60]	; (8008b18 <TIM_Base_SetConfig+0x140>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d103      	bne.n	8008ae8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	615a      	str	r2, [r3, #20]
}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40010000 	.word	0x40010000
 8008b00:	40000400 	.word	0x40000400
 8008b04:	40000800 	.word	0x40000800
 8008b08:	40000c00 	.word	0x40000c00
 8008b0c:	40010400 	.word	0x40010400
 8008b10:	40014000 	.word	0x40014000
 8008b14:	40014400 	.word	0x40014400
 8008b18:	40014800 	.word	0x40014800
 8008b1c:	4000e000 	.word	0x4000e000
 8008b20:	4000e400 	.word	0x4000e400

08008b24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f023 0201 	bic.w	r2, r3, #1
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	; (8008c00 <TIM_TI1_SetConfig+0xdc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d023      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b58:	d01f      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4a29      	ldr	r2, [pc, #164]	; (8008c04 <TIM_TI1_SetConfig+0xe0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d01b      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4a28      	ldr	r2, [pc, #160]	; (8008c08 <TIM_TI1_SetConfig+0xe4>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d017      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4a27      	ldr	r2, [pc, #156]	; (8008c0c <TIM_TI1_SetConfig+0xe8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d013      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a26      	ldr	r2, [pc, #152]	; (8008c10 <TIM_TI1_SetConfig+0xec>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00f      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4a25      	ldr	r2, [pc, #148]	; (8008c14 <TIM_TI1_SetConfig+0xf0>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00b      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4a24      	ldr	r2, [pc, #144]	; (8008c18 <TIM_TI1_SetConfig+0xf4>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d007      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a23      	ldr	r2, [pc, #140]	; (8008c1c <TIM_TI1_SetConfig+0xf8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_TI1_SetConfig+0x76>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4a22      	ldr	r2, [pc, #136]	; (8008c20 <TIM_TI1_SetConfig+0xfc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d101      	bne.n	8008b9e <TIM_TI1_SetConfig+0x7a>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <TIM_TI1_SetConfig+0x7c>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d008      	beq.n	8008bb6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	e003      	b.n	8008bbe <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f043 0301 	orr.w	r3, r3, #1
 8008bbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f023 030a 	bic.w	r3, r3, #10
 8008bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	f003 030a 	and.w	r3, r3, #10
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	621a      	str	r2, [r3, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40010400 	.word	0x40010400
 8008c14:	40001800 	.word	0x40001800
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	4000e000 	.word	0x4000e000
 8008c20:	4000e400 	.word	0x4000e400

08008c24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	f023 0201 	bic.w	r2, r3, #1
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f023 030a 	bic.w	r3, r3, #10
 8008c60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	621a      	str	r2, [r3, #32]
}
 8008c76:	bf00      	nop
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b087      	sub	sp, #28
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	f023 0210 	bic.w	r2, r3, #16
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	031b      	lsls	r3, r3, #12
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	621a      	str	r2, [r3, #32]
}
 8008cf0:	bf00      	nop
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	f023 0210 	bic.w	r2, r3, #16
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	031b      	lsls	r3, r3, #12
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	621a      	str	r2, [r3, #32]
}
 8008d50:	bf00      	nop
 8008d52:	371c      	adds	r7, #28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f023 0303 	bic.w	r3, r3, #3
 8008d88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	697a      	ldr	r2, [r7, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008dac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	621a      	str	r2, [r3, #32]
}
 8008dc8:	bf00      	nop
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	021b      	lsls	r3, r3, #8
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	031b      	lsls	r3, r3, #12
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	031b      	lsls	r3, r3, #12
 8008e2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <TIM_ITRx_SetConfig+0x38>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f043 0307 	orr.w	r3, r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	609a      	str	r2, [r3, #8]
}
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	ffcfff8f 	.word	0xffcfff8f

08008e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	021a      	lsls	r2, r3, #8
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	609a      	str	r2, [r3, #8]
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e077      	b.n	8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a35      	ldr	r2, [pc, #212]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d004      	beq.n	8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a34      	ldr	r2, [pc, #208]	; (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d108      	bne.n	8008f2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a25      	ldr	r2, [pc, #148]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d02c      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f56:	d027      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a22      	ldr	r2, [pc, #136]	; (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d022      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a21      	ldr	r2, [pc, #132]	; (8008fec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d01d      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d018      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a1b      	ldr	r2, [pc, #108]	; (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00e      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a1a      	ldr	r2, [pc, #104]	; (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d009      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a18      	ldr	r2, [pc, #96]	; (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a17      	ldr	r2, [pc, #92]	; (8009000 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d10c      	bne.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	40010000 	.word	0x40010000
 8008fe4:	40010400 	.word	0x40010400
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40000800 	.word	0x40000800
 8008ff0:	40000c00 	.word	0x40000c00
 8008ff4:	40001800 	.word	0x40001800
 8008ff8:	40014000 	.word	0x40014000
 8008ffc:	4000e000 	.word	0x4000e000
 8009000:	4000e400 	.word	0x4000e400

08009004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e042      	b.n	80090d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7f7 ff55 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2224      	movs	r2, #36	; 0x24
 800906e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0201 	bic.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f8c2 	bl	800920c <UART_SetConfig>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d101      	bne.n	8009092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e022      	b.n	80090d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 ff14 	bl	8009ec8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 ff9b 	bl	800a00c <UART_CheckIdleState>
 80090d6:	4603      	mov	r3, r0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08a      	sub	sp, #40	; 0x28
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	4613      	mov	r3, r2
 80090ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	f040 8083 	bne.w	8009202 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_UART_Transmit+0x28>
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e07b      	b.n	8009204 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009112:	2b01      	cmp	r3, #1
 8009114:	d101      	bne.n	800911a <HAL_UART_Transmit+0x3a>
 8009116:	2302      	movs	r3, #2
 8009118:	e074      	b.n	8009204 <HAL_UART_Transmit+0x124>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2221      	movs	r2, #33	; 0x21
 800912e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009132:	f7f8 f8f9 	bl	8001328 <HAL_GetTick>
 8009136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	88fa      	ldrh	r2, [r7, #6]
 800913c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	88fa      	ldrh	r2, [r7, #6]
 8009144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009150:	d108      	bne.n	8009164 <HAL_UART_Transmit+0x84>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	e003      	b.n	800916c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009168:	2300      	movs	r3, #0
 800916a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009174:	e02c      	b.n	80091d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	2180      	movs	r1, #128	; 0x80
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 ff8e 	bl	800a0a2 <UART_WaitOnFlagUntilTimeout>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e039      	b.n	8009204 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	3302      	adds	r3, #2
 80091aa:	61bb      	str	r3, [r7, #24]
 80091ac:	e007      	b.n	80091be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	3301      	adds	r3, #1
 80091bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1cc      	bne.n	8009176 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2140      	movs	r1, #64	; 0x40
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 ff5b 	bl	800a0a2 <UART_WaitOnFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e006      	b.n	8009204 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3720      	adds	r7, #32
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800920c:	b5b0      	push	{r4, r5, r7, lr}
 800920e:	b08e      	sub	sp, #56	; 0x38
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	431a      	orrs	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	4313      	orrs	r3, r2
 8009230:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	4bbf      	ldr	r3, [pc, #764]	; (8009538 <UART_SetConfig+0x32c>)
 800923a:	4013      	ands	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009242:	430b      	orrs	r3, r1
 8009244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4ab5      	ldr	r2, [pc, #724]	; (800953c <UART_SetConfig+0x330>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d004      	beq.n	8009276 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009272:	4313      	orrs	r3, r2
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	4bb0      	ldr	r3, [pc, #704]	; (8009540 <UART_SetConfig+0x334>)
 800927e:	4013      	ands	r3, r2
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009286:	430b      	orrs	r3, r1
 8009288:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	f023 010f 	bic.w	r1, r3, #15
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4aa7      	ldr	r2, [pc, #668]	; (8009544 <UART_SetConfig+0x338>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d176      	bne.n	8009398 <UART_SetConfig+0x18c>
 80092aa:	4ba7      	ldr	r3, [pc, #668]	; (8009548 <UART_SetConfig+0x33c>)
 80092ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092b2:	2b28      	cmp	r3, #40	; 0x28
 80092b4:	d86c      	bhi.n	8009390 <UART_SetConfig+0x184>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <UART_SetConfig+0xb0>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	08009361 	.word	0x08009361
 80092c0:	08009391 	.word	0x08009391
 80092c4:	08009391 	.word	0x08009391
 80092c8:	08009391 	.word	0x08009391
 80092cc:	08009391 	.word	0x08009391
 80092d0:	08009391 	.word	0x08009391
 80092d4:	08009391 	.word	0x08009391
 80092d8:	08009391 	.word	0x08009391
 80092dc:	08009369 	.word	0x08009369
 80092e0:	08009391 	.word	0x08009391
 80092e4:	08009391 	.word	0x08009391
 80092e8:	08009391 	.word	0x08009391
 80092ec:	08009391 	.word	0x08009391
 80092f0:	08009391 	.word	0x08009391
 80092f4:	08009391 	.word	0x08009391
 80092f8:	08009391 	.word	0x08009391
 80092fc:	08009371 	.word	0x08009371
 8009300:	08009391 	.word	0x08009391
 8009304:	08009391 	.word	0x08009391
 8009308:	08009391 	.word	0x08009391
 800930c:	08009391 	.word	0x08009391
 8009310:	08009391 	.word	0x08009391
 8009314:	08009391 	.word	0x08009391
 8009318:	08009391 	.word	0x08009391
 800931c:	08009379 	.word	0x08009379
 8009320:	08009391 	.word	0x08009391
 8009324:	08009391 	.word	0x08009391
 8009328:	08009391 	.word	0x08009391
 800932c:	08009391 	.word	0x08009391
 8009330:	08009391 	.word	0x08009391
 8009334:	08009391 	.word	0x08009391
 8009338:	08009391 	.word	0x08009391
 800933c:	08009381 	.word	0x08009381
 8009340:	08009391 	.word	0x08009391
 8009344:	08009391 	.word	0x08009391
 8009348:	08009391 	.word	0x08009391
 800934c:	08009391 	.word	0x08009391
 8009350:	08009391 	.word	0x08009391
 8009354:	08009391 	.word	0x08009391
 8009358:	08009391 	.word	0x08009391
 800935c:	08009389 	.word	0x08009389
 8009360:	2301      	movs	r3, #1
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e326      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e322      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e31e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	e31a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009380:	2320      	movs	r3, #32
 8009382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009386:	e316      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009388:	2340      	movs	r3, #64	; 0x40
 800938a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938e:	e312      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009390:	2380      	movs	r3, #128	; 0x80
 8009392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009396:	e30e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a6b      	ldr	r2, [pc, #428]	; (800954c <UART_SetConfig+0x340>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d130      	bne.n	8009404 <UART_SetConfig+0x1f8>
 80093a2:	4b69      	ldr	r3, [pc, #420]	; (8009548 <UART_SetConfig+0x33c>)
 80093a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b05      	cmp	r3, #5
 80093ac:	d826      	bhi.n	80093fc <UART_SetConfig+0x1f0>
 80093ae:	a201      	add	r2, pc, #4	; (adr r2, 80093b4 <UART_SetConfig+0x1a8>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093cd 	.word	0x080093cd
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093dd 	.word	0x080093dd
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e2f0      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093d4:	2304      	movs	r3, #4
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e2ec      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093dc:	2308      	movs	r3, #8
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e2e8      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093e4:	2310      	movs	r3, #16
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e2e4      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093ec:	2320      	movs	r3, #32
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e2e0      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e2dc      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e2d8      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a51      	ldr	r2, [pc, #324]	; (8009550 <UART_SetConfig+0x344>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d130      	bne.n	8009470 <UART_SetConfig+0x264>
 800940e:	4b4e      	ldr	r3, [pc, #312]	; (8009548 <UART_SetConfig+0x33c>)
 8009410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b05      	cmp	r3, #5
 8009418:	d826      	bhi.n	8009468 <UART_SetConfig+0x25c>
 800941a:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <UART_SetConfig+0x214>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009439 	.word	0x08009439
 8009424:	08009441 	.word	0x08009441
 8009428:	08009449 	.word	0x08009449
 800942c:	08009451 	.word	0x08009451
 8009430:	08009459 	.word	0x08009459
 8009434:	08009461 	.word	0x08009461
 8009438:	2300      	movs	r3, #0
 800943a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943e:	e2ba      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009440:	2304      	movs	r3, #4
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e2b6      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009448:	2308      	movs	r3, #8
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e2b2      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009450:	2310      	movs	r3, #16
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e2ae      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009458:	2320      	movs	r3, #32
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e2aa      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009460:	2340      	movs	r3, #64	; 0x40
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	e2a6      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009468:	2380      	movs	r3, #128	; 0x80
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946e:	e2a2      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a37      	ldr	r2, [pc, #220]	; (8009554 <UART_SetConfig+0x348>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d130      	bne.n	80094dc <UART_SetConfig+0x2d0>
 800947a:	4b33      	ldr	r3, [pc, #204]	; (8009548 <UART_SetConfig+0x33c>)
 800947c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b05      	cmp	r3, #5
 8009484:	d826      	bhi.n	80094d4 <UART_SetConfig+0x2c8>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0x280>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094a5 	.word	0x080094a5
 8009490:	080094ad 	.word	0x080094ad
 8009494:	080094b5 	.word	0x080094b5
 8009498:	080094bd 	.word	0x080094bd
 800949c:	080094c5 	.word	0x080094c5
 80094a0:	080094cd 	.word	0x080094cd
 80094a4:	2300      	movs	r3, #0
 80094a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094aa:	e284      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b2:	e280      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e27c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e278      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094c4:	2320      	movs	r3, #32
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e274      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094cc:	2340      	movs	r3, #64	; 0x40
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	e270      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094d4:	2380      	movs	r3, #128	; 0x80
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e26c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1d      	ldr	r2, [pc, #116]	; (8009558 <UART_SetConfig+0x34c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d142      	bne.n	800956c <UART_SetConfig+0x360>
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <UART_SetConfig+0x33c>)
 80094e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d838      	bhi.n	8009564 <UART_SetConfig+0x358>
 80094f2:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <UART_SetConfig+0x2ec>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009519 	.word	0x08009519
 8009500:	08009521 	.word	0x08009521
 8009504:	08009529 	.word	0x08009529
 8009508:	08009531 	.word	0x08009531
 800950c:	0800955d 	.word	0x0800955d
 8009510:	2300      	movs	r3, #0
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	e24e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009518:	2304      	movs	r3, #4
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951e:	e24a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009520:	2308      	movs	r3, #8
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009526:	e246      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009528:	2310      	movs	r3, #16
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	e242      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009530:	2320      	movs	r3, #32
 8009532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009536:	e23e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009538:	cfff69f3 	.word	0xcfff69f3
 800953c:	58000c00 	.word	0x58000c00
 8009540:	11fff4ff 	.word	0x11fff4ff
 8009544:	40011000 	.word	0x40011000
 8009548:	58024400 	.word	0x58024400
 800954c:	40004400 	.word	0x40004400
 8009550:	40004800 	.word	0x40004800
 8009554:	40004c00 	.word	0x40004c00
 8009558:	40005000 	.word	0x40005000
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009562:	e228      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009564:	2380      	movs	r3, #128	; 0x80
 8009566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800956a:	e224      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4ab1      	ldr	r2, [pc, #708]	; (8009838 <UART_SetConfig+0x62c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d176      	bne.n	8009664 <UART_SetConfig+0x458>
 8009576:	4bb1      	ldr	r3, [pc, #708]	; (800983c <UART_SetConfig+0x630>)
 8009578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800957e:	2b28      	cmp	r3, #40	; 0x28
 8009580:	d86c      	bhi.n	800965c <UART_SetConfig+0x450>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <UART_SetConfig+0x37c>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	0800962d 	.word	0x0800962d
 800958c:	0800965d 	.word	0x0800965d
 8009590:	0800965d 	.word	0x0800965d
 8009594:	0800965d 	.word	0x0800965d
 8009598:	0800965d 	.word	0x0800965d
 800959c:	0800965d 	.word	0x0800965d
 80095a0:	0800965d 	.word	0x0800965d
 80095a4:	0800965d 	.word	0x0800965d
 80095a8:	08009635 	.word	0x08009635
 80095ac:	0800965d 	.word	0x0800965d
 80095b0:	0800965d 	.word	0x0800965d
 80095b4:	0800965d 	.word	0x0800965d
 80095b8:	0800965d 	.word	0x0800965d
 80095bc:	0800965d 	.word	0x0800965d
 80095c0:	0800965d 	.word	0x0800965d
 80095c4:	0800965d 	.word	0x0800965d
 80095c8:	0800963d 	.word	0x0800963d
 80095cc:	0800965d 	.word	0x0800965d
 80095d0:	0800965d 	.word	0x0800965d
 80095d4:	0800965d 	.word	0x0800965d
 80095d8:	0800965d 	.word	0x0800965d
 80095dc:	0800965d 	.word	0x0800965d
 80095e0:	0800965d 	.word	0x0800965d
 80095e4:	0800965d 	.word	0x0800965d
 80095e8:	08009645 	.word	0x08009645
 80095ec:	0800965d 	.word	0x0800965d
 80095f0:	0800965d 	.word	0x0800965d
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	0800965d 	.word	0x0800965d
 80095fc:	0800965d 	.word	0x0800965d
 8009600:	0800965d 	.word	0x0800965d
 8009604:	0800965d 	.word	0x0800965d
 8009608:	0800964d 	.word	0x0800964d
 800960c:	0800965d 	.word	0x0800965d
 8009610:	0800965d 	.word	0x0800965d
 8009614:	0800965d 	.word	0x0800965d
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	0800965d 	.word	0x0800965d
 8009624:	0800965d 	.word	0x0800965d
 8009628:	08009655 	.word	0x08009655
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009632:	e1c0      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009634:	2304      	movs	r3, #4
 8009636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963a:	e1bc      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800963c:	2308      	movs	r3, #8
 800963e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009642:	e1b8      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009644:	2310      	movs	r3, #16
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e1b4      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800964c:	2320      	movs	r3, #32
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e1b0      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e1ac      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800965c:	2380      	movs	r3, #128	; 0x80
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009662:	e1a8      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a75      	ldr	r2, [pc, #468]	; (8009840 <UART_SetConfig+0x634>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d130      	bne.n	80096d0 <UART_SetConfig+0x4c4>
 800966e:	4b73      	ldr	r3, [pc, #460]	; (800983c <UART_SetConfig+0x630>)
 8009670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	2b05      	cmp	r3, #5
 8009678:	d826      	bhi.n	80096c8 <UART_SetConfig+0x4bc>
 800967a:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <UART_SetConfig+0x474>)
 800967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009680:	08009699 	.word	0x08009699
 8009684:	080096a1 	.word	0x080096a1
 8009688:	080096a9 	.word	0x080096a9
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096b9 	.word	0x080096b9
 8009694:	080096c1 	.word	0x080096c1
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e18a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096a0:	2304      	movs	r3, #4
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e186      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096a8:	2308      	movs	r3, #8
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e182      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096b0:	2310      	movs	r3, #16
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e17e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096b8:	2320      	movs	r3, #32
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e17a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e176      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096c8:	2380      	movs	r3, #128	; 0x80
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e172      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a5b      	ldr	r2, [pc, #364]	; (8009844 <UART_SetConfig+0x638>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d130      	bne.n	800973c <UART_SetConfig+0x530>
 80096da:	4b58      	ldr	r3, [pc, #352]	; (800983c <UART_SetConfig+0x630>)
 80096dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d826      	bhi.n	8009734 <UART_SetConfig+0x528>
 80096e6:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0x4e0>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009705 	.word	0x08009705
 80096f0:	0800970d 	.word	0x0800970d
 80096f4:	08009715 	.word	0x08009715
 80096f8:	0800971d 	.word	0x0800971d
 80096fc:	08009725 	.word	0x08009725
 8009700:	0800972d 	.word	0x0800972d
 8009704:	2300      	movs	r3, #0
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e154      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e150      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e14c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e148      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009724:	2320      	movs	r3, #32
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e144      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800972c:	2340      	movs	r3, #64	; 0x40
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e140      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009734:	2380      	movs	r3, #128	; 0x80
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e13c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a41      	ldr	r2, [pc, #260]	; (8009848 <UART_SetConfig+0x63c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	f040 8082 	bne.w	800984c <UART_SetConfig+0x640>
 8009748:	4b3c      	ldr	r3, [pc, #240]	; (800983c <UART_SetConfig+0x630>)
 800974a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009750:	2b28      	cmp	r3, #40	; 0x28
 8009752:	d86d      	bhi.n	8009830 <UART_SetConfig+0x624>
 8009754:	a201      	add	r2, pc, #4	; (adr r2, 800975c <UART_SetConfig+0x550>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	08009801 	.word	0x08009801
 8009760:	08009831 	.word	0x08009831
 8009764:	08009831 	.word	0x08009831
 8009768:	08009831 	.word	0x08009831
 800976c:	08009831 	.word	0x08009831
 8009770:	08009831 	.word	0x08009831
 8009774:	08009831 	.word	0x08009831
 8009778:	08009831 	.word	0x08009831
 800977c:	08009809 	.word	0x08009809
 8009780:	08009831 	.word	0x08009831
 8009784:	08009831 	.word	0x08009831
 8009788:	08009831 	.word	0x08009831
 800978c:	08009831 	.word	0x08009831
 8009790:	08009831 	.word	0x08009831
 8009794:	08009831 	.word	0x08009831
 8009798:	08009831 	.word	0x08009831
 800979c:	08009811 	.word	0x08009811
 80097a0:	08009831 	.word	0x08009831
 80097a4:	08009831 	.word	0x08009831
 80097a8:	08009831 	.word	0x08009831
 80097ac:	08009831 	.word	0x08009831
 80097b0:	08009831 	.word	0x08009831
 80097b4:	08009831 	.word	0x08009831
 80097b8:	08009831 	.word	0x08009831
 80097bc:	08009819 	.word	0x08009819
 80097c0:	08009831 	.word	0x08009831
 80097c4:	08009831 	.word	0x08009831
 80097c8:	08009831 	.word	0x08009831
 80097cc:	08009831 	.word	0x08009831
 80097d0:	08009831 	.word	0x08009831
 80097d4:	08009831 	.word	0x08009831
 80097d8:	08009831 	.word	0x08009831
 80097dc:	08009821 	.word	0x08009821
 80097e0:	08009831 	.word	0x08009831
 80097e4:	08009831 	.word	0x08009831
 80097e8:	08009831 	.word	0x08009831
 80097ec:	08009831 	.word	0x08009831
 80097f0:	08009831 	.word	0x08009831
 80097f4:	08009831 	.word	0x08009831
 80097f8:	08009831 	.word	0x08009831
 80097fc:	08009829 	.word	0x08009829
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009806:	e0d6      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009808:	2304      	movs	r3, #4
 800980a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980e:	e0d2      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009810:	2308      	movs	r3, #8
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009816:	e0ce      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009818:	2310      	movs	r3, #16
 800981a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981e:	e0ca      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009820:	2320      	movs	r3, #32
 8009822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009826:	e0c6      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982e:	e0c2      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009830:	2380      	movs	r3, #128	; 0x80
 8009832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009836:	e0be      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009838:	40011400 	.word	0x40011400
 800983c:	58024400 	.word	0x58024400
 8009840:	40007800 	.word	0x40007800
 8009844:	40007c00 	.word	0x40007c00
 8009848:	40011800 	.word	0x40011800
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4aad      	ldr	r2, [pc, #692]	; (8009b08 <UART_SetConfig+0x8fc>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d176      	bne.n	8009944 <UART_SetConfig+0x738>
 8009856:	4bad      	ldr	r3, [pc, #692]	; (8009b0c <UART_SetConfig+0x900>)
 8009858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800985e:	2b28      	cmp	r3, #40	; 0x28
 8009860:	d86c      	bhi.n	800993c <UART_SetConfig+0x730>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <UART_SetConfig+0x65c>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	0800990d 	.word	0x0800990d
 800986c:	0800993d 	.word	0x0800993d
 8009870:	0800993d 	.word	0x0800993d
 8009874:	0800993d 	.word	0x0800993d
 8009878:	0800993d 	.word	0x0800993d
 800987c:	0800993d 	.word	0x0800993d
 8009880:	0800993d 	.word	0x0800993d
 8009884:	0800993d 	.word	0x0800993d
 8009888:	08009915 	.word	0x08009915
 800988c:	0800993d 	.word	0x0800993d
 8009890:	0800993d 	.word	0x0800993d
 8009894:	0800993d 	.word	0x0800993d
 8009898:	0800993d 	.word	0x0800993d
 800989c:	0800993d 	.word	0x0800993d
 80098a0:	0800993d 	.word	0x0800993d
 80098a4:	0800993d 	.word	0x0800993d
 80098a8:	0800991d 	.word	0x0800991d
 80098ac:	0800993d 	.word	0x0800993d
 80098b0:	0800993d 	.word	0x0800993d
 80098b4:	0800993d 	.word	0x0800993d
 80098b8:	0800993d 	.word	0x0800993d
 80098bc:	0800993d 	.word	0x0800993d
 80098c0:	0800993d 	.word	0x0800993d
 80098c4:	0800993d 	.word	0x0800993d
 80098c8:	08009925 	.word	0x08009925
 80098cc:	0800993d 	.word	0x0800993d
 80098d0:	0800993d 	.word	0x0800993d
 80098d4:	0800993d 	.word	0x0800993d
 80098d8:	0800993d 	.word	0x0800993d
 80098dc:	0800993d 	.word	0x0800993d
 80098e0:	0800993d 	.word	0x0800993d
 80098e4:	0800993d 	.word	0x0800993d
 80098e8:	0800992d 	.word	0x0800992d
 80098ec:	0800993d 	.word	0x0800993d
 80098f0:	0800993d 	.word	0x0800993d
 80098f4:	0800993d 	.word	0x0800993d
 80098f8:	0800993d 	.word	0x0800993d
 80098fc:	0800993d 	.word	0x0800993d
 8009900:	0800993d 	.word	0x0800993d
 8009904:	0800993d 	.word	0x0800993d
 8009908:	08009935 	.word	0x08009935
 800990c:	2301      	movs	r3, #1
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e050      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009914:	2304      	movs	r3, #4
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e04c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800991c:	2308      	movs	r3, #8
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e048      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009924:	2310      	movs	r3, #16
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e044      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800992c:	2320      	movs	r3, #32
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e040      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e03c      	b.n	80099b6 <UART_SetConfig+0x7aa>
 800993c:	2380      	movs	r3, #128	; 0x80
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e038      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a71      	ldr	r2, [pc, #452]	; (8009b10 <UART_SetConfig+0x904>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d130      	bne.n	80099b0 <UART_SetConfig+0x7a4>
 800994e:	4b6f      	ldr	r3, [pc, #444]	; (8009b0c <UART_SetConfig+0x900>)
 8009950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b05      	cmp	r3, #5
 8009958:	d826      	bhi.n	80099a8 <UART_SetConfig+0x79c>
 800995a:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <UART_SetConfig+0x754>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	08009979 	.word	0x08009979
 8009964:	08009981 	.word	0x08009981
 8009968:	08009989 	.word	0x08009989
 800996c:	08009991 	.word	0x08009991
 8009970:	08009999 	.word	0x08009999
 8009974:	080099a1 	.word	0x080099a1
 8009978:	2302      	movs	r3, #2
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e01a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009980:	2304      	movs	r3, #4
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e016      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009988:	2308      	movs	r3, #8
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e012      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e00e      	b.n	80099b6 <UART_SetConfig+0x7aa>
 8009998:	2320      	movs	r3, #32
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e00a      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e006      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e002      	b.n	80099b6 <UART_SetConfig+0x7aa>
 80099b0:	2380      	movs	r3, #128	; 0x80
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a55      	ldr	r2, [pc, #340]	; (8009b10 <UART_SetConfig+0x904>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	f040 80f0 	bne.w	8009ba2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	dc46      	bgt.n	8009a58 <UART_SetConfig+0x84c>
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	db75      	blt.n	8009aba <UART_SetConfig+0x8ae>
 80099ce:	3b02      	subs	r3, #2
 80099d0:	2b1e      	cmp	r3, #30
 80099d2:	d872      	bhi.n	8009aba <UART_SetConfig+0x8ae>
 80099d4:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <UART_SetConfig+0x7d0>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a5f 	.word	0x08009a5f
 80099e0:	08009abb 	.word	0x08009abb
 80099e4:	08009a67 	.word	0x08009a67
 80099e8:	08009abb 	.word	0x08009abb
 80099ec:	08009abb 	.word	0x08009abb
 80099f0:	08009abb 	.word	0x08009abb
 80099f4:	08009a77 	.word	0x08009a77
 80099f8:	08009abb 	.word	0x08009abb
 80099fc:	08009abb 	.word	0x08009abb
 8009a00:	08009abb 	.word	0x08009abb
 8009a04:	08009abb 	.word	0x08009abb
 8009a08:	08009abb 	.word	0x08009abb
 8009a0c:	08009abb 	.word	0x08009abb
 8009a10:	08009abb 	.word	0x08009abb
 8009a14:	08009a87 	.word	0x08009a87
 8009a18:	08009abb 	.word	0x08009abb
 8009a1c:	08009abb 	.word	0x08009abb
 8009a20:	08009abb 	.word	0x08009abb
 8009a24:	08009abb 	.word	0x08009abb
 8009a28:	08009abb 	.word	0x08009abb
 8009a2c:	08009abb 	.word	0x08009abb
 8009a30:	08009abb 	.word	0x08009abb
 8009a34:	08009abb 	.word	0x08009abb
 8009a38:	08009abb 	.word	0x08009abb
 8009a3c:	08009abb 	.word	0x08009abb
 8009a40:	08009abb 	.word	0x08009abb
 8009a44:	08009abb 	.word	0x08009abb
 8009a48:	08009abb 	.word	0x08009abb
 8009a4c:	08009abb 	.word	0x08009abb
 8009a50:	08009abb 	.word	0x08009abb
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	2b40      	cmp	r3, #64	; 0x40
 8009a5a:	d02a      	beq.n	8009ab2 <UART_SetConfig+0x8a6>
 8009a5c:	e02d      	b.n	8009aba <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a5e:	f7fd fe39 	bl	80076d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a64:	e02f      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a66:	f107 0314 	add.w	r3, r7, #20
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fd fe48 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a74:	e027      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fd ff94 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a84:	e01f      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a86:	4b21      	ldr	r3, [pc, #132]	; (8009b0c <UART_SetConfig+0x900>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d009      	beq.n	8009aa6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a92:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <UART_SetConfig+0x900>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	4a1d      	ldr	r2, [pc, #116]	; (8009b14 <UART_SetConfig+0x908>)
 8009a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa4:	e00f      	b.n	8009ac6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009aa6:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <UART_SetConfig+0x908>)
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aaa:	e00c      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aac:	4b1a      	ldr	r3, [pc, #104]	; (8009b18 <UART_SetConfig+0x90c>)
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab0:	e009      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab8:	e005      	b.n	8009ac6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 81e6 	beq.w	8009e9a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	4a12      	ldr	r2, [pc, #72]	; (8009b1c <UART_SetConfig+0x910>)
 8009ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4413      	add	r3, r2
 8009aec:	6a3a      	ldr	r2, [r7, #32]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d305      	bcc.n	8009afe <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af8:	6a3a      	ldr	r2, [r7, #32]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d910      	bls.n	8009b20 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b04:	e1c9      	b.n	8009e9a <UART_SetConfig+0xc8e>
 8009b06:	bf00      	nop
 8009b08:	40011c00 	.word	0x40011c00
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	58000c00 	.word	0x58000c00
 8009b14:	03d09000 	.word	0x03d09000
 8009b18:	003d0900 	.word	0x003d0900
 8009b1c:	0800a4f0 	.word	0x0800a4f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	4618      	mov	r0, r3
 8009b24:	f04f 0100 	mov.w	r1, #0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	4ac1      	ldr	r2, [pc, #772]	; (8009e34 <UART_SetConfig+0xc28>)
 8009b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	f7f6 fbf0 	bl	800031c <__aeabi_uldivmod>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f04f 0200 	mov.w	r2, #0
 8009b48:	f04f 0300 	mov.w	r3, #0
 8009b4c:	020b      	lsls	r3, r1, #8
 8009b4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b52:	0202      	lsls	r2, r0, #8
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	6849      	ldr	r1, [r1, #4]
 8009b58:	0849      	lsrs	r1, r1, #1
 8009b5a:	4608      	mov	r0, r1
 8009b5c:	f04f 0100 	mov.w	r1, #0
 8009b60:	1814      	adds	r4, r2, r0
 8009b62:	eb43 0501 	adc.w	r5, r3, r1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	4620      	mov	r0, r4
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 fbd2 	bl	800031c <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b86:	d308      	bcc.n	8009b9a <UART_SetConfig+0x98e>
 8009b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b8e:	d204      	bcs.n	8009b9a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b96:	60da      	str	r2, [r3, #12]
 8009b98:	e17f      	b.n	8009e9a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ba0:	e17b      	b.n	8009e9a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009baa:	f040 80be 	bne.w	8009d2a <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8009bae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	dc48      	bgt.n	8009c48 <UART_SetConfig+0xa3c>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	db7b      	blt.n	8009cb2 <UART_SetConfig+0xaa6>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d879      	bhi.n	8009cb2 <UART_SetConfig+0xaa6>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x9b8>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009c57 	.word	0x08009c57
 8009bcc:	08009cb3 	.word	0x08009cb3
 8009bd0:	08009cb3 	.word	0x08009cb3
 8009bd4:	08009c5f 	.word	0x08009c5f
 8009bd8:	08009cb3 	.word	0x08009cb3
 8009bdc:	08009cb3 	.word	0x08009cb3
 8009be0:	08009cb3 	.word	0x08009cb3
 8009be4:	08009c6f 	.word	0x08009c6f
 8009be8:	08009cb3 	.word	0x08009cb3
 8009bec:	08009cb3 	.word	0x08009cb3
 8009bf0:	08009cb3 	.word	0x08009cb3
 8009bf4:	08009cb3 	.word	0x08009cb3
 8009bf8:	08009cb3 	.word	0x08009cb3
 8009bfc:	08009cb3 	.word	0x08009cb3
 8009c00:	08009cb3 	.word	0x08009cb3
 8009c04:	08009c7f 	.word	0x08009c7f
 8009c08:	08009cb3 	.word	0x08009cb3
 8009c0c:	08009cb3 	.word	0x08009cb3
 8009c10:	08009cb3 	.word	0x08009cb3
 8009c14:	08009cb3 	.word	0x08009cb3
 8009c18:	08009cb3 	.word	0x08009cb3
 8009c1c:	08009cb3 	.word	0x08009cb3
 8009c20:	08009cb3 	.word	0x08009cb3
 8009c24:	08009cb3 	.word	0x08009cb3
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cb3 	.word	0x08009cb3
 8009c30:	08009cb3 	.word	0x08009cb3
 8009c34:	08009cb3 	.word	0x08009cb3
 8009c38:	08009cb3 	.word	0x08009cb3
 8009c3c:	08009cb3 	.word	0x08009cb3
 8009c40:	08009cb3 	.word	0x08009cb3
 8009c44:	08009ca5 	.word	0x08009ca5
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d02e      	beq.n	8009caa <UART_SetConfig+0xa9e>
 8009c4c:	e031      	b.n	8009cb2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fc f9f7 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8009c52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c54:	e033      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c56:	f7fc fa09 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8009c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c5c:	e02f      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c5e:	f107 0314 	add.w	r3, r7, #20
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd fd4c 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6c:	e027      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd fe98 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c7c:	e01f      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c7e:	4b6e      	ldr	r3, [pc, #440]	; (8009e38 <UART_SetConfig+0xc2c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c8a:	4b6b      	ldr	r3, [pc, #428]	; (8009e38 <UART_SetConfig+0xc2c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	08db      	lsrs	r3, r3, #3
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	4a69      	ldr	r2, [pc, #420]	; (8009e3c <UART_SetConfig+0xc30>)
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c9c:	e00f      	b.n	8009cbe <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009c9e:	4b67      	ldr	r3, [pc, #412]	; (8009e3c <UART_SetConfig+0xc30>)
 8009ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ca2:	e00c      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ca4:	4b66      	ldr	r3, [pc, #408]	; (8009e40 <UART_SetConfig+0xc34>)
 8009ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ca8:	e009      	b.n	8009cbe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb0:	e005      	b.n	8009cbe <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80ea 	beq.w	8009e9a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	4a5a      	ldr	r2, [pc, #360]	; (8009e34 <UART_SetConfig+0xc28>)
 8009ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cd8:	005a      	lsls	r2, r3, #1
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	441a      	add	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	2b0f      	cmp	r3, #15
 8009cf2:	d916      	bls.n	8009d22 <UART_SetConfig+0xb16>
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfa:	d212      	bcs.n	8009d22 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f023 030f 	bic.w	r3, r3, #15
 8009d04:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d14:	4313      	orrs	r3, r2
 8009d16:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009d1e:	60da      	str	r2, [r3, #12]
 8009d20:	e0bb      	b.n	8009e9a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d28:	e0b7      	b.n	8009e9a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	dc4a      	bgt.n	8009dc8 <UART_SetConfig+0xbbc>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f2c0 8086 	blt.w	8009e44 <UART_SetConfig+0xc38>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	f200 8083 	bhi.w	8009e44 <UART_SetConfig+0xc38>
 8009d3e:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <UART_SetConfig+0xb38>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009dcf 	.word	0x08009dcf
 8009d48:	08009dd7 	.word	0x08009dd7
 8009d4c:	08009e45 	.word	0x08009e45
 8009d50:	08009e45 	.word	0x08009e45
 8009d54:	08009ddf 	.word	0x08009ddf
 8009d58:	08009e45 	.word	0x08009e45
 8009d5c:	08009e45 	.word	0x08009e45
 8009d60:	08009e45 	.word	0x08009e45
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009e45 	.word	0x08009e45
 8009d6c:	08009e45 	.word	0x08009e45
 8009d70:	08009e45 	.word	0x08009e45
 8009d74:	08009e45 	.word	0x08009e45
 8009d78:	08009e45 	.word	0x08009e45
 8009d7c:	08009e45 	.word	0x08009e45
 8009d80:	08009e45 	.word	0x08009e45
 8009d84:	08009dff 	.word	0x08009dff
 8009d88:	08009e45 	.word	0x08009e45
 8009d8c:	08009e45 	.word	0x08009e45
 8009d90:	08009e45 	.word	0x08009e45
 8009d94:	08009e45 	.word	0x08009e45
 8009d98:	08009e45 	.word	0x08009e45
 8009d9c:	08009e45 	.word	0x08009e45
 8009da0:	08009e45 	.word	0x08009e45
 8009da4:	08009e45 	.word	0x08009e45
 8009da8:	08009e45 	.word	0x08009e45
 8009dac:	08009e45 	.word	0x08009e45
 8009db0:	08009e45 	.word	0x08009e45
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e45 	.word	0x08009e45
 8009dbc:	08009e45 	.word	0x08009e45
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009e25 	.word	0x08009e25
 8009dc8:	2b40      	cmp	r3, #64	; 0x40
 8009dca:	d02e      	beq.n	8009e2a <UART_SetConfig+0xc1e>
 8009dcc:	e03a      	b.n	8009e44 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dce:	f7fc f937 	bl	8006040 <HAL_RCC_GetPCLK1Freq>
 8009dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009dd4:	e03c      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd6:	f7fc f949 	bl	800606c <HAL_RCC_GetPCLK2Freq>
 8009dda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ddc:	e038      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dde:	f107 0314 	add.w	r3, r7, #20
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fd fc8c 	bl	8007700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dec:	e030      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd fdd8 	bl	80079a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dfc:	e028      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <UART_SetConfig+0xc2c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <UART_SetConfig+0xc2c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	08db      	lsrs	r3, r3, #3
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <UART_SetConfig+0xc30>)
 8009e16:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e1c:	e018      	b.n	8009e50 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8009e1e:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <UART_SetConfig+0xc30>)
 8009e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e22:	e015      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e24:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <UART_SetConfig+0xc34>)
 8009e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e28:	e012      	b.n	8009e50 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e30:	e00e      	b.n	8009e50 <UART_SetConfig+0xc44>
 8009e32:	bf00      	nop
 8009e34:	0800a4f0 	.word	0x0800a4f0
 8009e38:	58024400 	.word	0x58024400
 8009e3c:	03d09000 	.word	0x03d09000
 8009e40:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d021      	beq.n	8009e9a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <UART_SetConfig+0xcb8>)
 8009e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	441a      	add	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	2b0f      	cmp	r3, #15
 8009e80:	d908      	bls.n	8009e94 <UART_SetConfig+0xc88>
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e88:	d204      	bcs.n	8009e94 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	e002      	b.n	8009e9a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009eb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3738      	adds	r7, #56	; 0x38
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800a4f0 	.word	0x0800a4f0

08009ec8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00a      	beq.n	8009ef2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00a      	beq.n	8009f14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00a      	beq.n	8009f36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00a      	beq.n	8009f58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01a      	beq.n	8009fde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fc6:	d10a      	bne.n	8009fde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	430a      	orrs	r2, r1
 8009ffe:	605a      	str	r2, [r3, #4]
  }
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af02      	add	r7, sp, #8
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a01c:	f7f7 f984 	bl	8001328 <HAL_GetTick>
 800a020:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d10e      	bne.n	800a04e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f82f 	bl	800a0a2 <UART_WaitOnFlagUntilTimeout>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a04a:	2303      	movs	r3, #3
 800a04c:	e025      	b.n	800a09a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d10e      	bne.n	800a07a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a05c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f819 	bl	800a0a2 <UART_WaitOnFlagUntilTimeout>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a076:	2303      	movs	r3, #3
 800a078:	e00f      	b.n	800a09a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b2:	e062      	b.n	800a17a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ba:	d05e      	beq.n	800a17a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0bc:	f7f7 f934 	bl	8001328 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d302      	bcc.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d11d      	bne.n	800a10e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e045      	b.n	800a19a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d02e      	beq.n	800a17a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12a:	d126      	bne.n	800a17a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a134:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a144:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0201 	bic.w	r2, r2, #1
 800a154:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2220      	movs	r2, #32
 800a15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2220      	movs	r2, #32
 800a16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e00f      	b.n	800a19a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	69da      	ldr	r2, [r3, #28]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4013      	ands	r3, r2
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	429a      	cmp	r2, r3
 800a188:	bf0c      	ite	eq
 800a18a:	2301      	moveq	r3, #1
 800a18c:	2300      	movne	r3, #0
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	461a      	mov	r2, r3
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	429a      	cmp	r2, r3
 800a196:	d08d      	beq.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e027      	b.n	800a208 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2224      	movs	r2, #36	; 0x24
 800a1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0201 	bic.w	r2, r2, #1
 800a1de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2220      	movs	r2, #32
 800a1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a228:	2302      	movs	r3, #2
 800a22a:	e02d      	b.n	800a288 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2224      	movs	r2, #36	; 0x24
 800a238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f022 0201 	bic.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f84f 	bl	800a30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e02d      	b.n	800a304 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2224      	movs	r2, #36	; 0x24
 800a2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 0201 	bic.w	r2, r2, #1
 800a2ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f811 	bl	800a30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d108      	bne.n	800a32e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a32c:	e031      	b.n	800a392 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a32e:	2310      	movs	r3, #16
 800a330:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a332:	2310      	movs	r3, #16
 800a334:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	0e5b      	lsrs	r3, r3, #25
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 0307 	and.w	r3, r3, #7
 800a344:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	0f5b      	lsrs	r3, r3, #29
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a356:	7bbb      	ldrb	r3, [r7, #14]
 800a358:	7b3a      	ldrb	r2, [r7, #12]
 800a35a:	4911      	ldr	r1, [pc, #68]	; (800a3a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a35c:	5c8a      	ldrb	r2, [r1, r2]
 800a35e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a362:	7b3a      	ldrb	r2, [r7, #12]
 800a364:	490f      	ldr	r1, [pc, #60]	; (800a3a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a366:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a368:	fb93 f3f2 	sdiv	r3, r3, r2
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a374:	7bfb      	ldrb	r3, [r7, #15]
 800a376:	7b7a      	ldrb	r2, [r7, #13]
 800a378:	4909      	ldr	r1, [pc, #36]	; (800a3a0 <UARTEx_SetNbDataToProcess+0x94>)
 800a37a:	5c8a      	ldrb	r2, [r1, r2]
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a380:	7b7a      	ldrb	r2, [r7, #13]
 800a382:	4908      	ldr	r1, [pc, #32]	; (800a3a4 <UARTEx_SetNbDataToProcess+0x98>)
 800a384:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a386:	fb93 f3f2 	sdiv	r3, r3, r2
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	0800a508 	.word	0x0800a508
 800a3a4:	0800a510 	.word	0x0800a510

0800a3a8 <__libc_init_array>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	4d0d      	ldr	r5, [pc, #52]	; (800a3e0 <__libc_init_array+0x38>)
 800a3ac:	4c0d      	ldr	r4, [pc, #52]	; (800a3e4 <__libc_init_array+0x3c>)
 800a3ae:	1b64      	subs	r4, r4, r5
 800a3b0:	10a4      	asrs	r4, r4, #2
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	d109      	bne.n	800a3cc <__libc_init_array+0x24>
 800a3b8:	4d0b      	ldr	r5, [pc, #44]	; (800a3e8 <__libc_init_array+0x40>)
 800a3ba:	4c0c      	ldr	r4, [pc, #48]	; (800a3ec <__libc_init_array+0x44>)
 800a3bc:	f000 f87c 	bl	800a4b8 <_init>
 800a3c0:	1b64      	subs	r4, r4, r5
 800a3c2:	10a4      	asrs	r4, r4, #2
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	42a6      	cmp	r6, r4
 800a3c8:	d105      	bne.n	800a3d6 <__libc_init_array+0x2e>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3d0:	4798      	blx	r3
 800a3d2:	3601      	adds	r6, #1
 800a3d4:	e7ee      	b.n	800a3b4 <__libc_init_array+0xc>
 800a3d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3da:	4798      	blx	r3
 800a3dc:	3601      	adds	r6, #1
 800a3de:	e7f2      	b.n	800a3c6 <__libc_init_array+0x1e>
 800a3e0:	0800a548 	.word	0x0800a548
 800a3e4:	0800a548 	.word	0x0800a548
 800a3e8:	0800a548 	.word	0x0800a548
 800a3ec:	0800a54c 	.word	0x0800a54c

0800a3f0 <__itoa>:
 800a3f0:	1e93      	subs	r3, r2, #2
 800a3f2:	2b22      	cmp	r3, #34	; 0x22
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	d904      	bls.n	800a404 <__itoa+0x14>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	700b      	strb	r3, [r1, #0]
 800a3fe:	461c      	mov	r4, r3
 800a400:	4620      	mov	r0, r4
 800a402:	bd10      	pop	{r4, pc}
 800a404:	2a0a      	cmp	r2, #10
 800a406:	d109      	bne.n	800a41c <__itoa+0x2c>
 800a408:	2800      	cmp	r0, #0
 800a40a:	da07      	bge.n	800a41c <__itoa+0x2c>
 800a40c:	232d      	movs	r3, #45	; 0x2d
 800a40e:	700b      	strb	r3, [r1, #0]
 800a410:	4240      	negs	r0, r0
 800a412:	2101      	movs	r1, #1
 800a414:	4421      	add	r1, r4
 800a416:	f000 f80d 	bl	800a434 <__utoa>
 800a41a:	e7f1      	b.n	800a400 <__itoa+0x10>
 800a41c:	2100      	movs	r1, #0
 800a41e:	e7f9      	b.n	800a414 <__itoa+0x24>

0800a420 <itoa>:
 800a420:	f7ff bfe6 	b.w	800a3f0 <__itoa>

0800a424 <memset>:
 800a424:	4402      	add	r2, r0
 800a426:	4603      	mov	r3, r0
 800a428:	4293      	cmp	r3, r2
 800a42a:	d100      	bne.n	800a42e <memset+0xa>
 800a42c:	4770      	bx	lr
 800a42e:	f803 1b01 	strb.w	r1, [r3], #1
 800a432:	e7f9      	b.n	800a428 <memset+0x4>

0800a434 <__utoa>:
 800a434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a436:	4c1f      	ldr	r4, [pc, #124]	; (800a4b4 <__utoa+0x80>)
 800a438:	b08b      	sub	sp, #44	; 0x2c
 800a43a:	4605      	mov	r5, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	466e      	mov	r6, sp
 800a440:	f104 0c20 	add.w	ip, r4, #32
 800a444:	6820      	ldr	r0, [r4, #0]
 800a446:	6861      	ldr	r1, [r4, #4]
 800a448:	4637      	mov	r7, r6
 800a44a:	c703      	stmia	r7!, {r0, r1}
 800a44c:	3408      	adds	r4, #8
 800a44e:	4564      	cmp	r4, ip
 800a450:	463e      	mov	r6, r7
 800a452:	d1f7      	bne.n	800a444 <__utoa+0x10>
 800a454:	7921      	ldrb	r1, [r4, #4]
 800a456:	7139      	strb	r1, [r7, #4]
 800a458:	1e91      	subs	r1, r2, #2
 800a45a:	6820      	ldr	r0, [r4, #0]
 800a45c:	6038      	str	r0, [r7, #0]
 800a45e:	2922      	cmp	r1, #34	; 0x22
 800a460:	f04f 0100 	mov.w	r1, #0
 800a464:	d904      	bls.n	800a470 <__utoa+0x3c>
 800a466:	7019      	strb	r1, [r3, #0]
 800a468:	460b      	mov	r3, r1
 800a46a:	4618      	mov	r0, r3
 800a46c:	b00b      	add	sp, #44	; 0x2c
 800a46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a470:	1e58      	subs	r0, r3, #1
 800a472:	4684      	mov	ip, r0
 800a474:	fbb5 f7f2 	udiv	r7, r5, r2
 800a478:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800a47c:	fb02 5617 	mls	r6, r2, r7, r5
 800a480:	4476      	add	r6, lr
 800a482:	460c      	mov	r4, r1
 800a484:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a488:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a48c:	462e      	mov	r6, r5
 800a48e:	42b2      	cmp	r2, r6
 800a490:	f101 0101 	add.w	r1, r1, #1
 800a494:	463d      	mov	r5, r7
 800a496:	d9ed      	bls.n	800a474 <__utoa+0x40>
 800a498:	2200      	movs	r2, #0
 800a49a:	545a      	strb	r2, [r3, r1]
 800a49c:	1919      	adds	r1, r3, r4
 800a49e:	1aa5      	subs	r5, r4, r2
 800a4a0:	42aa      	cmp	r2, r5
 800a4a2:	dae2      	bge.n	800a46a <__utoa+0x36>
 800a4a4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a4a8:	780e      	ldrb	r6, [r1, #0]
 800a4aa:	7006      	strb	r6, [r0, #0]
 800a4ac:	3201      	adds	r2, #1
 800a4ae:	f801 5901 	strb.w	r5, [r1], #-1
 800a4b2:	e7f4      	b.n	800a49e <__utoa+0x6a>
 800a4b4:	0800a518 	.word	0x0800a518

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
